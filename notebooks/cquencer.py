# -*- coding: utf-8 -*-
"""CquenceR.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iywElgfFio7e8VN1yZOemHm8hRV4IJHy

# Clone CquenceR and PatchBundle
"""

!git clone https://github.com/epicosy/PatchBundle.git

!git clone https://github.com/epicosy/CquenceR.git

"""# Install python 3.7"""

!apt-get install python3.7 python3.7-dev

"""# Initialize CquenceR
Version of OpenNMT needs no be under 2.0.0, or some dependencies will not work later, such as the OpenNMT's preprocess script and other inputs. Also, the python version check in the init script might fial, just comment it. If you can not run with the gpu, update the torch, for that check the 2ยบ cell in the "Train with GPU and Plot results" section.
"""

! CquenceR/init.sh

!pip3 install -Iv OpenNMT-py==1.2.0

"""# Install python 3.7 dependencies"""

!curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
!python3.7 get-pip.py
!python3.7 -m pip install pandas
!python3.7 -m pip install sklearn
!python3.7 -m pip install python-Levenshtein
!python3.7 -m pip install PyGithub
!python3.7 -m pip install matplotlib
!python3.7 -m pip install ipykernel
# !python3.7 -m pip freeze > requirements.txt

"""# Create new dataset"""

# Commented out IPython magic to ensure Python compatibility.
# %cd PatchBundle/tool/
!echo 'asd' > token.txt
!python3.7 ./PatchBundle.py filter --datasets nvd secbench mozilla secretpatch msr20 -m -v
# %cd ../..

"""# Preprocess Dataset Only into Source and Target Sets for Stats"""

!python3.7 ./CquenceR/CquenceR.py preprocess -op /tmp/dataset --no_truncation --no_onmt -v

"""# Plot Stats for Dataset"""

!python3.7 CquenceR/CquenceR.py stats -v -sp /tmp/dataset --save /content/CquenceR/plots

"""# Clean Data"""

!python3.7 ./CquenceR/CquenceR.py clean -v

"""# Preprocess Dataset for Training and Testing """

!python3.7 ./CquenceR/CquenceR.py preprocess -s train_val_test -v

!python3.7 -m pip install --upgrade torchvision==0.6.0

# Commented out IPython magic to ensure Python compatibility.
# %cd CquenceR
!git pull 
# %cd ..

!which onmt_preprocess

"""# Train with GPU and Plot results (train_plots is the output folder)

"""

!python3.7 CquenceR/CquenceR.py train -v --plot --gpu

!python3.7 -m pip  install torch==1.6.0+cu101 torchvision==0.7.0+cu101 -f https://download.pytorch.org/whl/torch_stable.html
#pip3 install https://download.pytorch.org/whl/cu100/torch-1.1.0-cp36-cp36m-linux_x86_64.whl
#pip3 install https://download.pytorch.org/whl/cu100/torchvision-0.3.0-cp36-cp36m-linux_x86_64.whl

#!curl https://us.download.nvidia.com/tesla/450.80.02/NVIDIA-Linux-x86_64-450.80.02.run -o cuda.run
# https://stackoverflow.com/questions/50560395/how-to-install-cuda-in-google-colab-gpus
#!python3.7 -m pip install mxnet-cu100

"""# Test and Plot Results (test_plots is the output folder)"""

!python3.7 CquenceR/CquenceR.py test -v --plot

import torch
# setting device on GPU if available, else CPU
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
print('Using device:', device)
print()

#Additional Info when using cuda
if device.type == 'cuda':
    print(torch.cuda.get_device_name(0))
    print('Memory Usage:')
    print('Allocated:', round(torch.cuda.memory_allocated(0)/1024**3,1), 'GB')
    print('Cached:   ', round(torch.cuda.memory_reserved(0)/1024**3,1), 'GB')

#%rm /content/PatchBundle -rf

#%cp /content/PatchBundle/data/filtered/merged.pkl /content/CquenceR/data/raw/dataset.pkl