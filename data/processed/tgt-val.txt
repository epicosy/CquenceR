static const double stereo_threshholds [ ] = { 0 . 0 , . 5 , 1 . 0 , 1 . 5 , 2 . 5 , 4 . 5 , 8 . 5 , 16 . 5 , 9e10 } ; <NEW_LINE>static const double stereo_threshholds_limited [ ] = { 0 . 0 , . 5 , 1 . 0 , 1 . 5 , 2 . 0 , 2 . 5 , 4 . 5 , 8 . 5 , 9e10 } ; <NEW_LINE>
hs = ci -> halfrate_flag ; <NEW_LINE>
if ( buf -> pts == AV_NOPTS_VALUE || av_fifo_size ( s -> fifo ) <= 0 ) { <NEW_LINE>
size_t arg_length , args_length , old_args_length ; <NEW_LINE>
<TAB> DBG_RETURN ( ret ) ; <NEW_LINE>
<TAB> <TAB> if ( ret < 0 ) <NEW_LINE><TAB> <TAB> <TAB> goto error ; <NEW_LINE>
create_spnego_ctx ( int initiate ) <NEW_LINE>
<TAB> unsigned int offset = sizeof ( struct ipv6hdr ) ; <NEW_LINE>
<TAB> void * syscall_page = ( void * ) get_zeroed_page ( GFP_ATOMIC ) ; <NEW_LINE><TAB> syscall_pages [ 0 ] = virt_to_page ( syscall_page ) ; <NEW_LINE>
if ( gData -> stateStackTop ) <NEW_LINE> -- gData -> stateStackTop ; <NEW_LINE>
<TAB> <TAB> vhost_net_ubuf_put_wait_and_free ( ubufs ) ; <NEW_LINE>
<TAB> <TAB> umode_t mode ; <NEW_LINE><TAB> <TAB> error = posix_acl_update_mode ( inode , & mode , & acl ) ; <NEW_LINE><TAB> <TAB> if ( error ) <NEW_LINE><TAB> <TAB> <TAB> return error ; <NEW_LINE>
MODULE_ALIAS_NETDEV ( "gre0" ) ;
if ( num < 0 || num >= 256 ) return ONIGERR_TOO_BIG_NUMBER ; <NEW_LINE>
int xt_check_entry_offsets ( const void * base , const char * elems , <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "des3_ede" ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "des3_ede - asm" ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "des" ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "des - asm" ) ; <NEW_LINE>
static void xen_netbk_idx_release ( struct xen_netbk * netbk , u16 pending_idx , <NEW_LINE><TAB> <TAB> <TAB> <TAB> u8 status ) <NEW_LINE>
<NEW_LINE>
extern struct mb2_cache * ext2_xattr_create_cache ( void ) ; <NEW_LINE>extern void ext2_xattr_destroy_cache ( struct mb2_cache * cache ) ; <NEW_LINE>
int chroma_planes , chroma_h_shift , chroma_v_shift , transparency , colorspace , bits_per_raw_sample ; <NEW_LINE>
<NEW_LINE><NEW_LINE><NEW_LINE><NEW_LINE>l_data_size = 2 + ( OPJ_UINT32 ) ( ( p_code_block -> x1 - p_code_block -> x0 ) * <NEW_LINE>
ippSetValueTag ( job -> attrs , & attr , IPP_TAG_KEYWORD ) ; <NEW_LINE>ippSetString ( job -> attrs , & attr , 0 , "no - hold" ) ; <NEW_LINE>
virtual void WriteInternal ( const char * aBuffer , uint32_t aCount , DecodeStrategy aStrategy ) ; <NEW_LINE>
len = rtadv_recv_packet ( sock , buf , sizeof ( buf ) , & from , & ifindex , & hoplimit ) ; <NEW_LINE>
<NEW_LINE>
<NEW_LINE><NEW_LINE><NEW_LINE><NEW_LINE>virtual nsresult OpenContentStream ( PRBool async , nsIInputStream ** stream , <NEW_LINE>nsIChannel ** channel ) = 0 ;
<TAB> u64 event_id = event -> attr . config ; <NEW_LINE>
iakerb_alloc_context ( iakerb_ctx_id_t * pctx , int initiate ) <NEW_LINE>
PL_ArenaFinish ( ) ; <NEW_LINE>
<TAB> __net_random_once_disable_jump ( once_key ) ; <NEW_LINE>
<TAB> if ( pte_valid_user ( pte ) ) { <NEW_LINE>
size_t size = bytes + CHK_OVERHEAD_SIZE ; <NEW_LINE>if ( size < bytes ) { <NEW_LINE>return NULL ; <NEW_LINE> } <NEW_LINE>uint8_t * buffer = ( uint8_t * ) dlmalloc ( size ) ; <NEW_LINE>
<TAB> pgprot_t prot = __get_dma_pgprot ( attrs , PAGE_KERNEL ) ; <NEW_LINE>
<TAB> rcu_read_lock ( ) ; <NEW_LINE><TAB> final_p = fl6_update_dst ( fl6 , rcu_dereference ( np -> opt ) , & final ) ; <NEW_LINE><TAB> rcu_read_unlock ( ) ; <NEW_LINE>
<TAB> <TAB> if ( hlist_unhashed ( & mp -> mglist ) ) <NEW_LINE><TAB> <TAB> <TAB> hlist_add_head ( & mp -> mglist , & br -> mglist ) ; <NEW_LINE>
<TAB> if ( key_is_negative ( key ) ) <NEW_LINE>
<TAB> return skb_append_datato_frags ( sk , skb , getfrag , from , <NEW_LINE><TAB> <TAB> <TAB> <TAB> ( length - transhdrlen ) ) ; <NEW_LINE>
if ( status == NULL ) <NEW_LINE>status = "UNKNOWN_REASON" ; <NEW_LINE>
pd . buf_size = buf_offset += ret ; <NEW_LINE>
virtual void WriteInternal ( const char * aBuffer , uint32_t aCount , DecodeStrategy aStrategy ) ; <NEW_LINE>
<NEW_LINE>already_AddRefed < nsIDOMSVGLength > GetItemAt ( uint32_t aIndex ) ; <NEW_LINE>
<TAB> struct name_snapshot old_name ; <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "aes - all" ) ; <NEW_LINE>
CWD_API void realpath_cache_del ( const char * path , size_t path_len ) <NEW_LINE>
<TAB> <TAB> <NEW_LINE><TAB> <TAB> if ( bp && ( xfs_da_shrink_inode ( args , 0 , bp ) != 0 ) ) <NEW_LINE>
<NEW_LINE>
<TAB> <TAB> if ( tsa && tportno > 0 ) { <NEW_LINE>
if ( ( status = lstat ( filename , filestats ) ) != 0 ) <NEW_LINE>
const jschar * chars ( JSContext * cx , SourceDataCache : : AutoHoldEntry & asp ) ; <NEW_LINE>
sr -> fd_file = fd ; <NEW_LINE>sr -> fd_is_fdt = MK_FALSE ; <NEW_LINE>
p -> tokenbuf [ p -> tokenpos ] = 0 ; <NEW_LINE>
<TAB> struct serial_icounter_struct icount = { } ; <NEW_LINE>
<TAB> if ( ! sctp_verify_asconf ( asoc , chunk , true , & err_param ) ) <NEW_LINE>
<TAB> ( unsigned char * ) e + sizeof ( struct compat_ipt_entry ) >= limit || <NEW_LINE><TAB> ( unsigned char * ) e + e -> next_offset > limit ) { <NEW_LINE>
extern int udf_get_filename ( struct super_block * , uint8_t * , int , uint8_t * , <NEW_LINE><TAB> <TAB> <TAB> int ) ; <NEW_LINE>
{ <NEW_LINE>scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <NEW_LINE>ThrowReaderException ( ResourceLimitError , "MemoryAllocationFailed" ) ; <NEW_LINE> } <NEW_LINE>
<TAB> <TAB> <TAB> if ( npix > 0 ) WritePixel ( i , & context , casspecial ) ; <NEW_LINE><TAB> <TAB> <TAB> npix -- ; <NEW_LINE>
<TAB> bool tsonly , opt_stats = false ; <NEW_LINE>
nsWeakPtr mContent ; <NEW_LINE>
return 1 ; <NEW_LINE>
<TAB> copy_file_as_user ( src , dest , getuid ( ) , getgid ( ) , S_IRUSR | S_IWUSR ) ; <NEW_LINE><TAB> fs_logger2 ( "clone" , dest ) ; <NEW_LINE>
last mod : $ Id $ <NEW_LINE>
<TAB> int <TAB> yy , mm , dd , hr , min , sec , csec , pkt_len ; <NEW_LINE>
char group [ LONG_STRING ] = "" ; <NEW_LINE>
<NEW_LINE>
if ( gData -> stateStackTop ) <NEW_LINE> -- gData -> stateStackTop ; <NEW_LINE>
<TAB> <TAB> int vdaux = verdef -> vd_aux ; <NEW_LINE><TAB> <TAB> if ( vdaux < 1 ) { <NEW_LINE><TAB> <TAB> <TAB> sdb_free ( sdb_verdef ) ; <NEW_LINE><TAB> <TAB> <TAB> goto out_error ; <NEW_LINE><TAB> <TAB> } <NEW_LINE><TAB> <TAB> vstart += vdaux ; <NEW_LINE>
<TAB> dprintk ( 2 , "vm_open % p [ count = % u , vma = % 08lx - % 08lx ] \n" , map , <NEW_LINE>
<TAB> if ( getaddrs . addr_num <= 0 || <NEW_LINE><TAB> getaddrs . addr_num >= ( INT_MAX / sizeof ( union sctp_addr ) ) ) <NEW_LINE><TAB> <TAB> return - EINVAL ; <NEW_LINE>
if ( ! retval ) <NEW_LINE>r = k5memdup0 ( realm , rlen , & retval ) ; <NEW_LINE>
<TAB> <TAB> if ( np -> file -> basename_utf16 . length > ffmax ) { <NEW_LINE>
for ( plane = 0 ; plane < 4 && inpic -> data [ plane ] && inpic -> linesize [ plane ] ; plane + + ) { <NEW_LINE>
<TAB> if ( likely ( serio && ! filtered ) ) <NEW_LINE>
<TAB> cherokee_buffer_is_empty ( & conn -> validator -> user ) || <NEW_LINE><TAB> cherokee_buffer_is_empty ( & conn -> validator -> passwd ) ) <NEW_LINE>
<TAB> case 'u' : <NEW_LINE><TAB> if ( enableSessionTickets ) { <NEW_LINE><TAB> <TAB> if ( sendSessionTicketDuringResumption ) { <NEW_LINE><TAB> <TAB> fprintf ( stderr , " - u option given too many times . \n" ) ; <NEW_LINE><TAB> <TAB> fprintf ( stderr , "Run ' % s - h' for usage information . \n" , progName ) ; <NEW_LINE><TAB> <TAB> exit ( 54 ) ; <NEW_LINE><TAB> <TAB> } <NEW_LINE><TAB> <TAB> sendSessionTicketDuringResumption = PR_TRUE ; <NEW_LINE><TAB> } else { <NEW_LINE><TAB> <TAB> enableSessionTickets = PR_TRUE ; <NEW_LINE><TAB> } <NEW_LINE><TAB> break ; <NEW_LINE>
<TAB> <TAB> size_t j , len = apdu . resp [ i + 1 ] ; <NEW_LINE>
<TAB> int res = 0 ; <NEW_LINE>
last mod : $ Id $ <NEW_LINE>
gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; <NEW_LINE>gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER ; <NEW_LINE>
AutoInfallibleTArray < TemplateRule , 10 > mTemplateRules ; <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "aes" ) ;
<TAB> <TAB> rc = jmp_rel ( ctxt , ctxt -> src . val ) ; <NEW_LINE>
lz . avail_in , at , errbuff ) ; <NEW_LINE>
unsigned match ; <NEW_LINE>
<TAB> <TAB> sc = create_spnego_ctx ( 0 ) ; <NEW_LINE>
<TAB> params -> buffer . fragments > INT_MAX / params -> buffer . fragment_size ) <NEW_LINE>
<TAB> if ( serial -> num_bulk_out < 2 ) { <NEW_LINE><TAB> <TAB> dev_err ( & serial -> interface -> dev , "missing bulk out endpoints\n" ) ; <NEW_LINE><TAB> <TAB> return - ENODEV ; <NEW_LINE><TAB> } <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> <NEW_LINE><TAB> <TAB> <TAB> <TAB> if ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls > <NEW_LINE><TAB> <TAB> <TAB> <TAB> JAS_UINTFAST32_NUMBITS - 2 || <NEW_LINE><TAB> <TAB> <TAB> <TAB> pirlvl -> prcheightexpn + pi -> picomp -> numrlvls > <NEW_LINE><TAB> <TAB> <TAB> <TAB> JAS_UINTFAST32_NUMBITS - 2 ) { <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> return - 1 ; <NEW_LINE><TAB> <TAB> <TAB> <TAB> } <NEW_LINE><TAB> <TAB> <TAB> <TAB> xstep = picomp -> hsamp * ( JAS_CAST ( uint_fast32_t , 1 ) << <NEW_LINE><TAB> <TAB> <TAB> <TAB> ( pirlvl -> prcwidthexpn + picomp -> numrlvls - rlvlno - 1 ) ) ; <NEW_LINE><TAB> <TAB> <TAB> <TAB> ystep = picomp -> vsamp * ( JAS_CAST ( uint_fast32_t , 1 ) << <NEW_LINE><TAB> <TAB> <TAB> <TAB> ( pirlvl -> prcheightexpn + picomp -> numrlvls - rlvlno - 1 ) ) ; <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> <TAB> goto error ; <NEW_LINE>
<TAB> mpz_powm_sec ( v1 , key -> g , u1 , key -> p ) ; <NEW_LINE><TAB> mpz_powm_sec ( v2 , key -> y , u2 , key -> p ) ; <NEW_LINE>
<TAB> rcu_read_lock ( ) ; <NEW_LINE><TAB> final_p = fl6_update_dst ( fl6 , rcu_dereference ( np -> opt ) , & final ) ; <NEW_LINE><TAB> rcu_read_unlock ( ) ; <NEW_LINE>
js : : ObjectSet cycleDetectorSet ; <NEW_LINE>
<NEW_LINE>
<TAB> hlist_del_init ( & pin -> m_list ) ; <NEW_LINE><TAB> hlist_del_init ( & pin -> s_list ) ; <NEW_LINE>
static void ptrace_hbptriggered ( struct perf_event * bp , <NEW_LINE>
ldblk + 1 , sizeof ( * BImgBuff ) ) ; <NEW_LINE>
<TAB> <TAB> goto out_err ; <NEW_LINE>
<TAB> <TAB> else if ( i > pos + delta && i + insn -> off + 1 <= pos + delta ) <NEW_LINE>
<TAB> number = image . ncolors ; <NEW_LINE><TAB> for ( i = 0 ; i < number ; i + + ) { <NEW_LINE><TAB> <TAB> if ( ! image . colorTable [ i ] . c_color ) { <NEW_LINE><TAB> <TAB> <TAB> goto done ; <NEW_LINE><TAB> <TAB> } <NEW_LINE><TAB> } <NEW_LINE>
loff_t ftrace_filter_lseek ( struct file * file , loff_t offset , int whence ) ; <NEW_LINE>
<TAB> if ( inode -> i_crypt_info ) <NEW_LINE><TAB> <TAB> return 0 ; <NEW_LINE><NEW_LINE>
if ( ! fmtint ( sbuffer , buffer , & currlen , maxlen , value , 10 , min , <NEW_LINE>max , flags ) ) <NEW_LINE>return 0 ; <NEW_LINE>
<TAB> <TAB> err = compat_put_timespec ( & kts , up ) ; <NEW_LINE>
* <TAB> NET_RX_DROP ( packet was dropped , but freed ) <NEW_LINE>
imap_quote_string ( dest , dlen , buf , false ) ; <NEW_LINE>
<TAB> r = __copy_from_user ( data , ( void __user * ) addr + offset , len ) ; <NEW_LINE>
void SetScrollbarEnabled ( nsIContent * aContent , nscoord aMaxPos ) ; <NEW_LINE>
ippSetValueTag ( job -> attrs , & attr , IPP_TAG_KEYWORD ) ; <NEW_LINE>ippSetString ( job -> attrs , & attr , 0 , "no - hold" ) ; <NEW_LINE>
% SetImageProperty ( ) . <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "sha1" ) ;
size_t input_forwards_size , <NEW_LINE>size_t input_backwards_size , <NEW_LINE>
for ( i = 0 ; i <= w - ( int ) sizeof ( long ) ; i += sizeof ( long ) ) { <NEW_LINE>
nsresult SetUpDocument ( DocumentFlavor aFlavor , <NEW_LINE>const char * aCharset , <NEW_LINE>const char * aContentType , <NEW_LINE>nsIDOMDocument ** aResult , <NEW_LINE>nsIChannel ** aChannel , <NEW_LINE>nsIStreamListener ** aListener ) ; <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "sha384" ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "sha512" ) ;
snprintf ( buf , sizeof ( buf ) , " % s - % d" , filename , dec_ctx -> frame_number ) ; <NEW_LINE>
<TAB> <TAB> " . section . fixup , \"ax\"\n" <TAB> <TAB> <TAB> <TAB> \ <NEW_LINE>"3 : xor"itype" % "rtype"0 , % "rtype"0\n" <TAB> <TAB> \ <NEW_LINE><TAB> <TAB> " jmp 2b\n" <TAB> <TAB> <TAB> <TAB> <TAB> \ <NEW_LINE><TAB> <TAB> " . previous\n" <TAB> <TAB> <TAB> <TAB> <TAB> \ <NEW_LINE><TAB> <TAB> _ASM_EXTABLE_EX ( 1b , 3b ) <TAB> <TAB> <TAB> <TAB> \ <NEW_LINE>
<TAB> <TAB> <TAB> memset ( & cu -> dies [ cu -> length ] . attr_values [ i ] , 0 , sizeof ( cu -> dies [ cu -> length ] . attr_values [ i ] ) ) ; <NEW_LINE>
<TAB> tilemap_size = x_size * y_size * sizeof ( struct map_tile ) ; <NEW_LINE><TAB> if ( x_size == 0 || tilemap_size / x_size / sizeof ( struct map_tile ) != y_size <NEW_LINE><TAB> <TAB> || ! ( tilemap = malloc ( tilemap_size ) ) ) <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> if ( conn_opt -> val != NULL && conn_opt -> val [ 0 ] != '\0' && <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> strcmp ( conn_opt -> keyword , "dbname" ) != 0 ) <NEW_LINE>
"Range : bytes = % "PRIu64" - " , s -> off ) ; <NEW_LINE>
XPCWrappedNativeJSClass * clasp = <NEW_LINE> ( XPCWrappedNativeJSClass * ) js : : GetObjectClass ( cur ) ; <NEW_LINE>
for ( plane = 0 ; plane < 4 && in -> data [ plane ] && in -> linesize [ plane ] ; plane + + ) { <NEW_LINE>
ThrowBinaryException ( ResourceLimitError , "InvalidLength" , image -> filename ) ; <NEW_LINE>
PRPackedBool mInDtor ; <NEW_LINE>
<TAB> <TAB> char * arch = strdup ( info -> arch ) ; <NEW_LINE><TAB> <TAB> char * cpu = info -> cpu ? strdup ( info -> cpu ) : NULL ; <NEW_LINE>
<NEW_LINE>
