<TAB> <TAB> <TAB> <TAB> if ( ! retval ) <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> retval = context -> put_listent ( context , <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> <TAB> <TAB> entry -> flags , <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> <TAB> <TAB> name_rmt -> name , <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> <TAB> <TAB> ( int ) name_rmt -> namelen , <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> <TAB> <TAB> valuelen , <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> <TAB> <TAB> args . value ) ; <NEW_LINE>
<TAB> <TAB> if ( len > 0 ) { <NEW_LINE><TAB> <TAB> <TAB> <NEW_LINE><TAB> <TAB> <TAB> ptr = realloc ( priv -> EF_C_DevAut , len ) ; <NEW_LINE><TAB> <TAB> <TAB> if ( ptr ) { <NEW_LINE><TAB> <TAB> <TAB> <TAB> memcpy ( ptr , efbin , len ) ; <NEW_LINE><TAB> <TAB> <TAB> <TAB> priv -> EF_C_DevAut = ptr ; <NEW_LINE><TAB> <TAB> <TAB> <TAB> priv -> EF_C_DevAut_len = len ; <NEW_LINE><TAB> <TAB> <TAB> } <NEW_LINE>
extern void show_object_with_name ( FILE * , struct object * , const char * ) ; <NEW_LINE>
<NEW_LINE><NEW_LINE>
nsresult WriteToDecoder ( const char * aBuffer , uint32_t aCount , DecodeStrategy aStrategy ) ; <NEW_LINE>nsresult DecodeSomeData ( uint32_t aMaxBytes , DecodeStrategy aStrategy ) ; <NEW_LINE>
virtual void WriteInternal ( const char * aBuffer , uint32_t aCount , DecodeStrategy aStrategy ) ; <NEW_LINE>
<TAB> nfs4_close_state ( & opendata -> path , newstate , fmode ) ; <NEW_LINE>
<TAB> <NEW_LINE><TAB> if ( unlikely ( IPCB ( skb ) -> opt . optlen ) ) <NEW_LINE><TAB> <TAB> skb_dst_force ( skb ) ; <NEW_LINE><TAB> else <NEW_LINE><TAB> <TAB> skb_dst_drop ( skb ) ; <NEW_LINE>
<NEW_LINE>
ippSetGroupTag ( job -> attrs , & attr , IPP_TAG_JOB ) ; <NEW_LINE>ippSetName ( job -> attrs , & attr , "job - originating - user - name" ) ; <NEW_LINE>
bool sctp_verify_asconf ( const struct sctp_association * asoc , <NEW_LINE><TAB> <TAB> <TAB> struct sctp_chunk * chunk , bool addr_param_needed , <NEW_LINE><TAB> <TAB> <TAB> struct sctp_paramhdr ** errp ) ; <NEW_LINE>
<TAB> struct channel_info * info ; <NEW_LINE><NEW_LINE><TAB> if ( voice < 0 || voice >= devc -> nr_voice ) <NEW_LINE><TAB> <TAB> return ; <NEW_LINE><NEW_LINE><TAB> if ( chn < 0 || chn > 15 ) <NEW_LINE><TAB> <TAB> return ; <NEW_LINE><NEW_LINE><TAB> info = & synth_devs [ dev ] -> chn_info [ chn ] ; <NEW_LINE>
void DecodeABitOf ( RasterImage * aImg , DecodeStrategy aStrategy ) ;
<TAB> mm -> mmap_legacy_base = TASK_UNMAPPED_BASE + random_factor ; <NEW_LINE>
<TAB> const struct nfsd4_layout_ops * ops ; <NEW_LINE>
if ( mode != MODE_INVALID ) { <NEW_LINE>
MOZ_ASSERT ( bracketPart . IsEmpty ( ) , "SplitLastSquareBracket must be called with empty bracketPart string" ) ; <NEW_LINE><NEW_LINE>if ( string . IsEmpty ( ) ) <NEW_LINE>return false ; <NEW_LINE><NEW_LINE>
int udf_get_filename ( struct super_block * sb , uint8_t * sname , int slen , <NEW_LINE><TAB> <TAB> uint8_t * dname , int dlen ) <NEW_LINE>
int class = getClientTypeByName ( v [ j ] ) ; <NEW_LINE>if ( class == - 1 || class == CLIENT_TYPE_MASTER ) { <NEW_LINE>
<TAB> if ( bb -> next ) { <NEW_LINE><TAB> <TAB> <NEW_LINE><TAB> <TAB> bb -> next -> prev = NULL ; <NEW_LINE><TAB> } <NEW_LINE><TAB> R_FREE ( bb ) ; <NEW_LINE>
<TAB> if ( sbi -> s_mb_cache ) { <NEW_LINE><TAB> <TAB> ext2_xattr_destroy_cache ( sbi -> s_mb_cache ) ; <NEW_LINE><TAB> <TAB> sbi -> s_mb_cache = NULL ; <NEW_LINE><TAB> } <NEW_LINE>
<TAB> if ( uep -> ue_size < LONG_MAX / ( int ) sizeof ( char_u * ) ) <NEW_LINE><TAB> array = ( char_u ** ) U_ALLOC_LINE ( sizeof ( char_u * ) * uep -> ue_size ) ; <NEW_LINE>
for ( a = pool -> current ; nb > a -> limit || a -> avail > a -> limit - nb ; <NEW_LINE>pool -> current = a ) { <NEW_LINE>
<NEW_LINE>
<TAB> <NEW_LINE>
if ( track -> timescale > UINT16_MAX || ! track -> par -> channels ) { <NEW_LINE>
virtual nsresult InstallMember ( JSContext * aCx , <NEW_LINE>JSObject * aTargetClassObject ) = 0 ; <NEW_LINE>
length = ( gint ) tvb_ensure_length_remaining ( tvb , offset ) ; <NEW_LINE>
<TAB> <TAB> conn -> m -> local_tx_end ( conn , this_func , ret TSRMLS_CC ) ; <NEW_LINE>
while ( isdigit ( ( unsigned char ) * s ) && ( ptmp != ( tmp + sizeof ( tmp ) - 1 ) ) ) <NEW_LINE>
<TAB> <TAB> ops -> destroy ( dev ) ; <NEW_LINE>
<TAB> if ( unlikely ( get_dumpable ( current -> mm ) != SUID_DUMP_USER ) ) { <TAB> \ <NEW_LINE>
success = data_eq_string ( * realm , handle -> params . realm ) && <NEW_LINE><TAB> data_eq_string ( * c1 , "kadmin" ) && ! data_eq_string ( * c2 , "history" ) ; <NEW_LINE>
<TAB> <TAB> if ( key -> state != KEY_IS_UNINSTANTIATED ) { <NEW_LINE>
<TAB> ast_variables_destroy ( headers ) ; <NEW_LINE>
<TAB> <TAB> opt = rcu_dereference_protected ( np -> opt , sock_owned_by_user ( sk ) ) ; <NEW_LINE><TAB> <TAB> opt = ipv6_renew_options ( sk , opt , optname , <NEW_LINE>
out_drop_lock : <NEW_LINE><TAB> fh_unlock ( fh ) ; <NEW_LINE>
<TAB> else { <NEW_LINE><TAB> <TAB> dst = skb_dst ( skb ) ; <NEW_LINE><TAB> <TAB> iif = l3mdev_master_ifindex ( dst ? dst -> dev : skb -> dev ) ; <NEW_LINE><TAB> } <NEW_LINE>
gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; <NEW_LINE>gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER ; <NEW_LINE>
<TAB> <TAB> if ( regset -> core_note_type && regset -> get && <NEW_LINE>
<TAB> <TAB> if ( be32_to_cpu ( btree [ blk -> index ] . hashval ) == lasthash ) <NEW_LINE>
mozilla : : Mutex mThreadPoolMutex ; <NEW_LINE>nsCOMPtr < nsIThreadPool > mThreadPool ; <NEW_LINE>
obj = NULL ; <NEW_LINE>
<TAB> <TAB> memset ( ptr , 0 , size ) ; <NEW_LINE>
FILE_RCSID ( "@ ( # ) $ File : readelf . c , v 1 . 143 2018 / 06 / 09 16 : 00 : 06 christos Exp $ " ) <NEW_LINE>
{ <NEW_LINE>clone_image = DestroyImage ( clone_image ) ; <NEW_LINE>ThrowImageException ( ResourceLimitError , "MemoryAllocationFailed" ) ; <NEW_LINE> } <NEW_LINE>
void unix_inflight ( struct user_struct * user , struct file * fp ) ; <NEW_LINE>void unix_notinflight ( struct user_struct * user , struct file * fp ) ; <NEW_LINE>
int nbase = sscanf ( lbase , " % 511 [ ^ \r\n ] " , strbase ) ; <NEW_LINE>int ntest = sscanf ( ltest , " % 511 [ ^ \r\n ] " , strtest ) ; <NEW_LINE>assert ( nbase != 511 && ntest != 511 ) ; <NEW_LINE>
<NEW_LINE>
<TAB> int n ; <NEW_LINE>
<TAB> perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS , 1 , regs , address ) ; <NEW_LINE>
<TAB> . splice_write <TAB> = iter_file_splice_write , <NEW_LINE>
LANG_ID_MICROSOFT_EN_US = 0x0409 , <NEW_LINE><NEW_LINE>CMAP_MAX_CODEPOINT = 0x10ffff <NEW_LINE><NEW_LINE>
<TAB> rc = usb_submit_urb ( urb , GFP_ATOMIC ) ; <NEW_LINE><TAB> if ( rc < 0 ) { <NEW_LINE><TAB> <TAB> usb_free_urb ( urb ) ; <NEW_LINE><TAB> <TAB> kfree_skb ( skb ) ; <NEW_LINE><TAB> } <NEW_LINE>
float * valuelist ; <NEW_LINE>
<TAB> <TAB> <TAB> print_bpf_insn ( env , insn ) ; <NEW_LINE>
<TAB> if ( ip_options_echo ( & icmp_param . replyopts . opt . opt , skb_in ) ) <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> zend_throw_exception_ex ( phar_ce_PharException , 0 TSRMLS_CC , " % s" , error ) ; <NEW_LINE>
<TAB> <TAB> <TAB> err = posix_acl_update_mode ( inode , & inode -> i_mode , & acl ) ; <NEW_LINE><TAB> <TAB> <TAB> if ( err ) <NEW_LINE>
<TAB> <TAB> <TAB> opt = xchg ( ( __force struct ipv6_txoptions ** ) & np -> opt , <NEW_LINE><TAB> <TAB> <TAB> <TAB> NULL ) ; <NEW_LINE><TAB> <TAB> <TAB> if ( opt ) { <NEW_LINE><TAB> <TAB> <TAB> <TAB> atomic_sub ( opt -> tot_len , & sk -> sk_omem_alloc ) ; <NEW_LINE><TAB> <TAB> <TAB> <TAB> txopt_put ( opt ) ; <NEW_LINE><TAB> <TAB> <TAB> } <NEW_LINE>
int pixel_ptr = - 4 ; <NEW_LINE>
<NEW_LINE>
static bool __f2fs_init_extent_tree ( struct inode * inode , struct f2fs_extent * i_ext ) <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> <TAB> if ( flags & ARCHIVE_EXTRACT_SECURE_NODOTDOT ) { <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> <TAB> if ( error_number ) * error_number = ARCHIVE_ERRNO_MISC ; <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> <TAB> if ( error_string ) <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> <TAB> archive_string_sprintf ( error_string , <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> <TAB> <TAB> "Path contains ' . . '" ) ; <NEW_LINE>
<TAB> size_t ss = CDF_SHORT_SEC_SIZE ( h ) , i , j ; <NEW_LINE>
gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; <NEW_LINE>gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER ; <NEW_LINE>
<TAB> if ( plen ) { <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "rfc3686" ) ;
if ( IsTextureSizeSafeToPassToDriver ( target , width , height ) ) { <NEW_LINE>mSymbols . fCopyTexImage2D ( target , level , internalformat , <NEW_LINE>x , FixYValue ( y , height ) , <NEW_LINE>width , height , border ) ; <NEW_LINE><NEW_LINE> } else { <NEW_LINE><NEW_LINE><NEW_LINE>mSymbols . fCopyTexImage2D ( target , - 1 , internalformat , <NEW_LINE>x , FixYValue ( y , height ) , <NEW_LINE> - 1 , - 1 , - 1 ) ; <NEW_LINE><NEW_LINE> } <NEW_LINE>
static void xen_netbk_idx_release ( struct xen_netbk * netbk , u16 pending_idx , <NEW_LINE><TAB> <TAB> <TAB> <TAB> u8 status ) ; <NEW_LINE>
h -> ref_count [ 1 ] = 1 ; <NEW_LINE>
<TAB> error = curl_multi_add_handle ( mh -> multi , ch -> cp ) ; <NEW_LINE><TAB> SAVE_CURLM_ERROR ( mh , error ) ; <NEW_LINE><NEW_LINE><TAB> RETURN_LONG ( ( zend_long ) error ) ; <NEW_LINE>
<TAB> if ( dir_len > PATH_MAX ) <NEW_LINE><TAB> { <NEW_LINE><TAB> <TAB> uwsgi_log ( "invalid path size : % d ( max % d ) \n" , dir_len , PATH_MAX ) ; <NEW_LINE><TAB> <TAB> return NULL ; <NEW_LINE><TAB> } <NEW_LINE><TAB> char * src = uwsgi_concat2n ( dir , dir_len , "" , 0 ) ; <NEW_LINE>
<TAB> . splice_write <TAB> = iter_file_splice_write , <NEW_LINE>
<TAB> return segmented_write_std ( ctxt , ctxt -> memop . addr . mem , & fx_state , size ) ; <NEW_LINE>
<TAB> <TAB> bh -> b_size = ( u64 ) map . m_len << inode -> i_blkbits ; <NEW_LINE>
<NEW_LINE>filename [ filename_size ] = '\0' ;
reslevel -> band = av_calloc ( reslevel -> nbands , sizeof ( * reslevel -> band ) ) ; <NEW_LINE>
<NEW_LINE>
static int CVE_2014_5471_isofs_read_inode ( struct inode * inode , int relocated ) <NEW_LINE>
<TAB> if ( inet_opt ) <NEW_LINE><TAB> <TAB> inet_csk ( sk ) -> icsk_ext_hdr_len = inet_opt -> opt . optlen ; <NEW_LINE>
if ( p_sys -> i_buffer < tk -> i_frame_size <NEW_LINE> || tk -> i_sipr_subpacket_count >= tk -> i_subpacket_h ) <NEW_LINE>
<TAB> status = register_pernet_subsys ( & sctp_defaults_ops ) ; <NEW_LINE><TAB> if ( status ) <NEW_LINE><TAB> <TAB> goto err_register_defaults ; <NEW_LINE><TAB> status = sctp_v4_protosw_init ( ) ; <NEW_LINE>
<TAB> { <NEW_LINE><TAB> <TAB> initPQExpBuffer ( & connstr ) ; <NEW_LINE><TAB> <TAB> appendPQExpBuffer ( & connstr , "dbname = " ) ; <NEW_LINE><TAB> <TAB> appendConnStrVal ( & connstr , PQdb ( o_conn ) ) ; <NEW_LINE><TAB> <TAB> dbname = connstr . data ; <NEW_LINE><TAB> <TAB> <NEW_LINE><TAB> } <NEW_LINE><TAB> else <NEW_LINE><TAB> <TAB> connstr . data = NULL ;
<TAB> <TAB> <TAB> goto out_bad ;
<TAB> while ( leftover && mc_saved_count < ARRAY_SIZE ( mc_saved_tmp ) ) { <NEW_LINE>
<TAB> ret = key_read_state ( key ) ; <NEW_LINE><TAB> if ( ret < 0 ) <NEW_LINE><TAB> <TAB> return ret ; <NEW_LINE>
fptr_orig = io_get_open_fptr ( mrb , orig ) ; <NEW_LINE>
<TAB> rc = expandRegular ( fi , dest , psm , 1 , nodigest , 1 ) ; <NEW_LINE>
<TAB> int <TAB> <TAB> <TAB> valuelen ; <NEW_LINE>
FILE_RCSID ( "@ ( # ) $ File : cdf . c , v 1 . 46 2011 / 09 / 16 21 : 23 : 59 christos Exp $ " ) <NEW_LINE>
<NEW_LINE>
<TAB> guint <TAB> <TAB> tpiLen ; <NEW_LINE>
<TAB> <TAB> <TAB> data -> o_arg . fmode ) ; <NEW_LINE>
<TAB> <TAB> if ( fifo -> skbuff -> len > 3 && <NEW_LINE><TAB> <TAB> <TAB> <TAB> ! fifo -> skbuff -> data [ fifo -> skbuff -> len - 1 ] ) { <NEW_LINE>
<TAB> kvm_read_guest_cached ( vcpu -> kvm , & vcpu -> arch . apic -> vapic_cache , & data , <NEW_LINE><TAB> <TAB> <TAB> <TAB> sizeof ( u32 ) ) ; <NEW_LINE>
<TAB> <TAB> fpm_worker_pool_free ( wp ) ; <NEW_LINE>
<TAB> <TAB> <TAB> goto out_bad ; <NEW_LINE>
<TAB> <TAB> if ( ! sb || ( EXT4_SB ( sb ) -> s_journal && <NEW_LINE><TAB> <TAB> <TAB> EXT4_SB ( sb ) -> s_journal -> j_flags & JBD2_ABORT ) ) <NEW_LINE>
if ( PR_UINT32_MAX - sz < sizeof * a + pool -> mask ) { <NEW_LINE>a = NULL ; <NEW_LINE> } else { <NEW_LINE>sz += sizeof * a + pool -> mask ; <NEW_LINE>a = ( PLArena * ) PR_MALLOC ( sz ) ; <NEW_LINE> } <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> snprintf ( op -> buf_asm , sizeof ( op -> buf_asm ) , "sparse - switch - payload % d" , array_size ) ; <NEW_LINE>
static bool subsumes ( JSCompartment * a , JSCompartment * b ) ; <NEW_LINE>
<TAB> jrpriv = devm_kmalloc ( jrdev , sizeof ( struct caam_drv_private_jr ) , <NEW_LINE><TAB> <TAB> <TAB> GFP_KERNEL ) ; <NEW_LINE>
<TAB> pthread_mutex_destroy ( & bio -> bio_mutex ) ; <NEW_LINE>
<TAB> if ( ex && ! ( flag & EXT4_GET_BLOCKS_PRE_IO ) <NEW_LINE>
snprintf_func ( ecmd , TESTBUFSIZE , " % s % s - f % s % s % s % s % s % s % s" , <NEW_LINE>
} else if ( ! av_strcasecmp ( tag , "Content - Length" ) && <NEW_LINE>s -> filesize == UINT64_MAX ) { <NEW_LINE>s -> filesize = strtoull ( p , NULL , 10 ) ; <NEW_LINE>
<TAB> <TAB> if ( sin ) { <NEW_LINE><TAB> <TAB> <TAB> sin -> sin_family = AF_INET ; <NEW_LINE><TAB> <TAB> <TAB> sin -> sin_port = 0 ; <NEW_LINE><TAB> <TAB> <TAB> sin -> sin_addr . s_addr = ip_hdr ( skb ) -> saddr ; <NEW_LINE><TAB> <TAB> <TAB> memset ( sin -> sin_zero , 0 , sizeof ( sin -> sin_zero ) ) ; <NEW_LINE><TAB> <TAB> <TAB> * addr_len = sizeof ( * sin ) ; <NEW_LINE><TAB> <TAB> } <NEW_LINE>
for ( i = 0 ; ret [ i ] != NULL ; i + + ) <NEW_LINE>free ( ret [ i ] ) ; <NEW_LINE>
static int follow_dotdot ( struct nameidata * nd ) <NEW_LINE>
declen = mutt_b64_decode ( out2 , out1 , sizeof ( out2 ) ) ; <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> <TAB> <TAB> fragheaderlen , skb , rt , <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> <TAB> np -> pmtudisc == <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> <TAB> IPV6_PMTUDISC_PROBE ) ; <NEW_LINE>
<TAB> strncpy ( ualg -> cru_name , alg -> cra_name , sizeof ( ualg -> cru_name ) ) ; <NEW_LINE><TAB> strncpy ( ualg -> cru_driver_name , alg -> cra_driver_name , <NEW_LINE><TAB> <TAB> sizeof ( ualg -> cru_driver_name ) ) ; <NEW_LINE><TAB> strncpy ( ualg -> cru_module_name , module_name ( alg -> cra_module ) , <NEW_LINE><TAB> <TAB> sizeof ( ualg -> cru_module_name ) ) ; <NEW_LINE><TAB> ualg -> cru_type = 0 ; <NEW_LINE><TAB> ualg -> cru_mask = 0 ; <NEW_LINE>
<NEW_LINE>if ( newPtr != nullptr && newPtr == oldPtr ) { <NEW_LINE>NS_RUNTIMEABORT ( "Logic flaw in the caller" ) ; <NEW_LINE> } <NEW_LINE><NEW_LINE>
<NEW_LINE>remaining_time = time ( NULL ) - start_time ; <NEW_LINE>
if ( ! opj_j2k_write_sot ( p_j2k , p_data , <NEW_LINE>p_total_data_size , <NEW_LINE> & l_current_nb_bytes_written , p_stream , <NEW_LINE>
LOG_WARN ( ( "The updaters do not match , updater will not run . " ) ) ; <NEW_LINE>
decoded_buffer_size = 2LL * FFALIGN ( blockstodecode , 8 ) * sizeof ( * s -> decoded_buffer ) ; <NEW_LINE>av_assert0 ( decoded_buffer_size <= INT_MAX ) ; <NEW_LINE>av_fast_malloc ( & s -> decoded_buffer , & s -> decoded_size , decoded_buffer_size ) ; <NEW_LINE>
<TAB> if ( kvm_set_msr ( & svm -> vcpu , & msr ) ) { <NEW_LINE>
#include < linux / mbcache2 . h > <NEW_LINE>
Mutex mLock ; <NEW_LINE>
<TAB> if ( hdrincl ) <NEW_LINE>
<TAB> <TAB> * dptr + + = ROSE_CALL_REQ_ADDR_LEN_VAL ; <NEW_LINE>
mOffscreenStencilRB ( 0 ) , <NEW_LINE>mMaxTextureSize ( 0 ) , <NEW_LINE>mMaxCubeMapTextureSize ( 0 ) , <NEW_LINE>mMaxTextureImageSize ( 0 ) , <NEW_LINE>mMaxRenderbufferSize ( 0 ) <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> _TIF_SYSCALL_AUDIT | \ <NEW_LINE><TAB> <TAB> <TAB> <TAB> _TIF_SYSCALL_TRACEPOINT | _TIF_SECCOMP ) <NEW_LINE>
<TAB> <TAB> conn -> m -> local_tx_end ( conn , this_func , ret TSRMLS_CC ) ; <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "crc32c" ) ; <NEW_LINE>
<TAB> kern_unmount ( ns -> proc_mnt ) ; <NEW_LINE>
<TAB> <TAB> <TAB> new -> cid_mask = ( 1 << KVM_X2APIC_CID_BITS ) - 1 ; <NEW_LINE><TAB> <TAB> <TAB> new -> lid_mask = 0xffff ; <NEW_LINE>
<NEW_LINE>
mObj = UnwrapArray ( obj ) ; <NEW_LINE> } <NEW_LINE><NEW_LINE>inline void ComputeData ( ) const { <NEW_LINE>MOZ_ASSERT ( inited ( ) ) ; <NEW_LINE>if ( ! mComputed ) { <NEW_LINE>GetLengthAndData ( mObj , & mLength , & mData ) ; <NEW_LINE>mComputed = true ; <NEW_LINE> } <NEW_LINE>
<TAB> put_io_context ( ioc ) ; <NEW_LINE>
if ( appl_version != NULL && ! problem ) { <NEW_LINE>d = make_data ( appl_version , strlen ( appl_version ) + 1 ) ; <NEW_LINE>if ( ! data_eq ( inbuf , d ) ) { <NEW_LINE>
<TAB> <TAB> } else <NEW_LINE><TAB> <TAB> <TAB> memset ( kdata , 0 , _IOC_SIZE ( cmd ) ) ; <NEW_LINE><NEW_LINE>
<TAB> <TAB> if ( ! tid -> sched ) { <NEW_LINE><TAB> <TAB> <TAB> ath_txq_unlock ( sc , txq ) ; <NEW_LINE><TAB> <TAB> <TAB> continue ; <NEW_LINE><TAB> <TAB> } <NEW_LINE><NEW_LINE>
<TAB> key_read_state ( key ) == KEY_IS_UNINSTANTIATED ) <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "aes" ) ; <NEW_LINE>
<TAB> <TAB> <TAB> xen_netbk_idx_release ( netbk , pending_idx , XEN_NETIF_RSP_OKAY ) ; <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "sha256" ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "sha224" ) ;
<TAB> <TAB> rcu_read_lock ( ) ; <NEW_LINE><TAB> <TAB> final_p = fl6_update_dst ( & fl6 , rcu_dereference ( np -> opt ) , <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> & final ) ; <NEW_LINE><TAB> <TAB> rcu_read_unlock ( ) ; <NEW_LINE>
<NEW_LINE>
<TAB> <TAB> <TAB> <TAB> compute_curve_gamma_table_type1 ( gamma_table , TRC -> data [ 0 ] ) ; <NEW_LINE>
JSAutoByteString params ; <NEW_LINE>
last mod : $ Id $ <NEW_LINE>
atable -> arev = newrev ; <NEW_LINE>
last mod : $ Id $ <NEW_LINE>
d = make_data ( ( char * ) sendauth_version , strlen ( sendauth_version ) + 1 ) ; <NEW_LINE>if ( ! data_eq ( inbuf , d ) ) { <NEW_LINE>
if ( * value == 0 || value [ strlen ( value ) - 1 ] == ' , ' ) { <NEW_LINE>
<TAB> skb -> mac . raw = skb -> nh . raw = skb -> data ; <NEW_LINE><NEW_LINE><TAB> <NEW_LINE><TAB> skb -> nh . iph -> protocol = IPPROTO_ICMP ; <NEW_LINE>
<TAB> <TAB> __skb_complete_tx_timestamp ( skb , sk , SCM_TSTAMP_SND , false ) ; <NEW_LINE>
mSerial = issueSerial ( ) ; <NEW_LINE><NEW_LINE>
class FloatInfo { <NEW_LINE>public : <NEW_LINE>FloatInfo ( const nsIFrame * aFrame , nscoord aWidth ) <NEW_LINE> : mFrame ( aFrame ) , mWidth ( aWidth ) <NEW_LINE> { } <NEW_LINE>const nsIFrame * Frame ( ) const { return mFrame ; } <NEW_LINE>nscoord Width ( ) const { return mWidth ; } <NEW_LINE><NEW_LINE>private : <NEW_LINE>const nsIFrame * mFrame ; <NEW_LINE>nscoord mWidth ; <NEW_LINE> } ; <NEW_LINE><NEW_LINE>nsTArray < FloatInfo > floats ; <NEW_LINE>
<TAB> <TAB> memset ( sax , 0 , sizeof ( * sax ) ) ; <NEW_LINE>
WebGLenum mWebGLError ; <NEW_LINE>
if ( mAttachedShaders [ i ] && mAttachedShaders [ i ] -> ShaderType ( ) == shaderType ) { <NEW_LINE>
for ( x = 0 ; x < ( ssize_t ) number_pixels ; x += 4 ) <NEW_LINE>
uint64_t chunksize ; <NEW_LINE>uint64_t off , end_off , filesize ; <NEW_LINE>
<NEW_LINE><TAB> if ( ndp_msg_type_info ( msg_type ) -> addrto_validate ) <NEW_LINE><TAB> <TAB> return ndp_msg_type_info ( msg_type ) -> addrto_validate ( & msg -> addrto ) ; <NEW_LINE><TAB> else <NEW_LINE><TAB> <TAB> return true ; <NEW_LINE>
nsWeakPtr mContent ; <NEW_LINE>
#include "mozilla / Mutex . h" <NEW_LINE>#include "mozilla / ReentrantMonitor . h" <NEW_LINE>
# define rint ( x ) ( floor ( ( x ) + 0 . 5f ) ) <NEW_LINE>
int x , y ; <NEW_LINE>
FILE_RCSID ( "@ ( # ) $ File : cdf . c , v 1 . 59 2014 / 05 / 14 23 : 22 : 48 christos Exp $ " ) <NEW_LINE>
<TAB> <TAB> . daddr = ( param -> replyopts . opt . opt . srr ? <NEW_LINE><TAB> <TAB> <TAB> param -> replyopts . opt . opt . faddr : iph -> saddr ) , <NEW_LINE>
size_t input_forwards_size , <NEW_LINE>size_t input_backwards_size , <NEW_LINE>
|beginSl <NEW_LINE>|beginW <NEW_LINE>
<TAB> if ( icmp_param -> replyopts . opt . opt . optlen ) { <NEW_LINE><TAB> <TAB> ipc . opt = & icmp_param -> replyopts . opt ; <NEW_LINE><TAB> <TAB> if ( ipc . opt -> opt . srr ) <NEW_LINE><TAB> <TAB> <TAB> daddr = icmp_param -> replyopts . opt . opt . faddr ; <NEW_LINE>
if ( f == NULL <NEW_LINE> || f -> addressFamily == NULL <NEW_LINE> || f -> addressFamily -> data == NULL <NEW_LINE> || f -> addressFamily -> length < 2 ) <NEW_LINE>return 0 ; <NEW_LINE>return ( f -> addressFamily -> data [ 0 ] << 8 ) | f -> addressFamily -> data [ 1 ] ; <NEW_LINE>
void * const sys_call_table [ __NR_syscalls ] __aligned ( 4096 ) = { <NEW_LINE>
xcfdata = ( XCFPixelInfo * ) AcquireQuantumMemory ( MagickMax ( data_length , <NEW_LINE>tile_image -> columns * tile_image -> rows ) , sizeof ( * xcfdata ) ) ; <NEW_LINE>
( * respond ) ( arg , EINVAL , NULL , NULL , NULL ) ; <NEW_LINE>
<TAB> <TAB> <TAB> u16 offs , total_size ; <NEW_LINE><TAB> <TAB> <TAB> u8 data_len ; <NEW_LINE><NEW_LINE><TAB> <TAB> <TAB> if ( elt -> length < sizeof ( struct oz_get_desc_rsp ) - 1 ) <NEW_LINE><TAB> <TAB> <TAB> <TAB> break ; <NEW_LINE><TAB> <TAB> <TAB> data_len = elt -> length - <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> ( sizeof ( struct oz_get_desc_rsp ) - 1 ) ; <NEW_LINE><TAB> <TAB> <TAB> offs = le16_to_cpu ( get_unaligned ( & body -> offset ) ) ; <NEW_LINE><TAB> <TAB> <TAB> total_size = <NEW_LINE>
<TAB> while ( -- n >= 0 && ND_TTEST ( * ps ) ) { <NEW_LINE>
int count = snprintf ( dest , destlen , " % s . hcache" , path ) ; <NEW_LINE><NEW_LINE>char * first = strchr ( dest , ' / ' ) ; <NEW_LINE>char * last = strrchr ( dest , ' / ' ) ; <NEW_LINE>if ( first && last && ( last > first ) ) <NEW_LINE> { <NEW_LINE>memmove ( first , last , strlen ( last ) + 1 ) ; <NEW_LINE>count -= ( last - first ) ; <NEW_LINE> } <NEW_LINE><NEW_LINE>return count ; <NEW_LINE>
uint64_t old_off = s -> off ; <NEW_LINE>
<TAB> if ( args -> buffer_count < 1 || <NEW_LINE><TAB> args -> buffer_count > UINT_MAX / sizeof ( * exec2_list ) ) { <NEW_LINE>
<NEW_LINE><NEW_LINE>
<TAB> guint32 off = offset , last_off ; <NEW_LINE>
<TAB> <TAB> zend_throw_error ( exception_ce , " % s" , message ) ; <NEW_LINE>
if ( ( sun_info . type != RT_ENCODED ) && <NEW_LINE> ( ( number_pixels * sun_info . depth ) > ( 8 * sun_info . length ) ) ) <NEW_LINE>
<TAB> <NEW_LINE><TAB> if ( nla_len ( rp ) < ulen || <NEW_LINE><TAB> xfrm_replay_state_esn_len ( replay_esn ) != ulen || <NEW_LINE><TAB> replay_esn -> bmp_len != up -> bmp_len ) <NEW_LINE>
for ( plane = 0 ; plane < 4 && frame -> data [ plane ] && frame -> linesize [ plane ] ; plane + + ) { <NEW_LINE>
FILE_RCSID ( "@ ( # ) $ File : softmagic . c , v 1 . 188 2014 / 05 / 14 23 : 15 : 42 christos Exp $ " ) <NEW_LINE>
<TAB> <TAB> <TAB> if ( skb == NULL || ! ( skb -> dev -> flags & IFF_LOOPBACK ) ) { <NEW_LINE>
ret |= _ve_amp ( ve , gi , pcm , ve -> band , ve -> filter + i * VE_BANDS ) ; <NEW_LINE>
static nsresult GetContextAndScope ( nsIDocument * aOldDocument , <NEW_LINE>nsIDocument * aNewDocument , <NEW_LINE>JSContext ** aCx , JSObject ** aNewScope ) ; <NEW_LINE>
<TAB> ifd = get_exif_ui32 ( & e , 4 ) ; <NEW_LINE>
if ( ( image_info -> ping != MagickFalse ) && ( image_info -> number_scenes != 0 ) ) <NEW_LINE>
band -> prec = av_calloc ( reslevel -> num_precincts_x * <NEW_LINE>
<TAB> if ( ( psf = psf_allocate ( ) ) == NULL ) <NEW_LINE>
if ( ( * p ) > end - len ) <NEW_LINE>
<NEW_LINE>
void AddRef ( ) { <NEW_LINE>if ( mRefCnt == PR_UINT32_MAX ) { <NEW_LINE>NS_WARNING ( "refcount overflow , leaking nsCSSValue : : URL" ) ; <NEW_LINE>return ; <NEW_LINE> } <NEW_LINE> + + mRefCnt ; <NEW_LINE> } <NEW_LINE>void Release ( ) { <NEW_LINE>if ( mRefCnt == PR_UINT32_MAX ) { <NEW_LINE>NS_WARNING ( "refcount overflow , leaking nsCSSValue : : URL" ) ; <NEW_LINE>return ; <NEW_LINE> } <NEW_LINE>if ( -- mRefCnt == 0 ) <NEW_LINE>delete this ; <NEW_LINE> } <NEW_LINE>
#define LIST_POISON1 ( ( void * ) 0x100 + POISON_POINTER_DELTA ) <NEW_LINE>#define LIST_POISON2 ( ( void * ) 0x200 + POISON_POINTER_DELTA )
<TAB> <TAB> exit_io_context ( tsk ) ; <NEW_LINE>
<TAB> <NEW_LINE><TAB> if ( rc != X86EMUL_CONTINUE ) <NEW_LINE><TAB> <TAB> return X86EMUL_UNHANDLEABLE ; <NEW_LINE><NEW_LINE>
<TAB> <TAB> <TAB> <TAB> u16 selector , int seg , u8 cpl , <NEW_LINE><TAB> <TAB> <TAB> <TAB> bool in_task_switch , <NEW_LINE><TAB> <TAB> <TAB> <TAB> struct desc_struct * desc ) <NEW_LINE>
<TAB> <TAB> <TAB> map = bpf_map_inc ( map , false ) ; <NEW_LINE><TAB> <TAB> <TAB> if ( IS_ERR ( map ) ) { <NEW_LINE><TAB> <TAB> <TAB> <TAB> fdput ( f ) ; <NEW_LINE><TAB> <TAB> <TAB> <TAB> return PTR_ERR ( map ) ; <NEW_LINE><TAB> <TAB> <TAB> } <NEW_LINE><TAB> <TAB> <TAB> env -> used_maps [ env -> used_map_cnt + + ] = map ; <NEW_LINE><NEW_LINE>
<TAB> rc = expandRegular ( fi , fn , psm , 0 , nodigest , 0 ) ; <NEW_LINE>
<TAB> . llseek = ftrace_filter_lseek , <NEW_LINE>
#define CEPH_MSGR_TAG_CHALLENGE_AUTHORIZER 16
FILE_RCSID ( "@ ( # ) $ File : cdf . c , v 1 . 61 2014 / 06 / 04 17 : 23 : 19 christos Exp $ " ) <NEW_LINE>
mozilla : : WeakPtr < nsOfflineCacheUpdateOwner > mOwner ; <NEW_LINE>
last mod : $ Id $ <NEW_LINE>
void neuter ( void * newData ) ; <NEW_LINE>
gss_release_buffer ( & minor_stat , & client_name ) ; <NEW_LINE>gss_release_buffer ( & minor_stat , & service_name ) ; <NEW_LINE>
<TAB> <NEW_LINE>
<TAB> ws_buffer_assure_space ( buf , pkt_len ) ; <NEW_LINE>
__android_log_print ( ANDROID_LOG_INFO , "Gecko" , " % s" , utf8str . get ( ) ) ; <NEW_LINE>
<TAB> <TAB> if ( pread ( fd , xph_addr , xph_sizeof , off ) < ( ssize_t ) xph_sizeof ) { <NEW_LINE>
<TAB> ( unsigned char * ) e + sizeof ( struct compat_ip6t_entry ) >= limit || <NEW_LINE><TAB> ( unsigned char * ) e + e -> next_offset > limit ) { <NEW_LINE>
if ( class == - 1 || class == CLIENT_TYPE_MASTER ) { <NEW_LINE>err = "Unrecognized client limit class : the user specified " <NEW_LINE>"an invalid one , or 'master' which has no buffer limits . " ; <NEW_LINE>
<TAB> if ( len < tcp_hdrlen || tcp_hdrlen < sizeof ( struct tcphdr ) ) <NEW_LINE>
<TAB> size_t bytes , copied , len , cur_len ; <NEW_LINE>
if ( SSL_WRITE_ETM ( s ) && mac_size != 0 ) { <NEW_LINE>
<NEW_LINE>
<TAB> <TAB> <TAB> status = - EPERM ; <NEW_LINE><TAB> <TAB> } else { <NEW_LINE>
<TAB> <TAB> <TAB> zend_throw_exception_ex ( phar_ce_PharException , 0 TSRMLS_CC , " % s" , error ) ; <NEW_LINE>
<TAB> <TAB> <TAB> pi -> compno < JAS_CAST ( int , pchg -> compnoend ) ; + + pi -> compno , <NEW_LINE><TAB> <TAB> <TAB> + + pi -> picomp ) { <NEW_LINE>
<TAB> <TAB> if ( ! ssid_ie || ssid_ie -> len > IEEE80211_MAX_SSID_LEN ) <NEW_LINE>
if ( s -> codec_id == AV_CODEC_ID_JV || <NEW_LINE>s -> codec_id == AV_CODEC_ID_INTERPLAY_VIDEO ) { <NEW_LINE>
ConcatenateColorComponent ( & pixel , GrayPixelChannel , compliance , tuple ) ; <NEW_LINE>
<TAB> <NEW_LINE><TAB> if ( n < 0 || n >= 32 ) { <NEW_LINE><TAB> <TAB> return - 1 ; <NEW_LINE><TAB> } <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "sha256" ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "sha224" ) ; <NEW_LINE>
<TAB> <TAB> <TAB> snprintf ( str , sizeof ( str ) , " { v % i . . v % i } , [ % 04x ] " , vC , vC + vA - 1 , vB ) ; <NEW_LINE>
if ( p != end - sig_len ) <NEW_LINE>
<TAB> <TAB> XRSTORS , <NEW_LINE>
if ( length > 1 ) <NEW_LINE>
while ( isdigit ( ( unsigned char ) * s ) && ( ptmp != ( tmp + sizeof ( tmp ) - 1 ) ) ) <NEW_LINE>
<TAB> <TAB> <TAB> if ( uid_keyring ) { <NEW_LINE><TAB> <TAB> <TAB> <TAB> if ( ! test_bit ( KEY_FLAG_UID_KEYRING , <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> & keyring -> flags ) ) <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> continue ; <NEW_LINE><TAB> <TAB> <TAB> } else { <NEW_LINE><TAB> <TAB> <TAB> <TAB> if ( key_permission ( make_key_ref ( keyring , 0 ) , <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> <TAB> KEY_NEED_SEARCH ) < 0 ) <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> continue ; <NEW_LINE><TAB> <TAB> <TAB> }
<TAB> strncpy ( ualg -> cru_name , alg -> cra_name , sizeof ( ualg -> cru_name ) ) ; <NEW_LINE><TAB> strncpy ( ualg -> cru_driver_name , alg -> cra_driver_name , <NEW_LINE><TAB> <TAB> sizeof ( ualg -> cru_driver_name ) ) ; <NEW_LINE><TAB> strncpy ( ualg -> cru_module_name , module_name ( alg -> cra_module ) , <NEW_LINE><TAB> <TAB> sizeof ( ualg -> cru_module_name ) ) ; <NEW_LINE><TAB> ualg -> cru_type = 0 ; <NEW_LINE><TAB> ualg -> cru_mask = 0 ; <NEW_LINE>
<TAB> struct rtnl_link_ifmap map ; <NEW_LINE><NEW_LINE><TAB> memset ( & map , 0 , sizeof ( map ) ) ; <NEW_LINE><TAB> map . mem_start = dev -> mem_start ; <NEW_LINE><TAB> map . mem_end = dev -> mem_end ; <NEW_LINE><TAB> map . base_addr = dev -> base_addr ; <NEW_LINE><TAB> map . irq = dev -> irq ; <NEW_LINE><TAB> map . dma = dev -> dma ; <NEW_LINE><TAB> map . port = dev -> if_port ; <NEW_LINE><NEW_LINE>
<TAB> <TAB> <TAB> if ( init_file ) { <NEW_LINE><TAB> <TAB> <TAB> <TAB> phpdbg_init ( init_file , init_file_len , init_file_default ) ; <NEW_LINE><TAB> <TAB> <TAB> } <NEW_LINE>
<TAB> <TAB> unsigned int index , count , i ; <NEW_LINE>
virtual nsresult OpenContentStream ( PRBool async , nsIInputStream ** result , <NEW_LINE>nsIChannel ** channel ) ; <NEW_LINE>
<TAB> if ( po -> fanout ) { <NEW_LINE><TAB> <TAB> ret = - EINVAL ; <NEW_LINE><TAB> <TAB> goto out_unlock ; <NEW_LINE><TAB> } <NEW_LINE><NEW_LINE>
<TAB> res = ip6_xmit ( sk , skb , & fl6 , rcu_dereference ( np -> opt ) , <NEW_LINE><TAB> <TAB> np -> tclass ) ; <NEW_LINE>
<TAB> { <NEW_LINE><TAB> <TAB> if ( psf -> header . indx + 16 >= psf -> header . len && psf_bump_header_allocation ( psf , 16 ) ) <NEW_LINE><TAB> <TAB> <TAB> return count ; <NEW_LINE><NEW_LINE><TAB> <TAB> switch ( c ) <NEW_LINE>
<TAB> unregister_pernet_device ( & ipgre_net_ops ) ; <NEW_LINE>
<TAB> <TAB> flen = udf_get_filename ( dir -> i_sb , nameptr , lfi , fname , <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> UDF_NAME_LEN ) ; <NEW_LINE>
<TAB> gdCtxPuts ( out , " } ; \n" ) ; <NEW_LINE>
<TAB> if ( ext2_xattr_cache_insert ( ext2_mb_cache , bh ) ) <NEW_LINE>
<TAB> retval = bprm_change_interp ( interp , bprm ) ; <NEW_LINE><TAB> if ( retval < 0 ) <NEW_LINE><TAB> <TAB> return retval ; <NEW_LINE>
static gboolean parse_netscreen_packet ( FILE_T fh , struct wtap_pkthdr * phdr , <NEW_LINE><TAB> Buffer * buf , char * line , int * err , gchar ** err_info ) ; <NEW_LINE>
<TAB> guint32 off = offset , last_off ; <NEW_LINE>
const int olen = 3 * len / 4 + 1 ; <NEW_LINE>char * out = mutt_mem_malloc ( olen ) ; <NEW_LINE>int dlen = mutt_b64_decode ( out , it , olen ) ; <NEW_LINE>
Copyright ( c ) 1997 - 2008 University of Cambridge <NEW_LINE>
<TAB> <TAB> if ( ( cmd == HIDIOCGUSAGES || cmd == HIDIOCSUSAGES ) && <NEW_LINE><TAB> <TAB> ( uref_multi -> num_values > HID_MAX_MULTI_USAGES || <NEW_LINE><TAB> <TAB> uref -> usage_index + uref_multi -> num_values > field -> report_count ) ) <NEW_LINE><TAB> <TAB> <TAB> goto inval ; <NEW_LINE><NEW_LINE>
<TAB> if ( rc != KLSI_STATUSBUF_LEN ) { <NEW_LINE><TAB> <TAB> dev_err ( & port -> dev , "reading line status failed : % d\n" , rc ) ; <NEW_LINE><TAB> <TAB> if ( rc >= 0 ) <NEW_LINE><TAB> <TAB> <TAB> rc = - EIO ; <NEW_LINE><TAB> } else { <NEW_LINE>
static size_t scanned ; <NEW_LINE>static size_t readnbd ; <NEW_LINE><NEW_LINE>static void flush_cmd ( void ) <NEW_LINE> { <NEW_LINE>scanned = readnbd = ( size_t ) 0U ; <NEW_LINE> } <NEW_LINE><NEW_LINE>
int hs = ci -> halfrate_flag ; <NEW_LINE><NEW_LINE>
( ! SSL_READ_ETM ( s ) && EVP_MD_CTX_md ( s -> read_hash ) != NULL ) ) { <NEW_LINE>
#define BUFSIZE ( ( 1024 * 1024 ) + sizeof ( struct nbd_reply ) ) <NEW_LINE>
<TAB> . splice_write <TAB> = iter_file_splice_write , <NEW_LINE>
SH_ENFORCE_PACKING_RESTRICTIONS = 0x0800 , <NEW_LINE><NEW_LINE><NEW_LINE><NEW_LINE><NEW_LINE><NEW_LINE>SH_CLAMP_INDIRECT_ARRAY_BOUNDS = 0x1000 <NEW_LINE>
<TAB> <TAB> <TAB> * mtu = min ( * mtu , pmtuprobe ? <NEW_LINE><TAB> <TAB> <TAB> <TAB> rt -> dst . dev -> mtu : <NEW_LINE><TAB> <TAB> <TAB> <TAB> dst_mtu ( rt -> dst . path ) ) ; <NEW_LINE>
<NEW_LINE>
if ( client -> ipc == NULL && client -> session == NULL ) { <NEW_LINE>
int len = mutt_b64_decode ( buffer , encoded , sizeof ( buffer ) ) ; <NEW_LINE>
<TAB> if ( key_is_positive ( key ) && <NEW_LINE>
- 3 , - 1 , - 3 , 4 , - 1 , - 3 , - 1 , - 1 , - 3 , <NEW_LINE>
<TAB> <TAB> conn -> m -> local_tx_end ( conn , this_func , ret TSRMLS_CC ) ; <NEW_LINE>
compact_pixels = ( unsigned char * ) AcquireQuantumMemory ( ( 2 * channels * <NEW_LINE>next_image -> columns ) + 1 , packet_size * sizeof ( * compact_pixels ) ) ; <NEW_LINE>
<TAB> <TAB> <TAB> <NEW_LINE><TAB> <TAB> <TAB> if ( hdr -> name [ 99 ] ) { <NEW_LINE><TAB> <TAB> <TAB> <TAB> strncat ( name , hdr -> name , 100 ) ; <NEW_LINE><TAB> <TAB> <TAB> } else { <NEW_LINE><TAB> <TAB> <TAB> <TAB> strcat ( name , hdr -> name ) ; <NEW_LINE><TAB> <TAB> <TAB> } <NEW_LINE>
static inline zend_ulong realpath_cache_key ( const char * path , size_t path_len ) <NEW_LINE>
<TAB> if ( inet_opt && inet_opt -> opt . optlen ) { <NEW_LINE><TAB> <TAB> iph -> ihl += inet_opt -> opt . optlen >> 2 ; <NEW_LINE><TAB> <TAB> ip_options_build ( skb , & inet_opt -> opt , inet -> inet_daddr , rt , 0 ) ; <NEW_LINE>
<TAB> struct ip_options_rcu <TAB> * opt ; <NEW_LINE>
static RFlagsAtOffset * r_flag_get_nearest_list ( RFlag * f , ut64 off , int dir ) { <NEW_LINE>
<TAB> <TAB> if ( len < 0 || len > MAX_RDS_RADIO_TEXT ) { <NEW_LINE>
long bytes = size ; <NEW_LINE>
#define nginx_version 9002 <NEW_LINE>#define NGINX_VERSION "0 . 9 . 2" <NEW_LINE>
already_AddRefed < DOMSVGPathSeg > GetItem ( uint32_t index , <NEW_LINE>ErrorResult & error ) ; <NEW_LINE>already_AddRefed < DOMSVGPathSeg > IndexedGetter ( uint32_t index , bool & found , <NEW_LINE>ErrorResult & error ) ; <NEW_LINE>
<TAB> mutex_unlock ( & dev -> lock ) ; <NEW_LINE>
<TAB> <TAB> <TAB> jas_eprintf ( "got box type % s\n" , box -> info -> name ) ; <NEW_LINE>
<TAB> if ( node -> nd_item . ci_parent ) <NEW_LINE><TAB> <TAB> return to_o2nm_cluster ( node -> nd_item . ci_parent -> ci_parent ) ; <NEW_LINE><TAB> else <NEW_LINE><TAB> <TAB> return NULL ; <NEW_LINE>
static int udf_translate_to_linux ( uint8_t * , int , uint8_t * , int , uint8_t * , <NEW_LINE><TAB> <TAB> <TAB> <TAB> int ) ; <NEW_LINE>
int udp_push_pending_frames ( struct sock * sk ) <NEW_LINE>
<TAB> <TAB> result = parse_rock_ridge_inode_internal ( de , inode , <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> <TAB> <TAB> flags | RR_REGARD_XA ) ; <NEW_LINE>
<TAB> char * pathname = RUNTIME_PATH " / lxc / lock / var / lib / lxc / " ; <NEW_LINE>
<NEW_LINE><NEW_LINE>#define XFS_IS_REALTIME_INODE ( ip ) <TAB> <TAB> <TAB> \ <NEW_LINE><TAB> ( ( ( ip ) -> i_d . di_flags & XFS_DIFLAG_REALTIME ) && <TAB> \ <NEW_LINE><TAB> ( ip ) -> i_mount -> m_rtdev_targp ) <NEW_LINE>
<TAB> <TAB> return tiocgetd ( tty , p ) ; <NEW_LINE>
ok = ExprResolveBoolean ( ctx , expr -> unary . child , set_rtrn ) ; <NEW_LINE>
s -> chunksize = UINT64_MAX ; <NEW_LINE>
<TAB> if ( ! rc && tcon ) { <NEW_LINE>
SSL_TRC ( 3 , ( " % d : SSL3 [ % d ] : handle session_ticket handshake during % s handshake" , <NEW_LINE><TAB> <TAB> SSL_GETPID ( ) , ss -> fd , <NEW_LINE>ss -> ssl3 . hs . isResuming ? "resumption" : "full" ) ) ; <NEW_LINE>
declen = mutt_b64_decode ( out2 , out1 , sizeof ( out2 ) ) ; <NEW_LINE>
vorbis_info_psy_global * g , <NEW_LINE>vorbis_look_psy * p , <NEW_LINE>vorbis_info_mapping0 * vi , <NEW_LINE>float ** mdct ) { <NEW_LINE>
void Write ( const char * aBuffer , uint32_t aCount , DecodeStrategy aStrategy ) ; <NEW_LINE>
<TAB> . splice_write <TAB> = iter_file_splice_write , <NEW_LINE>
<TAB> BUG_ON ( ret == - EEXIST || ret == - EOVERFLOW ) ; <NEW_LINE>
<TAB> if ( ! IS_ERR ( raw ) ) <NEW_LINE><TAB> <TAB> touch_atime ( & path ) ; <NEW_LINE>
<TAB> <TAB> zend_throw_exception_ex ( phar_ce_PharException , 0 TSRMLS_CC , " % s" , error ) ; <NEW_LINE>
( ( SBucketType * ) ( buffer -> buffer + p ) ) -> data_type = IS_NULL ; <NEW_LINE>
ConstrainColormapIndex ( image , GetPixelIndex ( image , q ) , <NEW_LINE>exception ) , q ) ; <NEW_LINE>
print_as ( "Notification setup not supported , won't be able to reconnect after failure" ) ; <NEW_LINE>
<TAB> <TAB> err = compat_put_timeval ( & ktv , up ) ; <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "sha512" ) ; <NEW_LINE>
bool <NEW_LINE>
size *= 95 ; <NEW_LINE>
virtual nsresult InstallMember ( JSContext * aCx , <NEW_LINE>JSObject * aTargetClassObject ) ; <NEW_LINE>
if ( ( len + * stringlen ) >= * stralloc ) { <NEW_LINE>
static struct fsnotify_group * inotify_new_group ( unsigned int max_events ) <NEW_LINE>
<NEW_LINE><TAB> if ( char_cnt == 0 ) <NEW_LINE><TAB> <TAB> return ( 0 ) ; <NEW_LINE><NEW_LINE>
#define MAX_PASSWORD_SIZE 512 <NEW_LINE>
last mod : $ Id $ <NEW_LINE>
<NEW_LINE><NEW_LINE>if ( 1 + 2 + 16 > s -> s3 -> rrec . length ) <NEW_LINE>return 0 ; <NEW_LINE>hbtype = * p + + ; <NEW_LINE>n2s ( p , payload ) ; <NEW_LINE>if ( 1 + 2 + payload + 16 > s -> s3 -> rrec . length ) <NEW_LINE>return 0 ; <NEW_LINE>pl = p ; <NEW_LINE>
: lastBinding ( NULL ) , nargs ( 0 ) , nvars ( 0 ) , nupvars ( 0 ) , hasDup_ ( false ) <NEW_LINE>
done : <NEW_LINE>
struct dump_dir * dd = dd_create ( path , g_settings_privatereports ? 0 : client_uid , DEFAULT_DUMP_DIR_MODE ) ; <NEW_LINE>
usize_t ts = ( mt_random ( & static_mtrand ) % TEST_FILE_MEAN ) + <NEW_LINE>TEST_FILE_MEAN / 2 ; <NEW_LINE>usize_t ss = ( mt_random ( & static_mtrand ) % TEST_FILE_MEAN ) + <NEW_LINE>TEST_FILE_MEAN / 2 ; <NEW_LINE>
{ <NEW_LINE>data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; <NEW_LINE>ThrowReaderException ( CorruptImageError , "ImproperImageHeader" ) ; <NEW_LINE> } <NEW_LINE>
if ( ! ( MyFlags & MY_REDEL_NO_COPY_STAT ) ) <NEW_LINE> { <NEW_LINE>if ( my_copystat ( org_name , tmp_name , MyFlags ) < 0 ) <NEW_LINE>goto end ; <NEW_LINE> } <NEW_LINE>
<TAB> <TAB> <TAB> zend_throw_exception_ex ( phar_ce_PharException , 0 TSRMLS_CC , " % s" , error ) ; <NEW_LINE>
<TAB> <TAB> <TAB> rinfo = kzalloc ( SZ_SG_REQ_INFO * SG_MAX_QUEUE , <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> GFP_KERNEL ) ; <NEW_LINE>
<TAB> char * driver_override , * old , * cp ; <NEW_LINE>
envelope_lookup * ve ; <NEW_LINE>
<TAB> if ( body -> nested . part && body -> nested . part -> next && body -> nested . part -> next -> body . parameter -> value ) { <NEW_LINE>
extern int parse_rock_ridge_inode ( struct iso_directory_record * , struct inode * , int relocated ) ; <NEW_LINE>
<TAB> <TAB> if ( ! iph || iph -> ihl < 5 ) <NEW_LINE>
<TAB> if ( is_nmi ( exit_intr_info ) ) { <NEW_LINE>
bool DeferredRelease ( nsISupports * obj ) ; <NEW_LINE>
<TAB> <TAB> <TAB> break ; <NEW_LINE>
void ResetDirectionSetByTextNode ( nsTextNode * aTextNode , bool aNullParent ) ; <NEW_LINE>
q [ i ] = ClampPixel ( pixel ) ; <NEW_LINE>
<TAB> size_t newpos ; <NEW_LINE>
<TAB> <TAB> <NEW_LINE><TAB> <TAB> if ( ( l_data_size > 0U ) && ( ( ( ( OPJ_UINT32 ) - 1 ) / l_data_size ) < ( OPJ_UINT32 ) ( l_tilec -> y1 - l_tilec -> y0 ) ) ) { <NEW_LINE>
OBJ_obj2txt ( obj_txt , sizeof ( obj_txt ) , obj , 0 ) ; <NEW_LINE>BIO_printf ( bio , " % s\n" , obj_txt ) ; <NEW_LINE>
ULONG ulDataOffset , <NEW_LINE>BOOLEAN verifyLength ) ; <NEW_LINE>
iakerb_ctx_id_t ctx = ( iakerb_ctx_id_t ) * context_handle ; <NEW_LINE>
<TAB> snprintf ( efbuf , sizeof ( efbuf ) , "REG_ % s" , name ) ; <NEW_LINE>
<TAB> final_p = fl6_update_dst ( fl6 , np -> opt , & final ) ; <NEW_LINE><TAB> dst = ip6_dst_lookup_flow ( sk , fl6 , final_p , false ) ; <NEW_LINE>
<NEW_LINE>if ( error == NULL ) <NEW_LINE>if ( verify & GNUTLS_CERT_INVALID ) <NEW_LINE>inf_gnutls_certificate_verification_set_error ( & error , verify ) ; <NEW_LINE>
<TAB> <TAB> fa = xfs_dinode_verify_fork ( dip , mp , XFS_DATA_FORK ) ; <NEW_LINE><TAB> <TAB> if ( fa ) <NEW_LINE><TAB> <TAB> <TAB> return fa ; <NEW_LINE>
if ( ptr - c -> rcurr > 100 || <NEW_LINE> ( strncmp ( ptr , "get " , 4 ) && strncmp ( ptr , "gets " , 5 ) ) ) { <NEW_LINE><NEW_LINE>
<TAB> release_sock ( sk ) ; <NEW_LINE>
<TAB> struct { <NEW_LINE>
<TAB> <TAB> skipsize = LOGICAL_BLOCK_SIZE * ( int64_t ) vd -> location ; <NEW_LINE>
<TAB> <TAB> len = ( ms -> c . len = 20 + level ) * sizeof ( * ms -> c . li ) ; <NEW_LINE>
<TAB> . splice_write <TAB> <TAB> = iter_file_splice_write , <NEW_LINE>
<TAB> <TAB> atomic_set ( & p -> ip_id_count , <NEW_LINE><TAB> <TAB> <TAB> <TAB> ( daddr -> family == AF_INET ) ? <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> secure_ip_id ( daddr -> addr . a4 ) : <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> secure_ipv6_id ( daddr -> addr . a6 ) ) ; <NEW_LINE>
<TAB> perf_sw_event ( PERF_COUNT_SW_EMULATION_FAULTS , 1 , regs , address ) ; <NEW_LINE>
if ( code == max_code ) <NEW_LINE>
<TAB> if ( ns_capable ( ns -> parent , cap_setid ) && <NEW_LINE><TAB> file_ns_capable ( file , ns -> parent , cap_setid ) ) <NEW_LINE>
<TAB> <TAB> if ( j < loopmaxw ) <NEW_LINE>
char_u <TAB> ** array = NULL ; <NEW_LINE>
<NEW_LINE>n_new_keys = count_new_keys ( kdb -> n_key_data , kdb -> key_data ) ; <NEW_LINE>ret = decrypt_key_data ( handle -> context , n_new_keys , kdb -> key_data , <NEW_LINE>
vorbis_comment * vc , <NEW_LINE>ogg_packet * op , <NEW_LINE>ogg_packet * op_comm , <NEW_LINE>ogg_packet * op_code ) { <NEW_LINE>
} JSVAL_ALIGNMENT jsval_layout ; <NEW_LINE>
<NEW_LINE>
<TAB> <TAB> strncpy ( uaddr -> sa_data , dev -> name , 14 ) ; <NEW_LINE>
<TAB> ret = ext4_convert_unwritten_extents ( inode , offset , size ) ; <NEW_LINE>
( s -> color_type == PNG_COLOR_TYPE_RGB && length != 6 ) || <NEW_LINE>s -> bit_depth == 1 ) <NEW_LINE>
void f2fs_wait_discard_bios ( struct f2fs_sb_info * sbi , bool umount ) ; <NEW_LINE>
<NEW_LINE><NEW_LINE>static bool ReadLength ( TlsParser * parser , uint16_t version , uint32_t * length ) ; <NEW_LINE><NEW_LINE>
<TAB> struct page <TAB> <TAB> * page ; <TAB> <TAB> <NEW_LINE>
<TAB> <NEW_LINE><NEW_LINE><TAB> <NEW_LINE>
<TAB> RAnalOp next_op = { 0 } ;
<TAB> <TAB> <TAB> rq = hctx -> tags -> rqs [ off + bit ] ; <NEW_LINE>
<TAB> struct mb2_cache * s_mb_cache ; <NEW_LINE>
if ( ! src_addr ) <NEW_LINE>src_addr = ep_alloc ( ADDR_MAX_LEN ) ; <NEW_LINE><NEW_LINE>if ( ! dst_addr ) <NEW_LINE>dst_addr = ep_alloc ( ADDR_MAX_LEN ) ; <NEW_LINE>
<TAB> vmcs_write16 ( HOST_FS_SELECTOR , 0 ) ; <NEW_LINE><TAB> vmcs_write16 ( HOST_GS_SELECTOR , 0 ) ; <NEW_LINE>
uint64_t off = s -> off ; <NEW_LINE>
<TAB> { <TAB> size_t chanmap_size = SF_MIN ( psf -> sf . channels , layout_tag & 0xffff ) * sizeof ( psf -> channel_map [ 0 ] ) ; <NEW_LINE>
#define BUILD_REVISION 778 <NEW_LINE>
float * qA , float * qB ) { <NEW_LINE>
static mp_err <NEW_LINE>
<TAB> if ( * rsize >= 31 && rdesc [ 29 ] == 0x05 && rdesc [ 30 ] == 0x09 ) { <NEW_LINE>
<TAB> size_t number_of_bytes = 0 ; <NEW_LINE><TAB> CS_WINKERNEL_MEMBLOCK * block = NULL ; <NEW_LINE><TAB> <NEW_LINE><TAB> <NEW_LINE><TAB> <NEW_LINE><TAB> if ( ! NT_SUCCESS ( RtlSizeTAdd ( size , sizeof ( CS_WINKERNEL_MEMBLOCK ) , & number_of_bytes ) ) ) { <NEW_LINE><TAB> <TAB> return NULL ; <NEW_LINE><TAB> } <NEW_LINE><TAB> block = ( CS_WINKERNEL_MEMBLOCK * ) ExAllocatePoolWithTag ( <NEW_LINE><TAB> <TAB> <TAB> NonPagedPool , number_of_bytes , CS_WINKERNEL_POOL_TAG ) ; <NEW_LINE>
char * prop_chunk ; <NEW_LINE><NEW_LINE>if ( dff_chunk_header . ckDataSize < 4 || dff_chunk_header . ckDataSize > 1024 ) { <NEW_LINE>error_line ( " % s is not a valid . DFF file ! " , infilename ) ; <NEW_LINE>return WAVPACK_SOFT_ERROR ; <NEW_LINE> } <NEW_LINE><NEW_LINE>if ( debug_logging_mode ) <NEW_LINE>error_line ( "got PROP chunk of % d bytes total" , ( int ) dff_chunk_header . ckDataSize ) ; <NEW_LINE><NEW_LINE>prop_chunk = malloc ( ( size_t ) dff_chunk_header . ckDataSize ) ; <NEW_LINE>
XPCWrappedNativeJSClass mJSClass ; <NEW_LINE>
last mod : $ Id : window . h 13293 2007 - 07 - 24 00 : 09 : 47Z xiphmont $ <NEW_LINE>
<TAB> . llseek = ftrace_filter_lseek , <NEW_LINE>
<TAB> <TAB> return ret ; <NEW_LINE>
unsigned int i , nb_cpus ; <NEW_LINE>
CURLcode sanitize_file_name ( char ** filename ) ; <NEW_LINE>
me -> active_tracks = 0 ; <NEW_LINE>
<NEW_LINE>
struct XPCWrappedNativeJSClass ; <NEW_LINE>extern XPCWrappedNativeJSClass XPC_WN_NoHelper_JSClass ; <NEW_LINE>
* <NEW_LINE>if ( c -> flags & ( CLIENT_CLOSE_AFTER_REPLY|CLIENT_CLOSE_ASAP ) ) break ; <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> goto out_bad ; <NEW_LINE>
<TAB> if ( len <= 0x7f ) <NEW_LINE><TAB> <TAB> goto check_length ; <NEW_LINE>
<TAB> <TAB> <TAB> NewSessionTicket * session_ticket ) ; <NEW_LINE>
<TAB> <TAB> if ( sk != asoc -> base . sk ) <NEW_LINE><TAB> <TAB> <TAB> goto do_error ; <NEW_LINE>
<TAB> <TAB> if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) <NEW_LINE><TAB> <TAB> <TAB> zap = key -> payload . data [ 0 ] ; <NEW_LINE><TAB> <TAB> else <NEW_LINE><TAB> <TAB> <TAB> zap = NULL ; <NEW_LINE>
<TAB> if ( keyring && link_ret == 0 ) <NEW_LINE>
static int parse_input ( h2o_http2_conn_t * conn ) <NEW_LINE>
gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; <NEW_LINE>gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER ; <NEW_LINE>
<TAB> <TAB> SKB_EXT_ERR ( skb ) -> opt_stats ) <NEW_LINE>
<TAB> strncpy ( mixer_vols [ n ] . name , name , 32 ) ; <NEW_LINE>
<TAB> <TAB> <TAB> if ( copy > 0 && <NEW_LINE><TAB> <TAB> <TAB> getfrag ( from , data + transhdrlen , offset , <NEW_LINE><TAB> <TAB> <TAB> <TAB> copy , fraggap , skb ) < 0 ) { <NEW_LINE>
bool fill ( const SourceCoords & other ) ; <NEW_LINE>
if ( ! doapr_outch ( sbuffer , buffer , & currlen , maxlen , ch ) ) <NEW_LINE>return 0 ; <NEW_LINE>
<NEW_LINE>void DoError ( ) ; <NEW_LINE><NEW_LINE>class HandleErrorWorker : public nsRunnable <NEW_LINE> { <NEW_LINE>public : <NEW_LINE><NEW_LINE>static void DispatchIfNeeded ( RasterImage * aImage ) ; <NEW_LINE><NEW_LINE>NS_IMETHOD Run ( ) ; <NEW_LINE><NEW_LINE>private : <NEW_LINE>HandleErrorWorker ( RasterImage * aImage ) ; <NEW_LINE><NEW_LINE>nsRefPtr < RasterImage > mImage ; <NEW_LINE> } ; <NEW_LINE><NEW_LINE>
unsigned int pixel_limit ; <NEW_LINE>
Address addressForInlineReturn ( ) ; <NEW_LINE>
<TAB> size_t len = strlen ( s ) + 1 ; <NEW_LINE><TAB> char * r = pool_alloc ( len ) ; <NEW_LINE><TAB> memcpy ( r , s , len ) ; <NEW_LINE>
<TAB> <NEW_LINE><TAB> <NEW_LINE>
<TAB> <TAB> <TAB> NEED_OP ( t , 0 ) ; <NEW_LINE>
<TAB> <TAB> if ( len < 0 || len > MAX_RDS_PS_NAME ) { <NEW_LINE>
SOW_FLAG = PARTIALLY_TRANSPARENT << 1 , <NEW_LINE><NEW_LINE><NEW_LINE><NEW_LINE><NEW_LINE><NEW_LINE>SHADOWING_FORBIDDEN = SOW_FLAG << 1 } ; <NEW_LINE>
#define GR2_VERSION_BUGFIX 3 <NEW_LINE>
<TAB> if ( len > 32 ) <NEW_LINE>
<TAB> cmd = zend_string_safe_alloc ( 2 , l , 0 , 0 ) ; <NEW_LINE>
last mod : $ Id $ <NEW_LINE>
<TAB> <NEW_LINE><TAB> u8 <TAB> encap_mark : 1 ; <NEW_LINE>
<TAB> if ( opt ) <NEW_LINE><TAB> <TAB> icsk -> icsk_ext_hdr_len = opt -> opt_flen + opt -> opt_nflen ; <NEW_LINE>
<TAB> long mtemp , save_adjust ; <NEW_LINE>
#define FIND_AUTH_END_CONTINUE - 1 <NEW_LINE>#define FIND_AUTH_END_ABORT - 2 <NEW_LINE><NEW_LINE>#define AUTH_LINE_SENTINEL "\r\n" <NEW_LINE>#define AUTH_BEGIN "BEGIN" <NEW_LINE>
guint uint_val ; <NEW_LINE><NEW_LINE>if ( value_len < 4 ) <NEW_LINE>break ; <NEW_LINE><NEW_LINE>uint_val = GST_READ_UINT32_LE ( value ) ; <NEW_LINE>
<TAB> prog = bpf_prog_inc ( prog ) ; <NEW_LINE>
s -> smart_selftest_count = 1 ; <NEW_LINE>
<TAB> file = kzalloc ( sizeof ( * file ) , GFP_NOIO ) ; <NEW_LINE>
<TAB> <TAB> if ( * payload_len ) { <NEW_LINE><TAB> <TAB> <TAB> if ( ! ( new_payload = ast_realloc ( session -> payload , ( session -> payload_len + * payload_len ) ) ) ) { <NEW_LINE><TAB> <TAB> <TAB> <TAB> ast_log ( LOG_WARNING , "Failed allocation : % p , % zu , % "PRIu64"\n" , <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> session -> payload , session -> payload_len , * payload_len ) ; <NEW_LINE><TAB> <TAB> <TAB> <TAB> * payload_len = 0 ; <NEW_LINE><TAB> <TAB> <TAB> <TAB> ast_websocket_close ( session , 1009 ) ; <NEW_LINE><TAB> <TAB> <TAB> <TAB> return 0 ; <NEW_LINE><TAB> <TAB> <TAB> } <NEW_LINE><NEW_LINE><TAB> <TAB> <TAB> session -> payload = new_payload ; <NEW_LINE><TAB> <TAB> <TAB> memcpy ( ( session -> payload + session -> payload_len ) , ( * payload ) , ( * payload_len ) ) ; <NEW_LINE><TAB> <TAB> <TAB> session -> payload_len += * payload_len ; <NEW_LINE><TAB> <TAB> } else if ( ! session -> payload_len && session -> payload ) { <NEW_LINE><TAB> <TAB> <TAB> ast_free ( session -> payload ) ; <NEW_LINE><TAB> <TAB> <TAB> session -> payload = NULL ; <NEW_LINE><TAB> <TAB> } <NEW_LINE>
<TAB> <TAB> <NEW_LINE><TAB> <TAB> while ( ( s -> managerid = rand ( ) ^ ( unsigned long ) s ) == 0 ) ; <NEW_LINE>
<TAB> if ( key_is_positive ( key ) ) <NEW_LINE>
if ( s -> chunksize != UINT64_MAX ) { <NEW_LINE>
if ( ( isServer && ss -> ssl3 . hs . ws != wait_client_cert ) || <NEW_LINE> ( ! isServer && ss -> ssl3 . hs . ws != wait_server_cert ) ) { <NEW_LINE>desc = unexpected_message ; <NEW_LINE>errCode = SSL_ERROR_RX_UNEXPECTED_CERTIFICATE ; <NEW_LINE>goto alert_loser ; <NEW_LINE>
dy %= CDG_SCREEN_HEIGHT ; <NEW_LINE>dx %= CDG_SCREEN_WIDTH ; <NEW_LINE>
inline Lookup getLookup ( ) const ; <NEW_LINE>
<NEW_LINE>
imap_quote_string ( errstr , sizeof ( errstr ) , list . name , true ) ; <NEW_LINE>
<TAB> memcpy ( m , name , nlen + 1 ) ; <NEW_LINE>
<TAB> <TAB> <TAB> if ( pmc_overflow ( val ) ) <NEW_LINE>
<TAB> opt = xchg ( ( __force struct ipv6_txoptions ** ) & np -> opt , NULL ) ; <NEW_LINE><TAB> if ( opt ) { <NEW_LINE><TAB> <TAB> atomic_sub ( opt -> tot_len , & sk -> sk_omem_alloc ) ; <NEW_LINE><TAB> <TAB> txopt_put ( opt ) ; <NEW_LINE><TAB> } <NEW_LINE>
<TAB> bool seen ; <NEW_LINE>
<TAB> <TAB> error = posix_acl_update_mode ( inode , <NEW_LINE><TAB> <TAB> <TAB> <TAB> & inode -> i_mode , & acl ) ; <NEW_LINE><TAB> <TAB> if ( error ) <NEW_LINE><TAB> <TAB> <TAB> return error ; <NEW_LINE>
exit_func : <NEW_LINE>
if ( half_vert && y + half_vert < s -> avctx -> height ) <NEW_LINE>
<TAB> <TAB> if ( res -> nlimbs ) { <NEW_LINE><TAB> <TAB> <TAB> if ( mpi_resize ( res , 1 ) < 0 ) <NEW_LINE><TAB> <TAB> <TAB> <TAB> goto enomem ; <NEW_LINE><TAB> <TAB> <TAB> rp = res -> d ; <NEW_LINE><TAB> <TAB> <TAB> rp [ 0 ] = 1 ; <NEW_LINE><TAB> <TAB> } <NEW_LINE>
size_type aNewLength ) ; <NEW_LINE>
<TAB> if ( mixer -> disconnected ) <NEW_LINE><TAB> <TAB> return ; <NEW_LINE><TAB> if ( mixer -> urb ) <NEW_LINE><TAB> <TAB> usb_kill_urb ( mixer -> urb ) ; <NEW_LINE><TAB> if ( mixer -> rc_urb ) <NEW_LINE><TAB> <TAB> usb_kill_urb ( mixer -> rc_urb ) ; <NEW_LINE><TAB> mixer -> disconnected = true ; <NEW_LINE>
extern struct mb2_cache * ext4_xattr_create_cache ( void ) ; <NEW_LINE>extern void ext4_xattr_destroy_cache ( struct mb2_cache * ) ; <NEW_LINE>
<TAB> <TAB> return false ; <NEW_LINE>
static void ptrace_triggered ( struct perf_event * bp , <NEW_LINE>
<TAB> memcpy ( msg , & msg_tmp , sizeof ( * msg ) ) ; <NEW_LINE>
if ( ! s -> cdx [ i ] || s -> cdx [ i ] == 3 || s -> cdx [ i ] > 4 <NEW_LINE> || ! s -> cdy [ i ] || s -> cdy [ i ] == 3 || s -> cdy [ i ] > 4 ) { <NEW_LINE>
<TAB> if ( opt ) <NEW_LINE><TAB> <TAB> icsk -> icsk_ext_hdr_len = opt -> opt_flen + <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> opt -> opt_nflen ; <NEW_LINE>
<TAB> <TAB> <TAB> kvm_unpin_pages ( kvm , pfn , page_size >> PAGE_SHIFT ) ; <NEW_LINE>
#ifndef HEADER_CURL_ESCAPE_H <NEW_LINE>#define HEADER_CURL_ESCAPE_H <NEW_LINE>CURLcode Curl_urldecode ( struct SessionHandle * data , <NEW_LINE>const char * string , size_t length , <NEW_LINE>char ** ostring , size_t * olen , <NEW_LINE>bool reject_crlf ) ; <NEW_LINE>
if ( ! SSL_WRITE_ETM ( s ) && mac_size != 0 ) { <NEW_LINE>
<TAB> p -> o_arg . open_flags = flags ; <NEW_LINE><TAB> p -> o_arg . fmode = fmode & ( FMODE_READ|FMODE_WRITE ) ; <NEW_LINE>
#if defined ( WINCE ) || ( MOZ_WINSDK_TARGETVER == MOZ_NTDDI_WS03 ) <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "camellia" ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "camellia - asm" ) ;
<NEW_LINE>record_size += 1 ; <NEW_LINE><NEW_LINE>
- 3 , - 4 , - 7 , 4 , 3 , 0 , - 1 , - 2 , - 5 , <NEW_LINE>
<TAB> <TAB> port_idx = port -> addr . port ; <NEW_LINE><TAB> <TAB> snd_seq_port_unlock ( port ) ; <NEW_LINE><TAB> <TAB> snd_seq_delete_port ( client , port_idx ) ; <NEW_LINE>
( ( ci -> blocksizes [ v -> lW ] / 4 + <NEW_LINE>ci -> blocksizes [ v -> W ] / 4 ) >> hs ) ; <NEW_LINE>
<TAB> <TAB> zend_throw_exception_ex ( phar_ce_PharException , 0 TSRMLS_CC , " % s" , error ) ; <NEW_LINE>
if ( ( format < 0 ) || ( ( format - 1 ) >= EXIF_NUM_FORMATS ) ) <NEW_LINE>
OM_uint32 KRB5_CALLCONV <NEW_LINE>
if ( ctx -> terminated || ! ctx -> established ) { <NEW_LINE>
<NEW_LINE><TAB> <TAB> <NEW_LINE><TAB> <TAB> <NEW_LINE><TAB> <TAB> args -> tcp = tcp_conn_select ( tcp_socket , tcp6_socket ) ; <NEW_LINE>
p = BuildTestPacket ( IPPROTO_ICMP , 1 , 8183 , 0 , 'A' , 71 ) ; <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "blowfish" ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "blowfish - asm" ) ;
if ( ! my_disable_copystat_in_redel && <NEW_LINE>my_copystat ( org_name , tmp_name , MyFlags ) < 0 ) <NEW_LINE>
<TAB> if ( p -> nameUTF8 && ( u32 ) p -> nameUTF8 [ 0 ] == strlen ( p -> nameUTF8 ) - 1 ) { <NEW_LINE>
<TAB> <TAB> } else { <NEW_LINE><TAB> <TAB> <TAB> <NEW_LINE>
<TAB> <TAB> time_offset = div_s64 ( time_offset , NTP_INTERVAL_FREQ ) ; <NEW_LINE>
mark_desktop_file_executable_task_done ( GObject * source_object , <NEW_LINE>GAsyncResult * res , <NEW_LINE>gpointer user_data ) <NEW_LINE>
<TAB> if ( num_head < LONG_MAX / ( long ) sizeof ( u_header_T * ) ) <NEW_LINE><TAB> uhp_table = ( u_header_T ** ) U_ALLOC_LINE ( <NEW_LINE>
<TAB> <TAB> if ( ! PS ( use_only_cookies ) && ! PS ( id ) && <NEW_LINE>
( * resp ) -> resp = calloc ( 1024 , 1 ) ; <NEW_LINE>
<TAB> if ( state -> pos >= state -> count ) <NEW_LINE><TAB> <TAB> state -> pos = 0 ; <NEW_LINE><TAB> return state -> list [ state -> pos + + ] ; <NEW_LINE>
<TAB> <TAB> r = cpu_has_feature ( CPU_FTR_TM_COMP ) && hv_enabled ; <NEW_LINE>
<NEW_LINE>
<TAB> if ( key_is_positive ( key ) ) { <NEW_LINE>
Packet * p1 = IPV6BuildTestPacket ( IPPROTO_ICMPV6 , ip_id , 2 , 1 , 'C' , 8 ) ; <NEW_LINE>Packet * p2 = IPV6BuildTestPacket ( IPPROTO_ICMPV6 , ip_id , 0 , 1 , 'A' , 8 ) ; <NEW_LINE>Packet * p3 = IPV6BuildTestPacket ( IPPROTO_ICMPV6 , ip_id , 1 , 0 , 'B' , 8 ) ; <NEW_LINE>
if ( strlen ( p ) > 8 ) { <NEW_LINE>cli_dbgmsg ( "Possible data corruption fixed\n" ) ; <NEW_LINE>p [ 8 ] = ' = ' ; <NEW_LINE> } else { <NEW_LINE>cli_dbgmsg ( "Possible data corruption not fixed\n" ) ; <NEW_LINE> } <NEW_LINE>
<TAB> struct name_snapshot old_name ; <NEW_LINE>
virtual nsresult OpenContentStream ( PRBool async , nsIInputStream ** result , <NEW_LINE>nsIChannel ** channel ) ; <NEW_LINE>
<NEW_LINE> { <NEW_LINE>int * sortpointer [ VIF_POSIT + 2 ] ; <NEW_LINE>for ( j = 0 ; j < count + 2 ; j + + ) sortpointer [ j ] = info -> postlist + j ; <NEW_LINE>qsort ( sortpointer , count + 2 , sizeof ( * sortpointer ) , icomp ) ; <NEW_LINE><NEW_LINE>for ( j = 1 ; j < count + 2 ; j + + ) <NEW_LINE>if ( * sortpointer [ j - 1 ] == * sortpointer [ j ] ) goto err_out ; <NEW_LINE> } <NEW_LINE><NEW_LINE>
<TAB> if ( msg -> msg_name ) { <NEW_LINE><TAB> <TAB> struct sockaddr_mISDN * maddr = msg -> msg_name ; <NEW_LINE><NEW_LINE>
int32 inOOMReport ; <NEW_LINE>
<TAB> <TAB> dsize += svbranch . len + 1 ; <NEW_LINE>
<TAB> <TAB> <TAB> hugepage_subpool_put_pages ( spool , reserve ) ; <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "sha1 - all" ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "sha256 - all" ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "sha1 - padlock" ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "sha256 - padlock" ) ;
<TAB> <TAB> if ( sk -> sk_protocol == IPPROTO_TCP && <NEW_LINE><TAB> <TAB> sk -> sk_type == SOCK_STREAM ) <NEW_LINE>
<TAB> <TAB> <TAB> int n ; <NEW_LINE><TAB> <TAB> <TAB> if ( ! body -> unit_size ) <NEW_LINE><TAB> <TAB> <TAB> <TAB> break ; <NEW_LINE><TAB> <TAB> <TAB> n = ( len - sizeof ( struct oz_multiple_fixed ) + 1 ) <NEW_LINE>
<TAB> <TAB> || no_port_forwarding_flag || options . disable_forwarding || <NEW_LINE><TAB> <TAB> ! use_privsep ) { <NEW_LINE>
ADVANCE_BLOCK ( ) ; <NEW_LINE>
if ( n < 1 || n > 65535 || n > ( size_t ) ( end - * p ) ) <NEW_LINE>
<TAB> <TAB> perf_event_ctx_unlock ( group_leader , gctx ) ; <NEW_LINE>
<TAB> { <TAB> SFE_BAD_HEADER_ALLOC <TAB> , "Error : Required header allocation is too large . " } , <NEW_LINE>
ippSetString ( con -> request , & format , 0 , mimetype ) ; <NEW_LINE>
<TAB> return cdc_ncm_bind_common ( dev , intf , CDC_NCM_DATA_ALTSETTING_NCM , 0 ) ; <NEW_LINE>
if ( child != ( pid_t ) - 1 ) <NEW_LINE><TAB> { <NEW_LINE><TAB> sleep ( 2 ) ; <NEW_LINE><TAB> kill ( child , SIGKILL ) ; <NEW_LINE><TAB> fprintf ( stderr , _ ( " . . . killed . \n" ) ) ; <NEW_LINE><TAB> } <NEW_LINE>
<TAB> for ( i = 0 ; i < 3 ; i + + ) <NEW_LINE><TAB> <TAB> kvm_pit_load_count ( kvm , i , kvm -> arch . vpit -> pit_state . channels [ i ] . count , start ) ; <NEW_LINE>
if ( major_status == GSS_S_COMPLETE ) <NEW_LINE>ctx -> established = 1 ; <NEW_LINE>
<TAB> int ret = proc_dointvec_minmax ( table , write , buffer , lenp , ppos ) ; <NEW_LINE>
<TAB> <TAB> if ( nbytes > sizeof ( * hwrpb ) ) <NEW_LINE>
if ( ! LookupString ( symInterpretMatchMaskNames , pred_txt , pred_rtrn ) || <NEW_LINE> ! expr -> action . args ) { <NEW_LINE>
<TAB> cgc . cmd [ 9 ] = cgc . buflen & 0xff ; <NEW_LINE>
<TAB> <NEW_LINE><TAB> if ( user_alloc && <NEW_LINE><TAB> ( ( mem -> userspace_addr & ( PAGE_SIZE - 1 ) ) || <NEW_LINE><TAB> ! access_ok ( VERIFY_WRITE , mem -> userspace_addr , mem -> memory_size ) ) ) <NEW_LINE>
<TAB> <TAB> zend_error ( E_ERROR , " % s" , message ) ; <NEW_LINE>
<TAB> <TAB> <TAB> appendPsqlMetaConnect ( buf , dbname ) ; <NEW_LINE>
<TAB> <TAB> return 0 ; <NEW_LINE>
<TAB> const char * devname = kstrdup ( dev_name ( & d -> udev -> dev ) , GFP_KERNEL ) ; <NEW_LINE><TAB> const char * drvname = d -> name ; <NEW_LINE>
void markRoots ( JSTracer * trc ) ; <NEW_LINE>
<TAB> <TAB> _iov -> iov_len = min ( ( u64 ) len - s , size ) ; <NEW_LINE>
<TAB> <TAB> <TAB> err = synth_devs [ dev ] -> load_patch ( dev , fmt , buf + p , c , 0 ) ; <NEW_LINE>
out_release_nounlock : <NEW_LINE>
<TAB> <NEW_LINE><TAB> if ( n < 0 || n >= 32 ) { <NEW_LINE><TAB> <TAB> return EOF ; <NEW_LINE><TAB> } <NEW_LINE>
( * JSFinalizeCallback ) ( JSFreeOp * fop , JSFinalizeStatus status , JSBool isCompartment ) ; <NEW_LINE>
<TAB> <TAB> return - EINVAL ; <NEW_LINE>
cli_dbgmsg ( "cli_scanxar : % u checksum errors and % u extraction errors . \n" , <NEW_LINE>
virtual void WriteInternal ( const char * aBuffer , uint32_t aCount , DecodeStrategy aStrategy ) ; <NEW_LINE>
<TAB> <TAB> <TAB> struct static_key * once_key ) <NEW_LINE>
<TAB> if ( ! rose_parse_facilities ( skb -> data + ROSE_CALL_REQ_FACILITIES_OFF , <NEW_LINE><TAB> <TAB> <TAB> <TAB> skb -> len - ROSE_CALL_REQ_FACILITIES_OFF , <NEW_LINE><TAB> <TAB> <TAB> <TAB> & facilities ) ) { <NEW_LINE>
<TAB> if ( key_is_positive ( keyring ) ) { <NEW_LINE>
<NEW_LINE>
<TAB> <TAB> <TAB> . proc_handler <TAB> = addrconf_sysctl_mtu , <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "des" ) ; <NEW_LINE>
<TAB> <TAB> <TAB> zend_throw_exception_ex ( phar_ce_PharException , 0 TSRMLS_CC , " % s" , error ) ; <NEW_LINE>
<TAB> state = nfs4_do_open ( dir , & path , fmode , flags , sattr , cred ) ; <NEW_LINE>
<TAB> <TAB> final_p = fl6_update_dst ( & fl6 , rcu_dereference ( np -> opt ) , & final ) ; <NEW_LINE>
if ( * object + size < * object || * object + size > bplist -> offset_table ) { <NEW_LINE>PLIST_BIN_ERR ( " % s : BPLIST_DICT data bytes point outside of valid range\n" , __func__ ) ; <NEW_LINE>
struct key * find_keyring_by_name ( const char * name , bool uid_keyring ) <NEW_LINE>
<TAB> if ( copy_from_user ( & ins , addr , sizeof ( ins ) ) ) <NEW_LINE>
double zero = 0 . 0 ; <NEW_LINE>double nan = zero / zero ; <NEW_LINE>
last mod : $ Id $ <NEW_LINE>
<TAB> <TAB> <TAB> size_t lines , linecnt , bytecnt , bytecnt_max ; <NEW_LINE>
<NEW_LINE>
<TAB> <TAB> <TAB> <TAB> if ( x == 0 ) { <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> ha -> netmask . s_addr = 0 ; <NEW_LINE><TAB> <TAB> <TAB> <TAB> } else { <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> ha -> netmask . s_addr = htonl ( 0xFFFFFFFF << ( 32 - x ) ) ; <NEW_LINE><TAB> <TAB> <TAB> <TAB> } <NEW_LINE>
<NEW_LINE>
#include "compiler / compilerdebug . h" <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "camellia" ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "camellia - asm" ) ;
if ( ( mask & KADM5_POLICY ) && entry -> policy == NULL ) <NEW_LINE>return KADM5_BAD_MASK ; <NEW_LINE>
<TAB> ps -> next_free + + ; <NEW_LINE><TAB> skip_metadata ( ps ) ; <NEW_LINE>
PORT_FreeArena ( poolp , PR_TRUE ) ; <NEW_LINE>return NULL ; <NEW_LINE>
<TAB> <TAB> } else if ( BPF_MODE ( insn -> code ) == BPF_IMM && <NEW_LINE><TAB> <TAB> <TAB> BPF_SIZE ( insn -> code ) == BPF_DW ) { <NEW_LINE><TAB> <TAB> <TAB> <NEW_LINE><TAB> <TAB> <TAB> u64 imm = ( ( u64 ) ( insn + 1 ) -> imm << 32 ) | ( u32 ) insn -> imm ; <NEW_LINE><TAB> <TAB> <TAB> bool map_ptr = insn -> src_reg == BPF_PSEUDO_MAP_FD ; <NEW_LINE><NEW_LINE><TAB> <TAB> <TAB> if ( map_ptr && ! env -> allow_ptr_leaks ) <NEW_LINE><TAB> <TAB> <TAB> <TAB> imm = 0 ; <NEW_LINE><NEW_LINE><TAB> <TAB> <TAB> verbose ( " ( % 02x ) r % d = 0x % llx\n" , insn -> code , <NEW_LINE><TAB> <TAB> <TAB> <TAB> insn -> dst_reg , ( unsigned long long ) imm ) ; <NEW_LINE>
<TAB> perf_sw_event ( PERF_COUNT_SW_ALIGNMENT_FAULTS , 1 , regs , address ) ; <NEW_LINE>
nsSize GetWidthHeightForImage ( nsRefPtr < imgRequestProxy > & aImageRequest ) ; <NEW_LINE>
<NEW_LINE>
<TAB> if ( ! opt ) { <NEW_LINE><TAB> <TAB> opt = txopt_get ( np ) ; <NEW_LINE><TAB> <TAB> opt_to_free = opt ; <NEW_LINE><TAB> <TAB> } <NEW_LINE>
<TAB> for ( cnt = 0 , i = 0 ; i >= 0 && cnt < shdr -> sh_info && ( end - ( char * ) defs > i ) ; + + cnt ) { <NEW_LINE>
for ( plane = 0 ; plane < 4 && frame -> data [ plane ] && frame -> linesize [ plane ] ; plane + + ) { <NEW_LINE>
last mod : $ Id : res0 . c 16552 2009 - 09 - 12 02 : 09 : 04Z xiphmont $
if ( IPV4_GET_IPPROTO ( p ) != proto ) <NEW_LINE>
<TAB> opt = rcu_dereference_protected ( np -> opt , sock_owned_by_user ( sk ) ) ; <NEW_LINE><TAB> final_p = fl6_update_dst ( & fl6 , opt , & final ) ; <NEW_LINE>
_wfopen_s ( & fp , path , L"rb" ) ; <NEW_LINE>
goto err ; <NEW_LINE>
<TAB> <TAB> <TAB> umode_t mode ; <NEW_LINE><NEW_LINE><TAB> <TAB> <TAB> rc = posix_acl_update_mode ( inode , & mode , & acl ) ; <NEW_LINE><TAB> <TAB> <TAB> if ( rc ) <NEW_LINE>
ippSetString ( job -> attrs , & attr , 0 , Classification ) ; <NEW_LINE>
<TAB> <TAB> conn -> m -> local_tx_end ( conn , this_func , result == NULL ? FAIL : PASS TSRMLS_CC ) ; <NEW_LINE>
if ( ! mquant || mquant > 31 || mquant < - 31 ) { \ <NEW_LINE>
<NEW_LINE><TAB> <TAB> if ( ! ipc_rcu_getref ( msq ) ) { <NEW_LINE><TAB> <TAB> <TAB> err = - EIDRM ; <NEW_LINE><TAB> <TAB> <TAB> goto out_unlock_free ; <NEW_LINE><TAB> <TAB> } <NEW_LINE><NEW_LINE>
<TAB> guint32 off = offset , last_off ; <NEW_LINE>
<TAB> int no_tmp_rsa = 0 , no_dhe = 0 , nocert = 0 ; <NEW_LINE>
<NEW_LINE>
void * class_data ; <NEW_LINE>enum usb_conv_class_data_type class_data_type ; <NEW_LINE>
char * certUsage , PRBool checkSig , PRBool logit , <NEW_LINE>PRBool ascii , secuPWData * pwdata ) <NEW_LINE>
<TAB> mutex_unlock ( & dev -> lock ) ; <NEW_LINE>
<TAB> struct mb2_cache * ext4_mb_cache = EXT4_GET_MB_CACHE ( inode ) ; <NEW_LINE>
crm_recv_remote_msg ( connection -> session , & connection -> recv_buf , connection -> encrypted , - 1 , & disconnected ) ; <NEW_LINE><NEW_LINE>if ( disconnected ) { <NEW_LINE>rc = - ENOTCONN ; <NEW_LINE> } <NEW_LINE><NEW_LINE>answer = crm_parse_remote_buffer ( & connection -> recv_buf ) ; <NEW_LINE><NEW_LINE>
<TAB> const char * response = "401 Unauthorized" ; <NEW_LINE><TAB> const char * reqheader = "Authorization" ; <NEW_LINE><TAB> const char * respheader = "WWW - Authenticate" ; <NEW_LINE>
#endif <NEW_LINE>
protected : <NEW_LINE>friend class AudioClock ; <NEW_LINE><NEW_LINE><NEW_LINE><NEW_LINE>int64_t GetPositionInFramesUnlocked ( ) ; <NEW_LINE><NEW_LINE>
<TAB> I ( SrcMem | ByteOp , em_clflush ) , N , N , N , <NEW_LINE>
last mod : $ Id : ogg . h 17098 2010 - 03 - 29 05 : 35 : 11Z gmaxwell $ <NEW_LINE>
static bool new_idmap_permitted ( const struct file * file , <NEW_LINE><TAB> <TAB> <TAB> <TAB> struct user_namespace * ns , int cap_setid , <NEW_LINE>
for ( i = 0 ; i < 4 && out -> data [ i ] && out -> linesize [ i ] ; i + + ) { <NEW_LINE>
static mp_err <NEW_LINE>
<NEW_LINE>
<TAB> pch -> chan_net = get_net ( net ) ; <NEW_LINE>
<TAB> <TAB> mb2_cache_entry_put ( ext4_mb_cache , ce ) ; <NEW_LINE>
<TAB> int rc ; <NEW_LINE><TAB> unsigned long eip ; <NEW_LINE><NEW_LINE><TAB> rc = emulate_pop ( ctxt , & eip , ctxt -> op_bytes ) ; <NEW_LINE><TAB> if ( rc != X86EMUL_CONTINUE ) <NEW_LINE><TAB> <TAB> return rc ; <NEW_LINE><NEW_LINE><TAB> return assign_eip_near ( ctxt , eip ) ; <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "cast6" ) ;
if ( imp_dbh -> pmysql ) <NEW_LINE>do_error ( dbh , mysql_errno ( imp_dbh -> pmysql ) , <NEW_LINE>mysql_error ( imp_dbh -> pmysql ) , mysql_sqlstate ( imp_dbh -> pmysql ) ) ; <NEW_LINE>
MPrepareCall * getPrepareCall ( ) { <NEW_LINE>return getOperand ( PrepareCallOperandIndex ) -> toPrepareCall ( ) ; <NEW_LINE> } <NEW_LINE>
for ( size_t i = 1 , i_end = arr -> Count ( ) ; i < i_end ; + + i ) { <NEW_LINE>
<TAB> <TAB> stat != yajl_status_insufficient_data ) <NEW_LINE>
<TAB> } else if ( ( data [ 0 ] == WHITEHEAT_GET_DTR_RTS ) && <NEW_LINE><TAB> <TAB> ( urb -> actual_length - 1 <= sizeof ( command_info -> result_buffer ) ) ) { <NEW_LINE>
for ( pad = ( w % 4 ) ? ( 4 - w % 4 ) : 0 ; pad > 0 ; pad -- ) <TAB> <NEW_LINE>
<TAB> ext3_msg ( sb , KERN_ERR , "error : failed to open journal device % s : % ld" , <NEW_LINE>
s -> filesize = UINT64_MAX ; <NEW_LINE>
( * respond ) ( arg , EINVAL , NULL , NULL , NULL ) ; <NEW_LINE>
<TAB> . llseek = ftrace_filter_lseek , <NEW_LINE>
if ( ! typeName ) abort ( ) ; <NEW_LINE>
<TAB> <TAB> if ( unlikely ( ret < local_nr_pages ) ) { <NEW_LINE><TAB> <TAB> <TAB> for ( j = cur_page ; j < page_limit ; j + + ) { <NEW_LINE><TAB> <TAB> <TAB> <TAB> if ( ! pages [ j ] ) <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> break ; <NEW_LINE><TAB> <TAB> <TAB> <TAB> put_page ( pages [ j ] ) ; <NEW_LINE><TAB> <TAB> <TAB> } <NEW_LINE>
already_AddRefed < nsIDOMSVGNumber > GetItem ( uint32_t index , <NEW_LINE>ErrorResult & error ) ; <NEW_LINE>already_AddRefed < nsIDOMSVGNumber > IndexedGetter ( uint32_t index , bool & found , <NEW_LINE>ErrorResult & error ) ; <NEW_LINE>
my_snprintf ( query , sizeof ( query ) , "show keys from ` % s`" , table ) ; <NEW_LINE>
<TAB> struct usbdevfs_connectinfo ci ; <NEW_LINE><NEW_LINE><TAB> memset ( & ci , 0 , sizeof ( ci ) ) ; <NEW_LINE><TAB> ci . devnum = ps -> dev -> devnum ; <NEW_LINE><TAB> ci . slow = ps -> dev -> speed == USB_SPEED_LOW ; <NEW_LINE>
<TAB> if ( ! new_idmap_permitted ( file , ns , cap_setid , & new_map ) ) <NEW_LINE>
<TAB> <NEW_LINE><TAB> if ( vfs_select_inode ( old_dentry , 0 ) == vfs_select_inode ( new_dentry , 0 ) ) <NEW_LINE>
<TAB> if ( edit ) { <NEW_LINE><TAB> <TAB> if ( ! edit -> dead_leaf ) { <NEW_LINE><TAB> <TAB> <TAB> key_payload_reserve ( keyring , <NEW_LINE><TAB> <TAB> <TAB> <TAB> keyring -> datalen - KEYQUOTA_LINK_BYTES ) ; <NEW_LINE><TAB> <TAB> } <NEW_LINE>
<NEW_LINE>
bool DummyFramebufferOperation ( const char * info ) ; <NEW_LINE>
<TAB> struct gfn_to_hva_cache vapic_cache ; <NEW_LINE>
<TAB> int count ; <NEW_LINE>
<TAB> <TAB> case 'l' : <NEW_LINE><TAB> <TAB> <TAB> { <NEW_LINE><TAB> <TAB> <TAB> <TAB> RBinObject * obj = r_bin_cur_object ( core -> bin ) ; <NEW_LINE><TAB> <TAB> <TAB> <TAB> RBININFO ( "libs" , R_CORE_BIN_ACC_LIBS , NULL , obj ? r_list_length ( obj -> libs ) : 0 ) ; <NEW_LINE><TAB> <TAB> <TAB> } <NEW_LINE><TAB> <TAB> <TAB> break ; <NEW_LINE>
<TAB> <TAB> <TAB> | FLAG_LINK_INTR | FLAG_WWAN | FLAG_NOARP , <NEW_LINE>
nsCOMPtr < nsIChannel > mChannel ; <NEW_LINE>
<TAB> buff [ MIN ( ( size_t ) r , ( sizeof buff ) - 1 ) ] = '\0' ; <NEW_LINE>
depth , ( i . isIon ( ) ? 0 : i . interpFrame ( ) ) , <NEW_LINE>filename , line , <NEW_LINE>
static int dns_resolver_cmp ( const struct key * key , <NEW_LINE><TAB> <TAB> <TAB> const struct key_match_data * match_data ) <NEW_LINE>
<TAB> int nsems , error ; <NEW_LINE>
<TAB> <TAB> <TAB> if ( ! iov_iter_count ( from ) ) <NEW_LINE>
<TAB> <TAB> int count , int pmgr_flag ) <NEW_LINE>
<TAB> if ( ( fd = xfmkstemp ( & tmpname , " / etc" , " . vipw" ) ) == NULL ) { <NEW_LINE>
if ( in_bio != NULL ) { <NEW_LINE>
} else if ( s -> bit_depth == 1 && s -> bits_per_pixel == 1 ) { <NEW_LINE>
eWOFF_warn_no_such_table = 0x4000 <NEW_LINE>
<NEW_LINE>static already_AddRefed < nsTimerImpl > PostTimerEvent ( <NEW_LINE>already_AddRefed < nsTimerImpl > aTimerRef ) ; <NEW_LINE>
<TAB> <TAB> if ( mnt -> mnt . mnt_flags & MNT_UMOUNT ) { <NEW_LINE><TAB> <TAB> <TAB> struct mount * p , * tmp ; <NEW_LINE><TAB> <TAB> <TAB> list_for_each_entry_safe ( p , tmp , & mnt -> mnt_mounts , mnt_child ) { <NEW_LINE><TAB> <TAB> <TAB> <TAB> hlist_add_head ( & p -> mnt_umount . s_list , & unmounted ) ; <NEW_LINE><TAB> <TAB> <TAB> <TAB> umount_mnt ( p ) ; <NEW_LINE><TAB> <TAB> <TAB> } <NEW_LINE><TAB> <TAB> } <NEW_LINE><TAB> <TAB> else umount_tree ( mnt , 0 ) ; <NEW_LINE>
XDRAtoms * atoms ; <NEW_LINE>XDRAtomsHashMap * atomsMap ; <NEW_LINE>
<TAB> return nf_generic_should_process ( nf_ct_protonum ( ct ) ) ; <NEW_LINE>
<TAB> cdf_secid_t maxsector = ( cdf_secid_t ) ( ( sat -> sat_len * size ) <NEW_LINE><TAB> / sizeof ( maxsector ) ) ; <NEW_LINE>
extern void ssl3_SetSIDSessionTicket ( sslSessionID * sid , <NEW_LINE><TAB> <TAB> <TAB> NewSessionTicket * session_ticket , <NEW_LINE><TAB> <TAB> <TAB> PRBool isTicketRenewal ) ; <NEW_LINE>
<TAB> <TAB> <TAB> struct reloc_struct_t * got_table = calloc ( <NEW_LINE><TAB> <TAB> <TAB> <TAB> 1 , n_got * sizeof ( struct reloc_struct_t ) ) ; <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "sha1" ) ; <NEW_LINE>
<TAB> if ( offset != 0 ) { <NEW_LINE><TAB> <TAB> int tend_off = skb_transport_offset ( skb ) + tlen ; <NEW_LINE><TAB> <TAB> csum = csum_sub ( csum , skb_checksum ( skb , tend_off , offset , 0 ) ) ; <NEW_LINE><TAB> } <NEW_LINE>
#include "compiler / compilerdebug . h" <NEW_LINE>
<TAB> strncpy ( rhash . type , "shash" , sizeof ( rhash . type ) ) ; <NEW_LINE><NEW_LINE>
nsTArray < nsRefPtr < WebGLShader > > mAttachedShaders ; <NEW_LINE>
<TAB> php_stat ( filename , filename_len , funcnum , return_value ) ; \ <NEW_LINE>
my_snprintf ( query , sizeof ( query ) , "SELECT COUNT ( * ) FROM ` % s`" , <NEW_LINE>row [ 0 ] ) ; <NEW_LINE>
} ; <NEW_LINE>
<TAB> * tp = ns_to_timespec ( nsec ) ; <NEW_LINE><TAB> tp -> tv_sec += sgi_clock_offset . tv_sec ; <NEW_LINE>
<TAB> if ( ! opt ) { <NEW_LINE><TAB> <TAB> opt = txopt_get ( np ) ; <NEW_LINE><TAB> <TAB> opt_to_free = opt ; <NEW_LINE><TAB> } <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> <TAB> <TAB> fname_len = strlen ( fname ) ; <NEW_LINE>
last mod : $ Id $ <NEW_LINE>
virtual nsresult OpenContentStream ( PRBool async , nsIInputStream ** result , <NEW_LINE>nsIChannel ** channel ) ; <NEW_LINE>
void SetDocShell ( nsIDocShell * aDocShell ) ; <NEW_LINE>void Invalidate ( ) ; <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> g_free ( compr ) ; <NEW_LINE>
if ( cb_ret < 0 ) <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "xtea" ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "xeta" ) ; <NEW_LINE>
if ( offset + size > buf_offset + eocd_offset ) { <NEW_LINE><TAB> <NEW_LINE><TAB> zip_error_set ( error , ZIP_ER_INCONS , 0 ) ; <NEW_LINE><TAB> return NULL ; <NEW_LINE> } <NEW_LINE>if ( ( flags & ZIP_CHECKCONS ) && offset + size != buf_offset + eocd_offset ) { <NEW_LINE>
extern int setpwnam ( struct passwd * pwd , const char * prefix ) ; <NEW_LINE><NEW_LINE>#endif
<TAB> for ( cnt = 0 , i = 0 ; i >= 0 && cnt < shdr -> sh_info && ( ( char * ) defs + i < end ) ; + + cnt ) { <NEW_LINE>
<NEW_LINE>
<TAB> dh = skb_header_pointer ( skb , dataoff , sizeof ( _dh ) , & _dh ) ; <NEW_LINE>
<TAB> <TAB> <TAB> if ( npix >= ( stack_top - stackp ) ) { <NEW_LINE><TAB> <TAB> <TAB> <TAB> WritePixels ( i , & context , stackp , stack_top - stackp ) ; <TAB> <NEW_LINE><TAB> <TAB> <TAB> } else if ( npix > 0 ) { <TAB> <NEW_LINE><TAB> <TAB> <TAB> <TAB> WritePixels ( i , & context , stackp , npix ) ; <NEW_LINE><TAB> <TAB> <TAB> } <NEW_LINE>
label -> setText ( tr ( "Are you sure you want to delete ' % 1' from the transfer list ? " , "Are you sure you want to delete 'ubuntu - linux - iso' from the transfer list ? " ) . arg ( Utils : : String : : toHtmlEscaped ( name ) ) ) ; <NEW_LINE>
for ( i = 0 ; i <= w - ( int ) sizeof ( long ) ; i += sizeof ( long ) ) { <NEW_LINE>
<TAB> while ( entry -> nr < PERF_MAX_STACK_DEPTH ) { <NEW_LINE>
<TAB> <TAB> i , JAS_CAST ( unsigned , JPC_QCX_GETEXPN ( qcd -> compparms . stepsizes [ i ] ) ) , <NEW_LINE><TAB> <TAB> i , JAS_CAST ( unsigned , JPC_QCX_GETMANT ( qcd -> compparms . stepsizes [ i ] ) ) ) ; <NEW_LINE>
<TAB> <TAB> <TAB> netdev_err ( vif -> dev , "Missing extra info\n" ) ; <NEW_LINE><TAB> <TAB> <TAB> netbk_fatal_tx_err ( vif ) ; <NEW_LINE>
d . lengthAndFlags = buildLengthAndFlags ( length ( ) , NON_STATIC_ATOM_FLAGS ) ; <NEW_LINE>
<TAB> <TAB> pfn = kvm_pin_pages ( slot , gfn , page_size >> PAGE_SHIFT ) ; <NEW_LINE>
<TAB> <TAB> <TAB> count += 2 ; <NEW_LINE><TAB> <TAB> <TAB> bufLen -= 2 ; <NEW_LINE>
gint bits_to_handle = remaining_bits_len + ( bit_offset % 8 ) ; <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> <NEW_LINE>
<TAB> <TAB> name_rmt -> valuelen = cpu_to_be32 ( args -> rmtvaluelen ) ; <NEW_LINE>
if ( ! nblocks || nblocks > INT_MAX / 2 / sizeof ( * s -> decoded_buffer ) - 8 ) { <NEW_LINE>
mark_desktop_file_executable ( job , <NEW_LINE>job -> cancellable , <NEW_LINE>dest , <NEW_LINE>FALSE ) ; <NEW_LINE>
TypedArrayObjectStorage ( JSObject * obj ) : mObj ( obj ) <NEW_LINE>
<TAB> goto loser ; <NEW_LINE>
static int ocfs2_dio_wr_get_block ( struct inode * inode , sector_t iblock , <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> p = cmd [ 0 ] ? find_eoq ( cmd + 1 ) : NULL ; <NEW_LINE>
<TAB> nfs4_close_sync ( path , state , fmode & ( FMODE_READ|FMODE_WRITE ) ) ; <NEW_LINE>
<TAB> BUG_ON ( ! static_key_enabled ( work -> key ) ) ; <NEW_LINE><TAB> static_key_slow_dec ( work -> key ) ; <NEW_LINE>
<TAB> <TAB> <TAB> if ( hlist_bl_unhashed ( & ce -> e_hash_list ) ) { <NEW_LINE><TAB> <TAB> <TAB> <TAB> mb2_cache_entry_put ( ext2_mb_cache , ce ) ; <NEW_LINE><TAB> <TAB> <TAB> <TAB> unlock_buffer ( bh ) ; <NEW_LINE><TAB> <TAB> <TAB> <TAB> brelse ( bh ) ; <NEW_LINE><TAB> <TAB> <TAB> <TAB> goto again ; <NEW_LINE><TAB> <TAB> <TAB> } else if ( le32_to_cpu ( HDR ( bh ) -> h_refcount ) > <NEW_LINE>
static int fit_line ( lsfit_acc * a , int fits , int * y0 , int * y1 ) { <NEW_LINE>
<TAB> vdev -> ctx = kcalloc ( nvec , sizeof ( struct vfio_pci_irq_ctx ) , GFP_KERNEL ) ; <NEW_LINE>
<TAB> if ( <NEW_LINE><TAB> <TAB> <TAB> ( image -> numcomps < 4 ) <NEW_LINE><TAB> <TAB> || ( image -> comps [ 0 ] . dx != image -> comps [ 1 ] . dx ) || ( image -> comps [ 0 ] . dx != image -> comps [ 2 ] . dx ) || ( image -> comps [ 0 ] . dx != image -> comps [ 3 ] . dx ) <NEW_LINE><TAB> <TAB> || ( image -> comps [ 0 ] . dy != image -> comps [ 1 ] . dy ) || ( image -> comps [ 0 ] . dy != image -> comps [ 2 ] . dy ) || ( image -> comps [ 0 ] . dy != image -> comps [ 3 ] . dy ) <NEW_LINE><TAB> <TAB> <TAB> ) { <NEW_LINE><TAB> <TAB> fprintf ( stderr , " % s : % d : color_cmyk_to_rgb\n\tCAN NOT CONVERT\n" , __FILE__ , __LINE__ ) ; <NEW_LINE><TAB> <TAB> return ; <NEW_LINE><TAB> } <NEW_LINE>
<TAB> cl_cURLLib = Cvar_Get ( "cl_cURLLib" , DEFAULT_CURL_LIB , CVAR_ARCHIVE | CVAR_PROTECTED ) ; <NEW_LINE>
return ret ; <NEW_LINE>
<TAB> <TAB> ERR ( "Ipv6 socket open failed" ) ; <NEW_LINE>
typedef js : : HashMap < JSObject * , Value , DefaultHasher < JSObject * > , RuntimeAllocPolicy > <NEW_LINE>ObjectValueMap ; <NEW_LINE>
memset ( str , 0 , MAX_APN_LENGTH + 1 ) ; <NEW_LINE>
successors_ = js_pod_calloc < uint32_t > ( numSuccessors ) ; <NEW_LINE>
<TAB> <NEW_LINE><TAB> if ( config . mpol ) { <NEW_LINE><TAB> <TAB> mpol_put ( sbinfo -> mpol ) ; <NEW_LINE><TAB> <TAB> sbinfo -> mpol = config . mpol ; <TAB> <NEW_LINE><TAB> } <NEW_LINE>
<TAB> <TAB> if ( ! mp -> ports && ! mp -> mglist && mp -> timer_armed && <NEW_LINE>
<TAB> if ( rs -> rs_bound_addr == 0 || ! rs -> rs_transport ) { <NEW_LINE>
<TAB> if ( ! EXT4_SB ( sb ) -> s_journal ) <NEW_LINE>
<TAB> if ( cluster != fs -> clusters + 1 ) <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> zend_throw_exception_ex ( phar_ce_PharException , 0 TSRMLS_CC , " % s" , error ) ; <NEW_LINE>
<TAB> <TAB> while ( f && f != upto ) ; <NEW_LINE>
<TAB> ( 1u << NM_VECTOR ) | ( 1u << DB_VECTOR ) | ( 1u << AC_VECTOR ) ; <NEW_LINE>
<TAB> <TAB> <NEW_LINE><TAB> <TAB> decryption_failed_or_bad_record_mac = 1 ; <NEW_LINE>
int i , hasAdditionalBlocks , <NEW_LINE>
<TAB> . match_preparse <TAB> = dns_resolver_match_preparse , <NEW_LINE>
<TAB> <TAB> if ( jas_stream_copy ( out , tmpstream , box -> len - <NEW_LINE><TAB> <TAB> JP2_BOX_HDRLEN ( false ) ) ) { <NEW_LINE><TAB> <TAB> <TAB> jas_eprintf ( "cannot copy box data\n" ) ; <NEW_LINE>
if ( num < 0 || num >= 256 ) return ONIGERR_TOO_BIG_NUMBER ; <NEW_LINE>
<TAB> <TAB> uint <TAB> dblocks = xfs_attr3_rmt_blocks ( mp , valuelen ) ; <NEW_LINE>
<TAB> if ( ! err ) { <NEW_LINE><TAB> <TAB> bh = head ; <NEW_LINE><TAB> <TAB> do { <NEW_LINE><TAB> <TAB> <TAB> if ( buffer_new ( bh ) ) <NEW_LINE><TAB> <TAB> <TAB> <TAB> clear_buffer_new ( bh ) ; <NEW_LINE><TAB> <TAB> } while ( ( bh = bh -> b_this_page ) != head ) ; <NEW_LINE><TAB> <TAB> return 0 ; <NEW_LINE><TAB> } <NEW_LINE>
<TAB> if ( perf_event_overflow ( event , & data , & regs ) ) <NEW_LINE>
SH_DEPENDENCY_GRAPH = 0x0400 , <NEW_LINE><NEW_LINE><NEW_LINE>SH_ENFORCE_PACKING_RESTRICTIONS = 0x0800 , <NEW_LINE>
<TAB> if ( serial -> port [ 0 ] && serial -> port [ 0 ] == usbcons_info . port ) { <NEW_LINE>
<TAB> <TAB> if ( len > 1 ) { <NEW_LINE><TAB> <TAB> <TAB> if ( data [ 1 ] <= 127 ) { <NEW_LINE><TAB> <TAB> <TAB> <TAB> op -> jump = addr + data [ 1 ] + op -> size ; <NEW_LINE><TAB> <TAB> <TAB> } else { <NEW_LINE><TAB> <TAB> <TAB> <TAB> op -> jump = addr - ( 256 - data [ 1 ] ) + op -> size ; <NEW_LINE><TAB> <TAB> <TAB> } <NEW_LINE><TAB> <TAB> } else { <NEW_LINE><TAB> <TAB> <TAB> op -> jump = addr ; <NEW_LINE><TAB> <TAB> } <NEW_LINE>
int64_t hours , minutes , seconds ; <NEW_LINE>
<NEW_LINE>
<TAB> <TAB> case 'i' : { <NEW_LINE><TAB> <TAB> <TAB> <TAB> RBinObject * obj = r_bin_cur_object ( core -> bin ) ; <NEW_LINE><TAB> <TAB> <TAB> <TAB> RBININFO ( "imports" , R_CORE_BIN_ACC_IMPORTS , NULL , <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> <TAB> obj ? r_list_length ( obj -> imports ) : 0 ) ; <NEW_LINE><TAB> <TAB> <TAB> } <NEW_LINE><TAB> <TAB> <TAB> break ; <NEW_LINE>
last mod : $ Id $ <NEW_LINE>
i = 0 ; <NEW_LINE>darray_foreach ( alias , info -> aliases ) { <NEW_LINE>if ( alias -> real != XKB_ATOM_NONE ) { <NEW_LINE>key_aliases [ i ] . alias = alias -> alias ; <NEW_LINE>key_aliases [ i ] . real = alias -> real ; <NEW_LINE>i + + ; <NEW_LINE> } <NEW_LINE>
<TAB> int pktsz , ret ; <NEW_LINE>
<TAB> dl = kzalloc ( size , GFP_KERNEL ) ; <NEW_LINE>
nsresult InstallImplementation ( nsXBLPrototypeBinding * aPrototypeBinding , nsXBLBinding * aBinding ) ; <NEW_LINE>
<NEW_LINE><NEW_LINE><NEW_LINE><NEW_LINE><NEW_LINE><NEW_LINE>nsresult Redirect ( nsIChannel * newChannel , PRUint32 redirectFlags , <NEW_LINE>PRBool openNewChannel ) ; <NEW_LINE>
<TAB> if ( sid -> cached == never_cached ) { <NEW_LINE><TAB> <TAB> ( * ss -> sec . cache ) ( sid ) ; <NEW_LINE><TAB> } <NEW_LINE>
my_snprintf ( query , sizeof ( query ) , "select count ( * ) from ` % s`" , table ) ; <NEW_LINE>
ModuleEntry ( JSContext * cx ) : mozilla : : Module ( ) , obj ( cx ) , thisObjectKey ( cx ) { <NEW_LINE>
<TAB> <NEW_LINE><TAB> len = strlen ( " / lxc / lock / " ) + strlen ( n ) + strlen ( p ) + 3 ; <NEW_LINE>
WCHAR path [ MAX_PATH + sizeof ( "sensor . dll" ) ] ; <NEW_LINE>if ( GetSystemDirectoryW ( path , MAX_PATH ) ) { <NEW_LINE>wcscat ( path , L"sensor . dll" ) ; <NEW_LINE>mLibrary = LoadLibraryW ( path ) ; <NEW_LINE> } <NEW_LINE>
<TAB> if ( ! ( flag & EXT4_GET_BLOCKS_PRE_IO ) ) <NEW_LINE>
<NEW_LINE>
CHECK_PIXEL_PTR ( byte_run * 2 ) ; <NEW_LINE>
vorbis_analysis_buffer ( v , ci -> blocksizes [ 1 ] * 3 ) ; <NEW_LINE>
if ( disconnected ) { <NEW_LINE>crm_err ( "Disconnected while waiting for reply . " ) ; <NEW_LINE>return - ENOTCONN ; <NEW_LINE> } else if ( op_reply == NULL ) { <NEW_LINE>
<NEW_LINE>bool mDroppedDown ; <NEW_LINE><NEW_LINE>bool mInRedisplayText ; <NEW_LINE><NEW_LINE>bool mDelayedShowDropDown ; <NEW_LINE><NEW_LINE>
#include "base / utils / string . h" <NEW_LINE>#include "guiiconprovider . h" <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "ghash" ) ;
typedef signed char int8_t ; <NEW_LINE>
<NEW_LINE>
sendNewSessionTicket = <NEW_LINE>ssl3_ExtensionNegotiated ( ss , ssl_session_ticket_xtn ) && <NEW_LINE> ( sid == NULL <NEW_LINE>#ifndef NSS_SSL_NO_TEST_ONLY_FUNCTIONALITY <NEW_LINE> || ss -> opt . serverRefreshSessionTicketDuringResume <NEW_LINE>#endif <NEW_LINE> ) ; <NEW_LINE>if ( sendNewSessionTicket ) { <NEW_LINE>
char lbase [ 512 ] ; <NEW_LINE>char strbase [ 512 ] ; <NEW_LINE>char ltest [ 512 ] ; <NEW_LINE>char strtest [ 512 ] ; <NEW_LINE>
NS_ENSURE_TRUE ( offset < aBufLength , NS_ERROR_GFX_CMAP_MALFORMED ) ; <NEW_LINE>
<TAB> <TAB> if ( can_open_cached ( data -> state , data -> o_arg . fmode , data -> o_arg . open_flags ) ) <NEW_LINE>
gss_release_buffer ( & minor_stat , & client_name ) ; <NEW_LINE>gss_release_buffer ( & minor_stat , & service_name ) ; <NEW_LINE>
} JSVAL_ALIGNMENT jsval_layout ; <NEW_LINE>
<TAB> <TAB> ret = ext4_convert_unwritten_extents_endio ( handle , inode , map , <NEW_LINE>
<NEW_LINE>
<NEW_LINE><TAB> down_read ( & vcpu -> kvm -> slots_lock ) ; <NEW_LINE><TAB> if ( gfn_to_memslot ( vcpu -> kvm , sregs -> cr3 >> PAGE_SHIFT ) ) <NEW_LINE><TAB> <TAB> vcpu -> arch . cr3 = sregs -> cr3 ; <NEW_LINE><TAB> else <NEW_LINE><TAB> <TAB> set_bit ( KVM_REQ_TRIPLE_FAULT , & vcpu -> requests ) ; <NEW_LINE><TAB> up_read ( & vcpu -> kvm -> slots_lock ) ; <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> for ( cp = cname ; cp < nbuf + size && * cp <NEW_LINE><TAB> <TAB> <TAB> <TAB> && isprint ( * cp ) ; cp + + ) <NEW_LINE>
tp -> tm_yday = ( leapYear ( tp -> tm_year + 1900 ) ? <NEW_LINE>leapMonthStart [ tp -> tm_mon ] : normalMonthStart [ tp -> tm_mon ] ) + tp -> tm_mday - 1 ; <NEW_LINE>
struct dump_dir * dd = NULL ; <NEW_LINE><NEW_LINE>if ( g_settings_privatereports ) <NEW_LINE>dd = create_dump_dir_from_problem_data_ext ( pd , g_settings_dump_location , 0 ) ; <NEW_LINE>else <NEW_LINE>dd = create_dump_dir_from_problem_data ( pd , g_settings_dump_location ) ; <NEW_LINE>
<TAB> <TAB> <TAB> umode_t mode ; <NEW_LINE><NEW_LINE><TAB> <TAB> <TAB> error = posix_acl_update_mode ( inode , & mode , & acl ) ; <NEW_LINE><TAB> <TAB> <TAB> if ( error ) { <NEW_LINE><TAB> <TAB> <TAB> <TAB> gossip_err ( " % s : posix_acl_update_mode err : % d\n" , <NEW_LINE>
bool seek ( const Position & pos , const TokenStream & other ) ; <NEW_LINE>
const char * name , int rep_quick , my_bool no_copy_stat ) <NEW_LINE>
len = mutt_b64_decode ( obuf , idata -> buf + 2 , sizeof ( obuf ) ) ; <NEW_LINE>
<TAB> return init_new_context_ldt ( tsk , mm ) ; <NEW_LINE>
<TAB> if ( setpwnam ( pw , " . chsh" ) < 0 ) <NEW_LINE>
#define IPSKB_FORWARDED <TAB> <TAB> BIT ( 0 ) <NEW_LINE>#define IPSKB_XFRM_TUNNEL_SIZE <TAB> BIT ( 1 ) <NEW_LINE>#define IPSKB_XFRM_TRANSFORMED <TAB> BIT ( 2 ) <NEW_LINE>#define IPSKB_FRAG_COMPLETE <TAB> BIT ( 3 ) <NEW_LINE>#define IPSKB_REROUTED <TAB> <TAB> BIT ( 4 ) <NEW_LINE>#define IPSKB_DOREDIRECT <TAB> BIT ( 5 ) <NEW_LINE>
<TAB> <TAB> <TAB> if ( strlen ( location ) < 8 || ( strncasecmp ( location , "http : <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> <TAB> <TAB> strncasecmp ( location , "https : <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> <TAB> <TAB> strncasecmp ( location , "ftp : <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> <TAB> <TAB> strncasecmp ( location , "ftps : <NEW_LINE>
<TAB> size_t fname_len ; <NEW_LINE>
<NEW_LINE>
** i / In - signed / unsigned integer with size 'n' ( default is size of int ) <NEW_LINE> ** cn - sequence of 'n' chars ( from / to a string ) ; when packing , n == 0 means <NEW_LINE>
<NEW_LINE>nsCOMPtr < nsIContent > mLimiter ; <NEW_LINE><NEW_LINE>nsCOMPtr < nsIContent > mAncestorLimiter ; <NEW_LINE><NEW_LINE>
<TAB> struct tcp_sock_t * tcp_socket = NULL , * tcp6_socket = NULL ; <NEW_LINE><TAB> for ( ; ; ) { <NEW_LINE><TAB> <TAB> tcp_socket = tcp_open ( desired_port ) ; <NEW_LINE><TAB> <TAB> tcp6_socket = tcp6_open ( desired_port ) ; <NEW_LINE><TAB> <TAB> if ( tcp_socket || tcp6_socket || g_options . only_desired_port ) <NEW_LINE><TAB> <TAB> <TAB> break ; <NEW_LINE>
{ <NEW_LINE>
if ( pv -> context == NULL ) <NEW_LINE> { <NEW_LINE>pv -> context = avcodec_alloc_context3 ( codec ) ; <NEW_LINE> } <NEW_LINE>
<NEW_LINE>
if ( temp == - 1 || temp > info -> partvals ) goto eopbreak ; <NEW_LINE>
static inline int assign_eip_far ( struct x86_emulate_ctxt * ctxt , ulong dst , <NEW_LINE><TAB> <TAB> <TAB> int cs_l ) <NEW_LINE>
<TAB> __u8 <TAB> <TAB> remote_tx_win ; <NEW_LINE><TAB> __u8 <TAB> <TAB> remote_max_tx ; <NEW_LINE><TAB> __u16 <TAB> <TAB> retrans_timeout ; <NEW_LINE><TAB> __u16 <TAB> <TAB> monitor_timeout ; <NEW_LINE><TAB> __u16 <TAB> <TAB> max_pdu_size ; <NEW_LINE><NEW_LINE>
inline PRBool EnsureStringLength ( nsAString & aStr , PRUint32 aLen ) <NEW_LINE> { <NEW_LINE>aStr . SetLength ( aLen ) ; <NEW_LINE>return ( aStr . Length ( ) == aLen ) ; <NEW_LINE> } <NEW_LINE><NEW_LINE>inline PRBool EnsureStringLength ( nsACString & aStr , PRUint32 aLen ) <NEW_LINE> { <NEW_LINE>aStr . SetLength ( aLen ) ; <NEW_LINE>return ( aStr . Length ( ) == aLen ) ; <NEW_LINE> } <NEW_LINE><NEW_LINE><NEW_LINE>
<TAB> <TAB> <TAB> AuthCapsInfo & caps_info , CryptoKey & session_key , uint64_t * auid , <NEW_LINE><TAB> <TAB> <TAB> std : : unique_ptr < AuthAuthorizerChallenge > * challenge ) override ; <NEW_LINE>
FreeStmt ( ( ParseCommon * ) append ) ; <NEW_LINE>
#include "compiler / compilerdebug . h" <NEW_LINE>
<TAB> } else if ( ( data [ 0 ] == WHITEHEAT_GET_DTR_RTS ) && <NEW_LINE><TAB> <TAB> ( urb -> actual_length - 1 <= sizeof ( command_info -> result_buffer ) ) ) { <NEW_LINE>
<TAB> { <TAB> if ( rsrc . type_offset + k * 8 > rsrc . rsrc_len ) <NEW_LINE><TAB> <TAB> { <TAB> psf_log_printf ( psf , "Bad rsrc marker . \n" ) ; <NEW_LINE><TAB> <TAB> <TAB> goto parse_rsrc_fork_cleanup ; <NEW_LINE><TAB> <TAB> <TAB> } ; <NEW_LINE><NEW_LINE><TAB> <TAB> marker = read_rsrc_marker ( & rsrc , rsrc . type_offset + k * 8 ) ; <NEW_LINE>
<TAB> <TAB> if ( indev && indev -> ifa_list ) { <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> <TAB> cp = php_parserr ( cp , end , & answer , DNS_T_ANY , authns != NULL , raw , & retval ) ; <NEW_LINE>
} else if ( size != 0 ) { <NEW_LINE>
<TAB> <TAB> goto have_file ; <NEW_LINE>
MODULE_ALIAS_NETDEV ( "sit0" ) ;
MODULE_ALIAS_CRYPTO ( "deflate" ) ;
MODULE_ALIAS_CRYPTO ( "ghash" ) ; <NEW_LINE>
<TAB> <TAB> <TAB> ext2_xattr_cache_insert ( ext2_mb_cache , new_bh ) ; <NEW_LINE>
TypedOrValueRegister output , bool monitoredResult , <NEW_LINE>bool allowDoubleResult ) ; <NEW_LINE>
<TAB> <TAB> if ( uru ) { <NEW_LINE><TAB> <TAB> <TAB> <NEW_LINE><TAB> <TAB> <TAB> if ( COMPAT_USE_64BIT_TIME ) <NEW_LINE><TAB> <TAB> <TAB> <TAB> err = copy_to_user ( uru , & ru , sizeof ( ru ) ) ; <NEW_LINE><TAB> <TAB> <TAB> else <NEW_LINE><TAB> <TAB> <TAB> <TAB> err = put_compat_rusage ( & ru , uru ) ; <NEW_LINE><TAB> <TAB> <TAB> if ( err ) <NEW_LINE><TAB> <TAB> <TAB> <TAB> return - EFAULT ; <NEW_LINE><TAB> <TAB> } <NEW_LINE>
<TAB> if ( ( ! cpu_has_feature ( CPU_FTR_TM ) ) || ( tsk != current ) ) <NEW_LINE>
if ( p_chk -> common . i_chunk_size > sizeof ( BITMAPINFOHEADER ) ) <NEW_LINE>
already_AddRefed < nsIDOMSVGLength > GetItem ( uint32_t index , <NEW_LINE>ErrorResult & error ) ; <NEW_LINE>already_AddRefed < nsIDOMSVGLength > IndexedGetter ( uint32_t index , bool & found , <NEW_LINE>ErrorResult & error ) ; <NEW_LINE>
<TAB> <TAB> perf_event_ctx_unlock ( group_leader , gctx ) ; <NEW_LINE>
<NEW_LINE><TAB> spin_lock ( & po -> bind_lock ) ; <NEW_LINE><TAB> if ( po -> running && <NEW_LINE><TAB> match -> type == type && <NEW_LINE>
<TAB> perf_sw_event ( PERF_COUNT_SW_ALIGNMENT_FAULTS , 1 , regs , address ) ; <NEW_LINE>
<NEW_LINE>
<TAB> if ( ! ipc_rcu_getref ( sma ) ) { <NEW_LINE><TAB> <TAB> rcu_read_unlock ( ) ; <NEW_LINE><TAB> <TAB> un = ERR_PTR ( - EIDRM ) ; <NEW_LINE><TAB> <TAB> goto out ; <NEW_LINE><TAB> } <NEW_LINE>
<TAB> <TAB> zend_throw_exception_ex ( phar_ce_PharException , 0 TSRMLS_CC , " % s" , error ) ; <NEW_LINE>
nsSize GetWidthHeightForImage ( nsRefPtr < imgRequestProxy > & aImageRequest ) ; <NEW_LINE>
<TAB> <TAB> <TAB> if ( conn_opt -> val != NULL && conn_opt -> val [ 0 ] != '\0' && <NEW_LINE><TAB> <TAB> <TAB> <TAB> strcmp ( conn_opt -> keyword , "dbname" ) != 0 ) <NEW_LINE>
if ( ( ret = xd3_read_uint32_t ( stream , & inp , max , & rval ) ) != <NEW_LINE>
<TAB> int32_t offset = 0 , noffset = 0 ; <NEW_LINE>
nsresult BuildURIfromBase ( const char * aURL , nsIURI ** aBuiltURI , <NEW_LINE>JSContext ** aCXused ) ; <NEW_LINE>
<TAB> if ( ( unsigned long ) len > ( unsigned long ) count ) <NEW_LINE>
<TAB> err = scm_send ( sock , msg , siocb -> scm , true ) ; <NEW_LINE>
<TAB> struct mutex lock ; <NEW_LINE>
<NEW_LINE><NEW_LINE>
<TAB> <TAB> struct floppy_raw_cmd cmd = * ptr ; <NEW_LINE><TAB> <TAB> cmd . next = NULL ; <NEW_LINE><TAB> <TAB> cmd . kernel_data = NULL ; <NEW_LINE><TAB> <TAB> ret = copy_to_user ( param , & cmd , sizeof ( cmd ) ) ; <NEW_LINE>
if ( diffs != 0 ) <NEW_LINE>
<NEW_LINE>
<TAB> <TAB> <TAB> if ( ( to - needle ) > 5 + rc ) { <NEW_LINE><TAB> <TAB> <TAB> <TAB> bool is_wide32 = ( needle + rc + 2 < to ) && ( ! w [ 0 ] && ! w [ 1 ] && ! w [ 2 ] && w [ 3 ] && ! w [ 4 ] ) ; <NEW_LINE>
<TAB> ret = xt_compat_check_entry_offsets ( e , e -> elems , e -> target_offset , <NEW_LINE>
bool ImplSplit ( sal_uInt16 nPos , sal_uInt16 nSpace , ImplPolygon const * pInitPoly = nullptr ) ; <NEW_LINE>
quantum_info = AcquireQuantumInfo ( image_info , next_image ) ; <NEW_LINE>
<TAB> <TAB> if ( info . tcpv_rttcnt > 0 ) { <NEW_LINE><TAB> <TAB> <TAB> u64 t = ca -> sum_rtt ; <NEW_LINE><TAB> <TAB> <TAB> do_div ( t , info . tcpv_rttcnt ) ; <NEW_LINE><TAB> <TAB> <TAB> info . tcpv_rtt = t ; <NEW_LINE><TAB> <TAB> } <NEW_LINE>
<TAB> blkcnt = xfs_attr3_rmt_blocks ( mp , args -> rmtvaluelen ) ; <NEW_LINE>
<TAB> <TAB> if ( boot_cpu_data . x86_model == 62 ) <NEW_LINE><TAB> <TAB> <TAB> x86_pmu . extra_regs = intel_snbep_extra_regs ; <NEW_LINE><TAB> <TAB> else <NEW_LINE><TAB> <TAB> <TAB> x86_pmu . extra_regs = intel_snb_extra_regs ; <NEW_LINE>
<TAB> <TAB> <NEW_LINE><TAB> <TAB> if ( test_bit ( KEY_FLAG_INSTANTIATED , & key -> flags ) && <NEW_LINE><TAB> <TAB> ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) && <NEW_LINE><TAB> <TAB> key -> type -> destroy ) <NEW_LINE>
nsrefcnt AddRef ( ) { <NEW_LINE>if ( mRefCnt == PR_UINT32_MAX ) { <NEW_LINE>NS_WARNING ( "refcount overflow , leaking object" ) ; <NEW_LINE>return mRefCnt ; <NEW_LINE> } <NEW_LINE>return + + mRefCnt ; <NEW_LINE> } <NEW_LINE>
int i ; <NEW_LINE>int ubits = BN_num_bits ( u ) ; <NEW_LINE>int vbits = BN_num_bits ( v ) ; <NEW_LINE>int top = p -> top ; <NEW_LINE>
<TAB> if ( ctxt -> rip_relative && likely ( ctxt -> memopp ) ) <NEW_LINE>
<TAB> u32 rem ; <NEW_LINE><TAB> value -> tv_sec = div_u64_rem ( ( u64 ) jiffies * TICK_NSEC , <NEW_LINE><TAB> <TAB> <TAB> <TAB> NSEC_PER_SEC , & rem ) ; <NEW_LINE><TAB> value -> tv_nsec = rem ; <NEW_LINE>
<TAB> atomic_t refcount ; <NEW_LINE>
<TAB> kenter ( " % % % d , % s , ' % * . * s' , % zu" , <NEW_LINE><TAB> key -> serial , key -> description , <NEW_LINE><TAB> ( int ) datalen , ( int ) datalen , data , datalen ) ; <NEW_LINE>
static void print_bpf_insn ( const struct bpf_verifier_env * env , <NEW_LINE><TAB> <TAB> <TAB> const struct bpf_insn * insn ) <NEW_LINE>
<TAB> for ( i = scm -> fp -> count - 1 ; i >= 0 ; i -- ) <NEW_LINE><TAB> <TAB> unix_inflight ( scm -> fp -> fp [ i ] ) ; <NEW_LINE>
gdImageDestroy ( tmp_im ) ; <NEW_LINE>
<TAB> <TAB> ret = - EIO ; <NEW_LINE><TAB> <TAB> goto out ; <NEW_LINE>
kFlex1 = ( 12 << 8 ) + 37 <NEW_LINE>
<TAB> if ( cmpxchg ( & inode -> i_crypt_info , NULL , crypt_info ) == NULL ) <NEW_LINE><TAB> <TAB> crypt_info = NULL ; <NEW_LINE>
void nautilus_file_mark_desktop_file_executable ( GFile * file , <NEW_LINE>GtkWindow * parent_window , <NEW_LINE>gboolean interactive , <NEW_LINE>NautilusOpCallback done_callback , <NEW_LINE>gpointer done_callback_data ) ; <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "sha1" ) ;
<TAB> char * data ; <NEW_LINE><NEW_LINE><TAB> data = kmalloc ( 8 , GFP_KERNEL ) ; <NEW_LINE><TAB> if ( ! data ) <NEW_LINE><TAB> <TAB> return - ENOMEM ; <NEW_LINE>
<TAB> <TAB> <TAB> if ( vstart > end || end - vstart < sizeof ( Elf_ ( Verdaux ) ) ) { <NEW_LINE>
avctx -> pix_fmt = s -> has_alpha ? AV_PIX_FMT_YUVA420P : AV_PIX_FMT_YUV420P ; <NEW_LINE>
char * buff ; <NEW_LINE><NEW_LINE>if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { <NEW_LINE>error_line ( " % s is not a valid . W64 file ! " , infilename ) ; <NEW_LINE>return WAVPACK_SOFT_ERROR ; <NEW_LINE> } <NEW_LINE><NEW_LINE>buff = malloc ( bytes_to_copy ) ; <NEW_LINE>
last mod : $ Id $ <NEW_LINE>
<NEW_LINE><NEW_LINE>nsDOMDataTransfer ( uint32_t aEventType , bool aIsExternal , int32_t aClipboardType ) ; <NEW_LINE>
s -> frame -> nb_samples = s -> frames * MPA_FRAME_SIZE ; <NEW_LINE>
if ( aFontData ) { <NEW_LINE>NS_Free ( ( void * ) aFontData ) ; <NEW_LINE> } <NEW_LINE><NEW_LINE>
<TAB> if ( * rsize >= 18 && rdesc [ 11 ] == 0x3c && rdesc [ 12 ] == 0x02 ) { <NEW_LINE>
struct ip_options_rcu { <NEW_LINE><TAB> struct rcu_head rcu ; <NEW_LINE><TAB> struct ip_options opt ; <NEW_LINE> } ; <NEW_LINE><NEW_LINE>struct ip_options_data { <NEW_LINE><TAB> struct ip_options_rcu <TAB> opt ; <NEW_LINE><TAB> char <TAB> <TAB> <TAB> data [ 40 ] ; <NEW_LINE> } ; <NEW_LINE>
if ( ! SSL_READ_ETM ( s ) && EVP_MD_CTX_md ( s -> read_hash ) != NULL ) <NEW_LINE>
<TAB> if ( flags & RR_REGARD_XA ) { <NEW_LINE>
<TAB> dh = skb_header_pointer ( skb , dataoff , sizeof ( _dh ) , & _dh ) ; <NEW_LINE>
<TAB> fmode_t mode ; <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "camellia" ) ;
if ( ctx -> seq == NULL ) { <NEW_LINE><NEW_LINE> * minor_status = 0 ; <NEW_LINE>return GSS_S_DEFECTIVE_TOKEN ; <NEW_LINE> } <NEW_LINE><NEW_LINE>if ( header -> buffer . length < token_wrapper_len + 22 ) { <NEW_LINE>
<TAB> ( unsigned char * ) e + sizeof ( struct ip6t_entry ) >= limit || <NEW_LINE><TAB> ( unsigned char * ) e + e -> next_offset > limit ) { <NEW_LINE>
#include "compiler / compilerdebug . h" <NEW_LINE>
<TAB> static size_t len = 0 ; <NEW_LINE>
<TAB> <TAB> <TAB> return follow_dotdot ( nd ) ; <NEW_LINE>
<TAB> loadsegment ( fs , fs_selector ) ; <NEW_LINE>#ifdef CONFIG_X86_64 <NEW_LINE><TAB> load_gs_index ( gs_selector ) ; <NEW_LINE><TAB> wrmsrl ( MSR_KERNEL_GS_BASE , current -> thread . gs ) ; <NEW_LINE>#else <NEW_LINE><TAB> loadsegment ( gs , gs_selector ) ; <NEW_LINE>#endif <NEW_LINE><TAB> kvm_load_ldt ( ldt_selector ) ; <NEW_LINE>
<TAB> perf_sw_event ( PERF_COUNT_SW_EMULATION_FAULTS , 1 , regs , address ) ; <NEW_LINE>
if ( ctx -> terminated || ! ctx -> established ) { <NEW_LINE>
<TAB> <TAB> <TAB> while ( * tail ) tail = & ( * tail ) -> next ; <NEW_LINE>
<TAB> data = kmemdup ( buf , count , GFP_ATOMIC ) ; <NEW_LINE><TAB> if ( ! data ) <NEW_LINE><TAB> <TAB> return - ENOMEM ; <NEW_LINE><NEW_LINE><TAB> sg_init_one ( sg , data , count ) ; <NEW_LINE><TAB> ret = __send_to_port ( port , sg , 1 , count , data , false ) ; <NEW_LINE><TAB> kfree ( data ) ; <NEW_LINE><TAB> return ret ; <NEW_LINE>
<TAB> ret = count ; <NEW_LINE><NEW_LINE>out : <NEW_LINE><TAB> o2nm_unlock_subsystem ( ) ; <NEW_LINE><TAB> return ret ; <NEW_LINE>
<NEW_LINE>
void ip_options_build ( struct sk_buff * skb , struct ip_options * opt , <NEW_LINE>
int a = getnum ( fmt , MAXALIGN ) ; <NEW_LINE>
if ( ( ret = init_vlc ( & s -> vlc [ i ] , VLC_BITS , 256 , s -> len [ i ] , 1 , 1 , <NEW_LINE>s -> bits [ i ] , 4 , 4 , 0 ) ) < 0 ) <NEW_LINE>return ret ; <NEW_LINE>
NS_CreateJSTimeoutHandler ( nsGlobalWindow * aWindow , <NEW_LINE>
if ( ! opj_j2k_write_sot ( p_j2k , p_data , p_total_data_size , <NEW_LINE> & l_current_nb_bytes_written , p_stream , <NEW_LINE>
static void sample_hbp_handler ( struct perf_event * bp , <NEW_LINE>
last mod : $ Id : bitrate . h 13293 2007 - 07 - 24 00 : 09 : 47Z xiphmont $ <NEW_LINE>
GByteArray * auth_buffer ; <NEW_LINE>
js_InitRandom ( JSContext * cx ) ; <NEW_LINE>
if ( item_num > 65536 || item_num < 0 ) { <NEW_LINE>
if ( ! NOTMIME ( ms ) && root_storage ) <NEW_LINE><TAB> <TAB> str = cdf_clsid_to_mime ( root_storage -> d_storage_uuid , clsid2mime ) ; <NEW_LINE>
nsIIOService * serv , nsIPrincipal * principal , <NEW_LINE>JSObject ** scriptObjp ) ; <NEW_LINE>
<NEW_LINE>
<TAB> unsigned long kflags = READ_ONCE ( key -> flags ) ; <NEW_LINE><TAB> short state = READ_ONCE ( key -> state ) ; <NEW_LINE>
<NEW_LINE>
int ret , last_pwd , n_new_keys ; <NEW_LINE>
FILE_RCSID ( "@ ( # ) $ File : cdf . c , v 1 . 60 2014 / 05 / 21 13 : 04 : 38 christos Exp $ " ) <NEW_LINE>
float amp , float ampoffset ) { <NEW_LINE>
cli_dbgmsg ( "cli_pdf : dumping obj % u % u\n" , obj -> id >> 8 , obj -> id & 0xff ) ; <NEW_LINE>
<TAB> encode_share_access ( xdr , arg -> fmode ) ; <NEW_LINE>
if ( vorbis_synthesis_init ( & fsv -> vd , & fsv -> vi ) != 0 ) <NEW_LINE>return - 1 ; <NEW_LINE><NEW_LINE>if ( vorbis_block_init ( & fsv -> vd , & fsv -> vb ) != 0 ) <NEW_LINE>return - 1 ; <NEW_LINE>
<TAB> __skb_complete_tx_timestamp ( skb , sk , tstype , opt_stats ) ; <NEW_LINE>
<TAB> const uint8_t * bufs [ ARRAY_LEN ( s -> f ) - 1 ] ; <NEW_LINE><TAB> int lengths [ ARRAY_LEN ( s -> f ) - 1 ] ; <NEW_LINE>
lastProp = bindings . callObjectShape ( cx ) ; <NEW_LINE>
JS : : MutableHandle < JSObject * > aObject , <NEW_LINE>JS : : MutableHandle < JSScript * > aTableScript , <NEW_LINE>
<TAB> ( void ) memmove ( cp , cp + 2 , strlen ( cp ) - 1 ) ; <NEW_LINE>
<TAB> <NEW_LINE><NEW_LINE><TAB> if ( a > 1 . ) <NEW_LINE><TAB> <TAB> return 1 . ; <NEW_LINE><TAB> else if ( a >= 0 ) <NEW_LINE><TAB> <TAB> return a ; <NEW_LINE><TAB> else <NEW_LINE><TAB> <TAB> return 0 ; <NEW_LINE>
count = FormatLocaleString ( header , MagickPathExtent , "GAMMA = % g\n" , <NEW_LINE>image -> gamma ) ; <NEW_LINE>
<TAB> spin_lock ( & unix_gc_lock ) ; <NEW_LINE><NEW_LINE>
if ( count != sizeof ( iris_info . filler ) ) <NEW_LINE>ThrowReaderException ( CorruptImageError , "ImproperImageHeader" ) ; <NEW_LINE>
if ( ! send && ! SSL_READ_ETM ( ssl ) && <NEW_LINE>
<TAB> goto out2 ; <NEW_LINE>
<TAB> found = ( unsigned char * ) php_memnstr ( ( char * ) haystack + noffset , ( char * ) needle , needle_len , ( char * ) haystack + haystack_len ) ; <NEW_LINE>
png_charp text = NULL ; <NEW_LINE><NEW_LINE>if ( prefix_size + expanded_size > prefix_size && <NEW_LINE>prefix_size + expanded_size < 0xffffffffU ) <NEW_LINE> { <NEW_LINE>text = png_malloc_warn ( png_ptr , prefix_size + expanded_size + 1 ) ; <NEW_LINE> } <NEW_LINE>
goto err ; <NEW_LINE>
nsIDOMGetUserMediaErrorCallback * onError , <NEW_LINE>uint64_t aInnerWindowID = 0 ) ; <NEW_LINE>
#define DOBIG4 c ^ = * buf4 + + ; \ <NEW_LINE>
if ( sr -> fd_is_fdt == MK_TRUE ) { <NEW_LINE>mk_vhost_close ( sr ) ; <NEW_LINE> } <NEW_LINE>else { <NEW_LINE>close ( sr -> fd_file ) ; <NEW_LINE> } <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "blowfish" ) ;
XPCVariant ( XPCCallContext & ccx , jsval aJSVal ) ; <NEW_LINE>var div = $ ( 'content' ) ; <NEW_LINE>var obj = { } ; <NEW_LINE>div . setUserData ( "foopy" , obj , function ( ) { } ) ; <NEW_LINE>ok ( div . getUserData ( "foopy" ) == = obj , "getUserData works with regular objects" ) ; <NEW_LINE>div . setUserData ( "foopy1" , sidebar , function ( ) { } ) ; <NEW_LINE>ok ( div . getUserData ( "foopy1" ) == = sidebar , "getUserData works with bizarre objects" ) ; <NEW_LINE><NEW_LINE> < / script > <NEW_LINE> < / pre > <NEW_LINE> < / body > <NEW_LINE> < / html >
<TAB> if ( l >= MINIUPNPC_URL_MAXSIZE ) <NEW_LINE><TAB> <TAB> l = MINIUPNPC_URL_MAXSIZE - 1 ; <NEW_LINE><TAB> memcpy ( datas -> cureltname , name , l ) ; <NEW_LINE>
<TAB> const unsigned int blockSize = cipher_def -> block_size ; <NEW_LINE>
<TAB> status = decode_getacl ( xdr , rqstp , res ) ; <NEW_LINE>
<TAB> perf_sw_event ( PERF_COUNT_SW_EMULATION_FAULTS , 1 , regs , 0 ) ; <NEW_LINE>
} else if ( kea_def -> ephemeral ) { <NEW_LINE>rv = ssl3_SendServerKeyExchange ( ss ) ; <NEW_LINE>if ( rv != SECSuccess ) { <NEW_LINE>return rv ; <TAB> <NEW_LINE> } <NEW_LINE>
iakerb_ctx_id_t iakerb_ctx = ( iakerb_ctx_id_t ) * context_handle ; <NEW_LINE>
<TAB> get_key_type ( keyType , valstr , sizeof valstr ) ; <NEW_LINE>
g [ j ] += g [ j ] ; <NEW_LINE>
<TAB> <TAB> r = do_write_pids ( fc -> pid , fc -> uid , f -> controller , f -> cgroup , f -> file , localbuf ) ; <NEW_LINE>
<TAB> <TAB> <TAB> rc = jmp_rel ( ctxt , ctxt -> src . val ) ; <NEW_LINE>
<TAB> <TAB> key_user_put ( key -> user ) ; <NEW_LINE><NEW_LINE>
<TAB> <TAB> <TAB> goto out_bad ; <NEW_LINE>
mutt_bcache_del ( pop_data -> bcache , cache_id ( ctx -> hdrs [ i ] -> data ) ) ; <NEW_LINE>
( do_rf64 && ( ! DoWriteFile ( outfile , & ds64_chunk , sizeof ( ds64_chunk ) , & bcount ) || bcount != sizeof ( ds64_chunk ) ) ) ) { <NEW_LINE>error_line ( "can't write . WAV data , disk probably full ! " ) ; <NEW_LINE>return FALSE ; <NEW_LINE> } <NEW_LINE><NEW_LINE><NEW_LINE><NEW_LINE>while ( table_length -- ) <NEW_LINE>if ( ! DoWriteFile ( outfile , & cs64_chunk , sizeof ( cs64_chunk ) , & bcount ) || bcount != sizeof ( cs64_chunk ) ) { <NEW_LINE>error_line ( "can't write . WAV data , disk probably full ! " ) ; <NEW_LINE>return FALSE ; <NEW_LINE> } <NEW_LINE><NEW_LINE><NEW_LINE>if ( ( write_junk && ( ! DoWriteFile ( outfile , & junkchunk , sizeof ( junkchunk ) , & bcount ) || bcount != sizeof ( junkchunk ) ) ) || <NEW_LINE>
static MagickBooleanType WritePSDImage ( const ImageInfo * image_info , <NEW_LINE>Image * image , ExceptionInfo * exception ) <NEW_LINE>
<TAB> unlock_page ( page ) ; <NEW_LINE>out_release : <NEW_LINE>
if ( ! s -> studio_profile ) <NEW_LINE>ff_er_frame_end ( & s -> er ) ; <NEW_LINE>
<TAB> if ( stringset == ETH_SS_STATS || stringset == ETH_SS_PRIV_FLAGS ) <NEW_LINE>
<TAB> snprintf_func ( rptr , rbuf + TESTBUFSIZE - rptr , " % d / % d" , <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "cast5" ) ;
ippSetString ( job -> attrs , & attr , 0 , con -> username ) ; <NEW_LINE>
<NEW_LINE>
goto err ; <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "twofish" ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "twofish - asm" ) ;
if ( gData -> stateStackTop ) <NEW_LINE> -- gData -> stateStackTop ; <NEW_LINE>
<TAB> snd_pcm_stream_unlock_irqrestore ( substream , flags ) ; <NEW_LINE>
if ( ( s -> version & 0xFF00 ) == ( version & 0xFF00 ) ) <NEW_LINE><TAB> <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> s -> version = ( unsigned short ) version ; <NEW_LINE>
if ( ss -> ssl3 . hs . kea_def -> signKeyType != sign_null ) { <NEW_LINE><NEW_LINE>ss -> ssl3 . hs . ws = wait_server_cert ; <NEW_LINE> } else if ( ss -> ssl3 . hs . kea_def -> ephemeral ) { <NEW_LINE><NEW_LINE>ss -> ssl3 . hs . ws = wait_server_key ; <NEW_LINE> } else { <NEW_LINE>ss -> ssl3 . hs . ws = wait_cert_request ; <NEW_LINE> } <NEW_LINE>
"andw $ 62463 , % % dx\n\t" <NEW_LINE>
nsresult InstallImplementation ( nsXBLBinding * aBinding ) ; <NEW_LINE>
<TAB> size_t bufsize_ ; <NEW_LINE>
for ( plane = 0 ; plane < 4 && in -> data [ plane ] && in -> linesize [ plane ] ; plane + + ) { <NEW_LINE>
** Copyright ( C ) 2002 - 2014 Erik de Castro Lopo < erikd@mega - nerd . com > <NEW_LINE>
ret_value = 0 ; <NEW_LINE>goto to_exit ; <NEW_LINE>
<TAB> <TAB> MAX_PARTS <TAB> = 64 , <NEW_LINE><TAB> <TAB> MAX_SIZE <TAB> = MAX_PARTS * 1024 <NEW_LINE>
<TAB> if ( ! atomic_dec_and_test ( & container_of ( ptr , struct ipc_rcu_hdr , data ) -> refcount ) ) <NEW_LINE>
{ 0xe2985850 , 0x81ca , 0x4b5d , \ <NEW_LINE> { 0xb0 , 0xf3 , 0xe3 , 0x95 , 0xd5 , 0x0d , 0x85 , 0x64 } } <NEW_LINE>
<TAB> if ( shader_rec_offset < args -> bin_cl_size || <NEW_LINE><TAB> uniforms_offset < shader_rec_offset || <NEW_LINE>
last mod : $ Id $ <NEW_LINE>
<TAB> . llseek <TAB> <TAB> = ftrace_filter_lseek , <NEW_LINE>
<TAB> <TAB> <TAB> return false ; <NEW_LINE>
last mod : $ Id $ <NEW_LINE>
<TAB> <TAB> if ( client -> type == USER_CLIENT && client -> data . user . fifo ) <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> <TAB> if ( filter [ i ] . jf && f_offset ) <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> <TAB> t_offset += is_near ( f_offset ) ? 2 : 5 ; <NEW_LINE>
{ 0xd5b1e3c5 , 0x85dc , 0x403e , \ <NEW_LINE> { 0xbb , 0x4a , 0x54 , 0x66 , 0xdc , 0xbe , 0x15 , 0x69 } } <NEW_LINE>
<TAB> take_dentry_name_snapshot ( & old_name , old_dentry ) ; <NEW_LINE>
if ( pos -> prev ) { <NEW_LINE>pos -> prev -> next = edge ; <NEW_LINE>edge -> prev = pos -> prev ; <NEW_LINE>edge -> next = pos ; <NEW_LINE>pos -> prev = edge ; <NEW_LINE> } else { <NEW_LINE><NEW_LINE>pos -> next -> prev = edge ; <NEW_LINE>edge -> next = pos -> next ; <NEW_LINE>edge -> prev = pos ; <NEW_LINE>pos -> next = edge ; <NEW_LINE> } <NEW_LINE>
<TAB> <TAB> st32 vnaux = entry -> vn_aux ; <NEW_LINE><TAB> <TAB> if ( vnaux < 1 ) { <NEW_LINE><TAB> <TAB> <TAB> goto beach ; <NEW_LINE><TAB> <TAB> } <NEW_LINE><TAB> <TAB> vstart += vnaux ; <NEW_LINE>
oggpack_buffer * opb ) { <NEW_LINE>
static bool neuterViews ( JSContext * cx , Handle < ArrayBufferObject * > buffer , void * newData ) ; <NEW_LINE>
<TAB> ret = xt_compat_check_entry_offsets ( e , e -> elems , <NEW_LINE>
SIZED_STRING * s1 , <NEW_LINE>SIZED_STRING * s2 ) ; <NEW_LINE><NEW_LINE><NEW_LINE>SIZED_STRING * sized_string_dup ( <NEW_LINE>SIZED_STRING * s ) ; <NEW_LINE>
<TAB> len = snprintf ( mbox , sizeof ( mbox ) , " % smailboxes " , subscribe ? "" : "un" ) ; <NEW_LINE><TAB> imap_quote_string ( mbox + len , sizeof ( mbox ) - len , path , true ) ; <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "twofish" ) ;
SSL_TRC ( 3 , ( " % d : SSL3 [ % d ] : send session_ticket handshake during % s handshake" , <NEW_LINE><TAB> <TAB> SSL_GETPID ( ) , ss -> fd , <NEW_LINE>ss -> ssl3 . hs . isResuming ? "resumption" : "full" ) ) ; <NEW_LINE>
} <NEW_LINE>
dom : : Uint8ClampedArray * aArray , <NEW_LINE>
<TAB> f = xfmkstemp ( & tmpname , NULL , "test" ) ; <NEW_LINE>
<NEW_LINE>
<TAB> <TAB> <TAB> copy_file ( " / etc / skel / . bashrc" , fname , u , g , 0644 ) ; <NEW_LINE><TAB> <TAB> <TAB> fs_logger ( "clone / etc / skel / . bashrc" ) ; <NEW_LINE>
<TAB> <TAB> size_t tail = ( i << 1 ) + 1 ; <NEW_LINE><TAB> <TAB> if ( cdf_check_stream_offset ( sst , h , p , tail * sizeof ( uint32_t ) , <NEW_LINE><TAB> <TAB> __LINE__ ) == - 1 ) <NEW_LINE><TAB> <TAB> <TAB> goto out ; <NEW_LINE><TAB> <TAB> size_t ofs = CDF_GETUINT32 ( p , tail ) ; <NEW_LINE>
<NEW_LINE><NEW_LINE>if ( ! IndexToId ( cx , i - 1 , & id2 ) ) <NEW_LINE>return JS_FALSE ; <NEW_LINE><NEW_LINE>
protected : <NEW_LINE>friend class AudioClock ; <NEW_LINE><NEW_LINE><NEW_LINE><NEW_LINE>int64_t GetPositionInFramesUnlocked ( ) ; <NEW_LINE><NEW_LINE>
MODULE_ALIAS_CRYPTO ( "sha1" ) ;
<TAB> <TAB> <TAB> <TAB> kzalloc ( 2 * ( length + 1 ) , GFP_KERNEL ) ; <NEW_LINE>
<TAB> valuelen = args -> rmtvaluelen ; <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "ecb ( aes ) " ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "cbc ( aes ) " ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "ctr ( aes ) " ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "xts ( aes ) " ) ; <NEW_LINE>
<TAB> <TAB> conn -> m -> local_tx_end ( conn , this_func , ret TSRMLS_CC ) ; <NEW_LINE>
FILE_RCSID ( "@ ( # ) $ File : cdf . c , v 1 . 55 2014 / 02 / 27 23 : 26 : 17 christos Exp $ " ) <NEW_LINE>
gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; <NEW_LINE>gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER ; <NEW_LINE>
<NEW_LINE><NEW_LINE>void GetAvailableDropdownSpace ( nscoord * aAbove , <NEW_LINE>nscoord * aBelow , <NEW_LINE>nsPoint * aTranslation ) ; <NEW_LINE>
<TAB> <TAB> <TAB> n = dn_expand ( answer -> qb2 , end , cp , name , ( sizeof name ) - 2 ) ; <NEW_LINE>
NODE_NEEDS_FRAME | <NEW_LINE>NODE_CHROME_ONLY_ACCESS ) ) || <NEW_LINE>
unsigned int pixel_limit ; <NEW_LINE>
<TAB> <TAB> <NEW_LINE><TAB> <TAB> <NEW_LINE><TAB> <TAB> goto error ; <NEW_LINE>
static const float vwin256 [ 128 ] = { <NEW_LINE>
prevType ( ) == JitFrame_Unwound_BaselineStub || <NEW_LINE>prevType ( ) == JitFrame_Entry ) ; <NEW_LINE>
void SetNext ( nsTreeColumn * aNext ) { <NEW_LINE>NS_ASSERTION ( ! mNext , "already have a next sibling" ) ; <NEW_LINE>NS_IF_ADDREF ( mNext = aNext ) ; <NEW_LINE> } <NEW_LINE>
<TAB> <TAB> size_t len = strlen ( s1 ) + 1 ; <NEW_LINE><TAB> <TAB> s2 = malloc ( len ) ; <NEW_LINE><TAB> <TAB> memcpy ( s2 , s1 , len ) ; <NEW_LINE>
<NEW_LINE><NEW_LINE><NEW_LINE><NEW_LINE><NEW_LINE>TrackID mInputTrackID ; <NEW_LINE>TrackID mOutputTrackID ; <NEW_LINE>
size_t inliningDepth_ ; <NEW_LINE>
<TAB> <TAB> copy_file_as_user ( src , dest , getuid ( ) , getgid ( ) , 0600 ) ; <NEW_LINE><TAB> <TAB> fs_logger2 ( "clone" , dest ) ; <NEW_LINE>
const float ** * curves , <NEW_LINE>const float * f , <NEW_LINE>const float * flr , <NEW_LINE>float * seed , <NEW_LINE>float specmax ) { <NEW_LINE>
nsAutoTArray < TemplateRule , 10 > mTemplateRules ; <NEW_LINE>
<TAB> <TAB> if ( ( op & ASN1_OP_MATCH__COND && flags & FLAG_MATCHED ) || <NEW_LINE><TAB> <TAB> ( op & ASN1_OP_MATCH__SKIP && dp == datalen ) ) { <NEW_LINE>
already_AddRefed < WebGLUniformLocation > GetUniformLocationObject ( WebGLProgram * prog , GLint glLocation ) ; <NEW_LINE>
int64_t Amount ( ) MOZ_OVERRIDE { return HunspellAllocator : : MemoryAllocated ( ) ; } <NEW_LINE>
int ret = 0 , probe_size , buf_offset = 0 ; <NEW_LINE>
<TAB> <TAB> goto failed_mount_wq ; <NEW_LINE>
<TAB> <TAB> <TAB> list_add_tail ( & phy -> port -> del_list , <NEW_LINE><TAB> <TAB> <TAB> <TAB> & parent -> port -> sas_port_del_list ) ; <NEW_LINE>
last mod : $ Id : backends . h 16552 2009 - 09 - 12 02 : 09 : 04Z xiphmont $ <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> <TAB> goto error ; <NEW_LINE>
CHECK_PRINCIPAL_AND_DATA ( ShouldLoad ) ; <NEW_LINE>
<TAB> err = func ( file , cmd , parg ) ; <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> if ( conn_opt -> val != NULL && conn_opt -> val [ 0 ] != '\0' && <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> strcmp ( conn_opt -> keyword , "dbname" ) != 0 ) <NEW_LINE>
<TAB> <TAB> if ( * vm_flags & ( VM_NOHUGEPAGE | VM_NO_THP ) ) <NEW_LINE>
static void __timerfd_remove_cancel ( struct timerfd_ctx * ctx ) <NEW_LINE>
<TAB> <TAB> mpz_powm_sec ( z , a , m , n ) ; <NEW_LINE>
php_error_docref ( NULL TSRMLS_CC , E_NOTICE , "detect the error eof" ) ; <NEW_LINE>return SW_FALSE ; <NEW_LINE>
#define IW_DEFAULT_MAX_DIMENSION 40000 <NEW_LINE>#define IW_DEFAULT_MAX_MALLOC 2000000000 <NEW_LINE>
<TAB> <TAB> fn = NULL ; <NEW_LINE>
<TAB> if ( context && <NEW_LINE>
<TAB> if ( * rsize >= 112 && rdesc [ 104 ] == 0x26 && rdesc [ 105 ] == 0x80 && <NEW_LINE>
<TAB> assert ( plen <= * len && plen > 0 ) ; <NEW_LINE>
<TAB> struct ip_options_rcu * inet_opt ; <NEW_LINE>
<TAB> <TAB> + cnt * sizeof ( struct posix_user_ace_state ) ; <NEW_LINE>
<TAB> <TAB> <TAB> if ( rt_can_ecmp && <NEW_LINE><TAB> <TAB> <TAB> rt6_qualify_for_ecmp ( iter ) ) <NEW_LINE>
<TAB> mutex_unlock ( & dev -> lock ) ; <NEW_LINE>
FILE_RCSID ( "@ ( # ) $ File : cdf . c , v 1 . 62 2014 / 06 / 04 17 : 26 : 07 christos Exp $ " ) <NEW_LINE>
<TAB> if ( ptr -> version ) <NEW_LINE>
ippSetString ( job -> attrs , & jformat , 0 , mimetype ) ; <NEW_LINE>
<TAB> if ( ! opt ) { <NEW_LINE><TAB> <TAB> opt = txopt_get ( np ) ; <NEW_LINE><TAB> <TAB> opt_to_free = opt ; <NEW_LINE><TAB> } <NEW_LINE>
<TAB> unsigned long timeleft , request_size , copy_size ; <NEW_LINE>
<NEW_LINE>
for ( plane = 0 ; plane < 4 && in -> data [ plane ] && in -> linesize [ plane ] ; plane + + ) { <NEW_LINE>
<TAB> struct gfn_to_hva_cache pv_time ; <NEW_LINE><TAB> bool pv_time_enabled ; <NEW_LINE>
was called on block * / <NEW_LINE>
void neuter ( ObjectElements * newHeader , JSContext * cx ) ;
<TAB> return error < 0 ? error : 0 ; <NEW_LINE>
<TAB> if ( ( ctxt -> mode != X86EMUL_MODE_PROT64 ) && ( efer & EFER_LMA ) <NEW_LINE>
if ( gData -> stateStackTop ) <NEW_LINE> -- gData -> stateStackTop ; <NEW_LINE>
<TAB> <TAB> <TAB> timr -> it_overrun += hrtimer_forward ( timer , now , <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> <TAB> <TAB> timr -> it_interval ) ; <NEW_LINE>
static ngx_int_t ngx_http_test_precondition ( ngx_http_request_t * r ) ; <NEW_LINE>static ngx_int_t ngx_http_test_not_modified ( ngx_http_request_t * r ) ; <NEW_LINE>
<TAB> <TAB> if ( opt ) { <NEW_LINE><TAB> <TAB> <TAB> atomic_sub ( opt -> tot_len , & sk -> sk_omem_alloc ) ; <NEW_LINE><TAB> <TAB> <TAB> txopt_put ( opt ) ; <NEW_LINE><TAB> <TAB> } <NEW_LINE>
if ( last_pic_structure != PICT_FRAME ) { <NEW_LINE>
last mod : $ Id $ <NEW_LINE>
#include "imgRequestProxy . h" <NEW_LINE>
<TAB> if ( flags & CMS_DEBUG_DECRYPT ) <NEW_LINE><TAB> <TAB> cms -> d . envelopedData -> encryptedContentInfo -> debug = 1 ; <NEW_LINE><TAB> else <NEW_LINE><TAB> <TAB> cms -> d . envelopedData -> encryptedContentInfo -> debug = 0 ; <NEW_LINE><TAB> if ( ! pk && ! cert && ! dcont && ! out ) <NEW_LINE><TAB> <TAB> return 1 ; <NEW_LINE>
nsRefPtr < nsRangeStore > mRangeItem ; <NEW_LINE>
while ( ( c != '\n' ) && ( c != '\0' ) && ( c != EOF ) ) <NEW_LINE>
<TAB> int count , int pmgr_flag ) ; <NEW_LINE>
<TAB> new_timer -> it_overrun = - 1LL ; <NEW_LINE>
<TAB> struct siginfo info = { } ; <NEW_LINE>
<NEW_LINE>
<TAB> char * Name = NULL ; <NEW_LINE>
<TAB> dh = skb_header_pointer ( skb , dataoff , sizeof ( _dh ) , & _dh ) ; <NEW_LINE>
if ( o == NULL || checkType ( c , o , OBJ_STREAM ) ) return ; <NEW_LINE>
<TAB> <TAB> <TAB> if ( pread ( fd , nbuf , xsh_size , xsh_offset ) < ( ssize_t ) xsh_size ) { <NEW_LINE>
typedef js : : HashMap < JSScript * , <NEW_LINE>JS : : Heap < JSObject * > , <NEW_LINE>js : : PointerHasher < JSScript * , 3 > , <NEW_LINE>js : : SystemAllocPolicy > ThisObjectsMap ; <NEW_LINE>ThisObjectsMap mThisObjects ; <NEW_LINE>
unsigned int actual_size = f -> blocksize_1 / 2 ; <NEW_LINE>unsigned int limit_r_begin = r -> begin < actual_size ? r -> begin : actual_size ; <NEW_LINE>unsigned int limit_r_end = r -> end < actual_size ? r -> end : actual_size ; <NEW_LINE>int n_read = limit_r_end - limit_r_begin ; <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "z90crypt" ) ;
<TAB> <TAB> <TAB> zend_throw_exception_ex ( phar_ce_PharException , 0 TSRMLS_CC , " % s" , error ) ; <NEW_LINE>
if ( major_status == GSS_S_COMPLETE ) <NEW_LINE>ctx -> established = 1 ; <NEW_LINE>
<TAB> make_tx_response ( vif , & pending_tx_info -> req , status ) ;
<NEW_LINE>if ( ! params . no_increment_hotp && must_advance_counter ) { <NEW_LINE>
<NEW_LINE><NEW_LINE>base : : ProcessHandle parentHandle = 0 ; <NEW_LINE>if ( XRE_GetProcessType ( ) != GeckoProcessType_GMPlugin ) { <NEW_LINE>mozilla : : DebugOnly < bool > ok = base : : OpenProcessHandle ( parentPID , & parentHandle ) ; <NEW_LINE>NS_ABORT_IF_FALSE ( ok , "can't open handle to parent" ) ; <NEW_LINE> } <NEW_LINE>
static const float FLOOR1_fromdB_INV_LOOKUP [ 256 ] = { <NEW_LINE>
<TAB> bio_for_each_segment_all ( bvec , bio , j ) { <NEW_LINE><TAB> <TAB> put_page ( bvec -> bv_page ) ; <NEW_LINE>
<TAB> <TAB> <TAB> file -> namelen = MIN ( sizeof file -> name , len ) ; <NEW_LINE><TAB> <TAB> <TAB> memcpy ( file -> name , d , file -> namelen ) ; <NEW_LINE>
for ( plane = 0 ; plane < 4 && frame -> data [ plane ] && frame -> linesize [ plane ] ; plane + + ) { <NEW_LINE>
<TAB> err = xt_check_entry_offsets ( e , e -> elems , e -> target_offset , <NEW_LINE><TAB> <TAB> <TAB> <TAB> e -> next_offset ) ; <NEW_LINE>
<TAB> if ( ccid != NULL && ccid -> ccid_ops -> ccid_hc_tx_getsockopt != NULL ) <NEW_LINE>
<TAB> <TAB> const char * name , int rep_quick , my_bool no_copy_stat ) <NEW_LINE>
return ( * field_rtrn != NULL ) ; <NEW_LINE>
if ( c -> mpeg4_studio_profile ) <NEW_LINE>
<TAB> up_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <NEW_LINE>
PRBool merge , PRBool replace ) <NEW_LINE>
<NEW_LINE>
<TAB> <TAB> if ( ( dst_group || dst_pid ) && <NEW_LINE><TAB> <TAB> ! netlink_capable ( sock , NL_NONROOT_SEND ) ) <NEW_LINE>
<TAB> if ( ni ) <NEW_LINE><TAB> <TAB> lnet_ni_notify_locked ( ni , lp ) ; <NEW_LINE>
<TAB> ret = copy_to_user ( uattr , attr , attr -> size ) ; <NEW_LINE>
<TAB> <TAB> ipv6_select_ident ( & fhdr , rt ) ; <NEW_LINE>
<TAB> opendata = nfs4_opendata_alloc ( & ctx -> path , state -> owner , 0 , 0 , NULL ) ; <NEW_LINE>
usb_conv_info -> class_data_type = USB_CONV_MASS_STORAGE ; <NEW_LINE> } else if ( usb_conv_info -> class_data_type != USB_CONV_MASS_STORAGE ) { <NEW_LINE><NEW_LINE>return 0 ; <NEW_LINE>
<TAB> struct dentry * root = mount_pseudo ( fs_type , "aio : " , NULL , & ops , <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> AIO_RING_MAGIC ) ; <NEW_LINE><NEW_LINE><TAB> if ( ! IS_ERR ( root ) ) <NEW_LINE><TAB> <TAB> root -> d_sb -> s_iflags |= SB_I_NOEXEC ; <NEW_LINE><TAB> return root ; <NEW_LINE>
<TAB> <TAB> reset_globals ( ) ; <NEW_LINE>
<TAB> pgprot_t prot = __get_dma_pgprot ( attrs , PAGE_KERNEL ) ; <NEW_LINE>
<TAB> if ( p -> io_context ) <NEW_LINE><TAB> <TAB> exit_io_context ( p ) ; <NEW_LINE>
<TAB> sigev_none = timr -> it_sigev_notify == SIGEV_NONE ; <NEW_LINE>
if ( ss -> ssl3 . hs . ws != wait_cert_request ) { <NEW_LINE>desc = unexpected_message ; <NEW_LINE>errCode = SSL_ERROR_RX_UNEXPECTED_CERT_REQUEST ; <NEW_LINE>goto alert_loser ; <NEW_LINE>
FILE_RCSID ( "@ ( # ) $ File : funcs . c , v 1 . 81 2015 / 05 / 28 19 : 26 : 59 christos Exp $ " ) <NEW_LINE>
#define __S100 PAGE_READONLY_EXEC <NEW_LINE>
pp = pp * rooti + p ; <NEW_LINE>p = p * rooti + a [ k ] ; <NEW_LINE>
<TAB> <TAB> memcpy ( serial -> value , priv -> cac_id , serial -> len ) ; <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "aes" ) ;
<TAB> f2fs_wait_discard_bios ( sbi , true ) ; <NEW_LINE>
<TAB> <TAB> <TAB> iocb -> private = ext4_init_io_end ( inode , GFP_NOFS ) ; <NEW_LINE>
extern void ipv6_select_ident ( struct frag_hdr * fhdr , struct rt6_info * rt ) ; <NEW_LINE>
#define NSS_BUILTINS_LIBRARY_VERSION_MINOR 80 <NEW_LINE>#define NSS_BUILTINS_LIBRARY_VERSION "1 . 80" <NEW_LINE>
exit_func : <NEW_LINE>
<TAB> map = q -> bufs [ first ] -> map = kzalloc ( sizeof ( struct videobuf_mapping ) , GFP_KERNEL ) ; <NEW_LINE>
<TAB> const struct nfsd4_layout_ops * ops ; <NEW_LINE>
<TAB> if ( res == 0 && dev ) { <NEW_LINE>
copy_fields ( s , s1 , golden_frame , keyframe ) ; <NEW_LINE>
COS_LOOKUP_I_SHIFT ) ; <NEW_LINE>
char * err_msg ; <NEW_LINE>
<TAB> map = bpf_map_inc ( map , true ) ; <NEW_LINE>
{ <NEW_LINE>scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <NEW_LINE>ThrowReaderException ( ResourceLimitError , "MemoryAllocationFailed" ) ; <NEW_LINE> }
sock -> _wreq . alloced_ptr = sock -> _wreq . bufs ; <NEW_LINE>
js_Atomize ( JSContext * cx , const char * bytes , size_t length , uintN flags ) ; <NEW_LINE>
<TAB> if ( ext4_should_dioread_nolock ( inode ) ) <NEW_LINE><TAB> <TAB> ret = block_write_begin ( file , mapping , pos , len , flags , pagep , <NEW_LINE><TAB> <TAB> <TAB> <TAB> fsdata , ext4_get_block_write ) ; <NEW_LINE><TAB> else <NEW_LINE><TAB> <TAB> ret = block_write_begin ( file , mapping , pos , len , flags , pagep , <NEW_LINE><TAB> <TAB> <TAB> <TAB> fsdata , ext4_get_block ) ; <NEW_LINE>
static int parse_cosine_packet ( FILE_T fh , struct wtap_pkthdr * phdr , Buffer * buf , <NEW_LINE><TAB> char * line , int * err , gchar ** err_info ) ; <NEW_LINE>
<NEW_LINE>
nsresult FormatInputStream ( nsIRequest * aRequest , nsISupports * aContext , const nsAString & aBuffer ) ; <NEW_LINE><NEW_LINE>nsresult DoOnStartRequest ( nsIRequest * request , nsISupports * aContext , <NEW_LINE>nsString & aBuffer ) ; <NEW_LINE>
<TAB> __sock_release ( SOCKET_I ( inode ) , inode ) ; <NEW_LINE>
<TAB> fprintf ( out , "type = % c % s % c ( 0x % 08"PRIxFAST32" ) ; length = % "PRIuFAST32"\n" , '"' , <NEW_LINE><TAB> boxinfo -> name , '"' , box -> type , box -> len ) ; <NEW_LINE>
<TAB> u32 count , now ; <NEW_LINE>
<NEW_LINE>already_AddRefed < DOMSVGPathSeg > GetItemAt ( uint32_t aIndex ) ; <NEW_LINE>
SOW_FLAG = PARTIALLY_TRANSPARENT << 1 , <NEW_LINE><NEW_LINE><NEW_LINE><NEW_LINE><NEW_LINE><NEW_LINE>SHADOWING_FORBIDDEN = SOW_FLAG << 1 } ; <NEW_LINE>
<TAB> const char * dbname ; <TAB> <TAB> <TAB> <NEW_LINE>
printf ( " Value : % i\n" , * ( ( int * ) mapidata -> data ) ) ; <NEW_LINE>
#include "nsTArray . h" <NEW_LINE>#include "nsIWeakReference . h" <NEW_LINE>#include "nsIWeakReferenceUtils . h" <NEW_LINE>
WCHAR installDir [ MAX_PATH + 1 ] = { L'\0' } ; <NEW_LINE>
<TAB> <TAB> if ( state != KEY_IS_UNINSTANTIATED ) <NEW_LINE>
<TAB> timr -> it_overrun += hrtimer_forward ( timer , timer -> base -> get_time ( ) , <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> timr -> it_interval ) ; <NEW_LINE>
last mod : $ Id $ <NEW_LINE>
<TAB> <TAB> <TAB> bss -> ssid_len = min_t ( int , 32 , elem -> len ) ; <NEW_LINE><TAB> <TAB> <TAB> memcpy ( bss -> ssid , elem -> data , bss -> ssid_len ) ; <NEW_LINE>
ippSetString ( job -> attrs , & attr , 0 , printer -> job_sheets [ 0 ] ) ; <NEW_LINE>ippSetString ( job -> attrs , & attr , 1 , printer -> job_sheets [ 1 ] ) ; <NEW_LINE>
<TAB> appendPQExpBuffer ( & sql , " SYSTEM % s ; " , fmtId ( PQdb ( conn ) ) ) ; <NEW_LINE>
<TAB> if ( ! ie1 || ! ie2 ) <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> * message = estrndup ( stats_header -> message , stats_header -> message_len ) ; <NEW_LINE>
static bool dump_fd_info ( const char * dest_filename , char * source_filename , int source_base_ofs , uid_t uid , gid_t gid ) <NEW_LINE>
JSObject ** aClassObject , bool * aNew ) ; <NEW_LINE>
state -> indent = fstrndup ( RSTRING_PTR ( indent ) , len ) ; <NEW_LINE>
<TAB> <NEW_LINE><TAB> if ( __get_user ( msr_hi , & tm_sr -> mc_gregs [ PT_MSR ] ) ) <NEW_LINE><TAB> <TAB> return 1 ; <NEW_LINE><TAB> msr_hi <<= 32 ; <NEW_LINE><TAB> <NEW_LINE><TAB> if ( MSR_TM_RESV ( msr_hi ) ) <NEW_LINE><TAB> <TAB> return 1 ; <NEW_LINE><TAB> <NEW_LINE><TAB> regs -> msr = ( regs -> msr & ~ MSR_TS_MASK ) | ( msr_hi & MSR_TS_MASK ) ; <NEW_LINE>
void <TAB> Huff_transmit ( huff_t * huff , int ch , byte * fout , int maxoffset ) ; <NEW_LINE>void <TAB> Huff_offsetReceive ( node_t * node , int * ch , byte * fin , int * offset , int maxoffset ) ; <NEW_LINE>void <TAB> Huff_offsetTransmit ( huff_t * huff , int ch , byte * fout , int * offset , int maxoffset ) ; <NEW_LINE>
size_t nchars , idstrlength , gsoplength , vlength , vsharplength , curlen ; <NEW_LINE>
last mod : $ Id $
if ( use_accept4 ) { <NEW_LINE>s = accept4 ( lc -> fd , ( struct sockaddr * ) sa , & socklen , <NEW_LINE>SOCK_NONBLOCK ) ; <NEW_LINE> } else { <NEW_LINE>s = accept ( lc -> fd , ( struct sockaddr * ) sa , & socklen ) ; <NEW_LINE> } <NEW_LINE>
<NEW_LINE>if ( tree_root == NULL ) <NEW_LINE>return 0 ; <NEW_LINE>
<TAB> sprintf ( new_port -> name , "port - % d" , num ) ; <NEW_LINE>
<TAB> <TAB> <TAB> goto failed_mount_wq ; <NEW_LINE>
<TAB> sc = create_spnego_ctx ( 0 ) ; <NEW_LINE>
look -> sorted_index [ i + 1 ] , fits + i , <NEW_LINE>n , info ) ; <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "serpent" ) ;
<TAB> if ( ! unconditional ( e ) ) <NEW_LINE>
! SSL_WRITE_ETM ( s ) && SSL_USE_EXPLICIT_IV ( s ) && <NEW_LINE>
<TAB> bh_unlock_sock ( sk ) ; <NEW_LINE>
FILE * fp = fopen ( dest_filename , "wx" ) ; <NEW_LINE>
compact_pixels = AcquireCompactPixels ( next_image , exception ) ; <NEW_LINE>
<TAB> return xfrm6_rcv_spi ( skb , spi ) > 0 ? : 0 ; <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "sha384" ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "sha512" ) ; <NEW_LINE>
if ( band -> prec ) { <NEW_LINE>Jpeg2000Prec * prec = band -> prec + precno ; <NEW_LINE>av_freep ( & prec -> zerobits ) ; <NEW_LINE>av_freep ( & prec -> cblkincl ) ; <NEW_LINE>av_freep ( & prec -> cblk ) ; <NEW_LINE> } <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "aes" ) ; <NEW_LINE>
<TAB> <TAB> if ( strncmp ( name , mixer_vols [ i ] . name , 32 ) == 0 ) { <NEW_LINE>
<TAB> <TAB> memset ( addr , 0 , size ) ; <NEW_LINE>
<TAB> atomic_set ( & opt2 -> refcnt , 1 ) ; <NEW_LINE>
int max_bytes_matched ; <NEW_LINE><NEW_LINE>max_bytes_matched = flags & RE_FLAGS_BACKWARDS ? <NEW_LINE>input_backwards_size : <NEW_LINE>input_forwards_size ; <NEW_LINE>
<TAB> <TAB> conn -> m -> local_tx_end ( conn , this_func , result == NULL ? FAIL : PASS TSRMLS_CC ) ; <NEW_LINE>
if ( info . scale != ( Quantum * ) NULL ) <NEW_LINE>
snprintf ( & str [ i_level * 5 ] , sizeof ( str ) - 5 * i_level , <NEW_LINE>
if ( sscanf ( value , " % d + X % d" , & height , & width ) == 2 ) <NEW_LINE> { <NEW_LINE>image -> columns = ( size_t ) width ; <NEW_LINE>image -> rows = ( size_t ) height ; <NEW_LINE> } <NEW_LINE>
virtual nsresult InstallMember ( JSContext * aCx , <NEW_LINE>JSObject * aTargetClassObject ) { <NEW_LINE>
<TAB> . splice_write <TAB> = iter_file_splice_write , <NEW_LINE>
out_good : <NEW_LINE><TAB> ret = true ; <NEW_LINE><NEW_LINE>out_bad : <NEW_LINE><TAB> key_basic -> n_proto = proto ; <NEW_LINE><TAB> key_basic -> ip_proto = ip_proto ; <NEW_LINE><TAB> key_control -> thoff = ( u16 ) nhoff ; <NEW_LINE><NEW_LINE><TAB> return ret ; <NEW_LINE>
<NEW_LINE>
<NEW_LINE>
<TAB> <NEW_LINE><TAB> l_current_pi -> include = 00 ; <NEW_LINE><TAB> if ( l_step_l <= ( SIZE_MAX / ( l_tcp -> numlayers + 1U ) ) ) <NEW_LINE><TAB> { <NEW_LINE><TAB> <TAB> l_current_pi -> include = ( OPJ_INT16 * ) opj_calloc ( ( l_tcp -> numlayers + 1 ) * l_step_l , sizeof ( OPJ_INT16 ) ) ; <NEW_LINE><TAB> } <NEW_LINE><NEW_LINE>
<TAB> ses = cifs_find_smb_ses ( server , volume_info ) ; <NEW_LINE>
spnego_gss_ctx_id_t sc = ( spnego_gss_ctx_id_t ) context_handle ; <NEW_LINE><NEW_LINE>if ( sc -> ctx_handle == GSS_C_NO_CONTEXT ) <NEW_LINE><TAB> return ( GSS_S_NO_CONTEXT ) ; <NEW_LINE><NEW_LINE>return gss_get_mic_iov ( minor_status , sc -> ctx_handle , qop_req , iov , <NEW_LINE>
<TAB> guint32 off = offset , last_off ; <NEW_LINE>
ret_value = 0 ; <NEW_LINE>goto to_exit ; <NEW_LINE>
<TAB> sem_unlock ( sma , - 1 ) ; <NEW_LINE>
<TAB> <TAB> <NEW_LINE><TAB> <TAB> while ( bytes || ! iov -> iov_len ) { <NEW_LINE>
<TAB> if ( 2 == cipher_len || * out_len < cipher_len - 2 ) <NEW_LINE>
<TAB> <NEW_LINE><TAB> if ( PageDirty ( page ) ) <NEW_LINE><TAB> <TAB> SetPageDirty ( newpage ) ; <NEW_LINE>
<TAB> ws_buffer_assure_space ( buf , pkt_len ) ; <NEW_LINE>
my_snprintf ( query , sizeof ( query ) , <NEW_LINE>"SELECT COUNT ( * ) FROM ` % s`" , trow [ 0 ] ) ; <NEW_LINE>
PRPackedBool mInDtor ; <NEW_LINE>
<NEW_LINE>
int ipc_rcu_getref ( void * ptr ) ; <NEW_LINE>
<TAB> perf_paranoid_tracepoint_raw ( ) && ! capable ( CAP_SYS_ADMIN ) ) <NEW_LINE>
mozilla : : Maybe < AutoJSContextDestroyer > mCxDestroyer ; <NEW_LINE><NEW_LINE>JSAutoRequest mAr ; <NEW_LINE>
<TAB> ptr -> kernel_data = NULL ; <NEW_LINE><TAB> if ( ret ) <NEW_LINE><TAB> <TAB> return - EFAULT ; <NEW_LINE>
<TAB> <TAB> if ( skb -> mac_header < ( tnl_hlen + frag_hdr_sz ) ) { <NEW_LINE>
guint i = 1 ; <NEW_LINE>
<TAB> <TAB> ret = aio_setup_single_vector ( WRITE , file , kiocb ) ; <NEW_LINE>
p -> flags |= mrb_obj_ptr ( self ) -> flags & MRB_FLAG_IS_FROZEN ; <NEW_LINE>
ret = get_tmp_filename ( tmp_filename , sizeof ( tmp_filename ) ) ; <NEW_LINE>if ( ret < 0 ) { <NEW_LINE>return ret ; <NEW_LINE> } <NEW_LINE>
<NEW_LINE>
<NEW_LINE><NEW_LINE>
<TAB> struct hugepage_subpool * spool ; <NEW_LINE>
<TAB> <NEW_LINE><TAB> retval = bprm_change_interp ( iname , bprm ) ; <NEW_LINE><TAB> if ( retval < 0 ) <NEW_LINE><TAB> <TAB> goto _error ; <NEW_LINE>
char ** lines = NULL ; <NEW_LINE>
<TAB> <TAB> if ( split_flag & ( EXT4_EXT_DATA_VALID1|EXT4_EXT_DATA_VALID2 ) ) { <NEW_LINE><TAB> <TAB> <TAB> if ( split_flag & EXT4_EXT_DATA_VALID1 ) <NEW_LINE><TAB> <TAB> <TAB> <TAB> err = ext4_ext_zeroout ( inode , ex2 ) ; <NEW_LINE><TAB> <TAB> <TAB> else <NEW_LINE><TAB> <TAB> <TAB> <TAB> err = ext4_ext_zeroout ( inode , ex ) ; <NEW_LINE><TAB> <TAB> } else <NEW_LINE><TAB> <TAB> <TAB> err = ext4_ext_zeroout ( inode , & orig_ex ) ; <NEW_LINE><NEW_LINE>
<TAB> <TAB> <TAB> ext2_xattr_cache_insert ( ext2_mb_cache , new_bh ) ; <NEW_LINE>
<TAB> <TAB> if ( ( use_ssl && resource -> port != 443 && resource -> port != 0 ) || <NEW_LINE>
<TAB> netdev -> hw_features = NETIF_F_HW_VLAN_CTAG_RX ; <NEW_LINE>
<TAB> jpc_tsfb_band_t bnds [ JPC_MAXBANDS ] ; <NEW_LINE>
void doRemoveChild ( bool aNotify ) ; <NEW_LINE>
<TAB> <TAB> . match_data . cmp <TAB> <TAB> = key_default_cmp , <NEW_LINE>
<TAB> <TAB> <TAB> sas_eh_finish_cmd ( cmd ) ; <NEW_LINE>
s -> filesize = UINT64_MAX ; <NEW_LINE>
<TAB> <TAB> <TAB> record_and_restart ( event , val , regs ) ; <NEW_LINE>
<NEW_LINE>
return AlignBytes ( localSlotCount_ , StackAlignment / STACK_SLOT_SIZE ) ; <NEW_LINE>
<NEW_LINE><NEW_LINE>
<TAB> <TAB> rcu_read_lock ( ) ; <NEW_LINE><TAB> <TAB> err = ip6_xmit ( sk , skb , & fl6 , rcu_dereference ( np -> opt ) , <NEW_LINE><TAB> <TAB> <TAB> np -> tclass ) ; <NEW_LINE><TAB> <TAB> rcu_read_unlock ( ) ; <NEW_LINE>
return ( ( ( image -> columns + 7 ) / 8 ) * GetPSDPacketSize ( image ) ) ; <NEW_LINE>
* rowp + + = suffix [ code ] & mColorMask ; <NEW_LINE>
<TAB> <TAB> <TAB> if ( ! parse_dylib ( bin , off ) ) { <NEW_LINE>
vorbis_info_floor * infoX , <NEW_LINE>vorbis_look_floor0 * look ) { <NEW_LINE>
<TAB> if ( ! spec || ! value || ! hdr || ! obuf || obuf_len < 1 ) { <NEW_LINE>
<TAB> overrun = timer_overrun_to_int ( timr , 0 ) ; <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> n = dn_expand ( answer -> qb2 , end , cp , name , ( sizeof name ) - 2 ) ; <NEW_LINE>
if ( errcode != 0 && state -> status == NULL ) <NEW_LINE>state -> status = "UNKNOWN_REASON" ; <NEW_LINE>
<TAB> <TAB> uint32_t user_len ; <NEW_LINE><TAB> <TAB> int32_t cnt2end ; <NEW_LINE>
<TAB> . update_db_bp_intercept = update_bp_intercept , <NEW_LINE>
<NEW_LINE>void Release ( ) { <NEW_LINE>if ( mRefCnt == PR_UINT32_MAX ) { <NEW_LINE>NS_WARNING ( "refcount overflow , leaking nsCSSValue : : Image" ) ; <NEW_LINE>return ; <NEW_LINE> } <NEW_LINE>if ( -- mRefCnt == 0 ) <NEW_LINE>delete this ; <NEW_LINE> } <NEW_LINE>
<TAB> if ( ! handle || ! SecIsValidHandle ( handle ) ) <NEW_LINE>
PLArenaPool * poolp , * tmppoolp = NULL ; <NEW_LINE>
<TAB> size_t bytes = size + alignment + 3 * sizeof ( size_t ) ; <NEW_LINE><TAB> <NEW_LINE><TAB> if ( bytes < size ) <NEW_LINE><TAB> <TAB> return 0 ; <NEW_LINE><TAB> size = bytes ; <NEW_LINE>
<TAB> if ( ( psf = psf_allocate ( ) ) == NULL ) <NEW_LINE>
<NEW_LINE>
<NEW_LINE>already_AddRefed < nsIURI > GetBaseURI ( ) const ; <NEW_LINE><NEW_LINE>
gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; <NEW_LINE>gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER ; <NEW_LINE>
<NEW_LINE>
<TAB> RAnalOp next_op = { 0 } ;
ThrowReaderException ( ResourceLimitError , "ImproperImageHeader" ) ; <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> <TAB> <TAB> s [ 1 ] = '\0' ; <NEW_LINE>
int32_t mParentCharsetSource ; <NEW_LINE>nsCOMPtr < nsIPrincipal > mParentCharsetPrincipal ; <NEW_LINE>
<TAB> sbinfo -> spool = NULL ; <NEW_LINE><TAB> if ( config . nr_blocks != - 1 ) { <NEW_LINE><TAB> <TAB> sbinfo -> spool = hugepage_new_subpool ( config . nr_blocks ) ; <NEW_LINE><TAB> <TAB> if ( ! sbinfo -> spool ) <NEW_LINE><TAB> <TAB> <TAB> goto out_free ; <NEW_LINE><TAB> } <NEW_LINE>
curves [ oc ] , <NEW_LINE>max , <NEW_LINE>p -> octave [ i ] - p -> firstoc , <NEW_LINE>p -> total_octave_lines , <NEW_LINE>p -> eighth_octave_lines , <NEW_LINE>dBoffset ) ; <NEW_LINE>
static int ecryptfs_parse_options ( struct ecryptfs_sb_info * sbi , char * options , <NEW_LINE><TAB> <TAB> <TAB> <TAB> uid_t * check_ruid ) <NEW_LINE>
<TAB> XPR ( NT "byte % u ( read % u @ % "Q"u ) % d != % d\n" , <NEW_LINE>
exit_func : <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> if ( s && s >= filename ) { <NEW_LINE>
<TAB> <TAB> if ( hdrincl ) <NEW_LINE>
exit_func : <NEW_LINE>
<NEW_LINE><TAB> <TAB> if ( len + 15 > dev -> mtu ) { <NEW_LINE><TAB> <TAB> <TAB> mutex_unlock ( & econet_mutex ) ; <NEW_LINE><TAB> <TAB> <TAB> return - EMSGSIZE ; <NEW_LINE><TAB> <TAB> } <NEW_LINE>
<NEW_LINE><NEW_LINE>if ( frame_is_too_large ( & decoder -> video_info , <NEW_LINE>common -> player -> max_video_frame_pixels ) ) { <NEW_LINE>return OGGZ_ERR_OUT_OF_MEMORY ; <NEW_LINE> } <NEW_LINE><NEW_LINE>
if ( cur [ 0 ] && cur [ 0 ] -> clazz && cur [ 0 ] -> clazz -> get_interface ) <NEW_LINE>
ip4h . ip_proto = proto ; <NEW_LINE>
static int CVE_2014_5472_isofs_read_inode ( struct inode * inode , int relocated ) <NEW_LINE>
if ( ( ret = init_vlc ( & s -> vlc [ i ] , VLC_BITS , 256 , s -> len [ i ] , 1 , 1 , <NEW_LINE>s -> bits [ i ] , 4 , 4 , 0 ) ) < 0 ) <NEW_LINE>return ret ; <NEW_LINE>
<TAB> <TAB> . gro_receive = sit_gro_receive , <NEW_LINE>
bool CopyTexSubImage2D_base ( WebGLenum target , <NEW_LINE>
<NEW_LINE>void ClearTextRun ( nsTextFrame * aStartContinuation = nsnull ) ; <NEW_LINE>
<TAB> <TAB> <NEW_LINE><TAB> <TAB> mark_key_instantiated ( key , 0 ) ; <NEW_LINE>
if ( ss -> ssl3 . hs . ws != wait_cert_verify ) { <NEW_LINE>
<TAB> <TAB> if ( i > ( sizeof ( outbuff ) - 128 ) ) { <NEW_LINE>
v -> pcmret [ i ] = v -> pcm [ i ] + v -> pcm_returned ; <NEW_LINE>
<TAB> <TAB> <TAB> goto out_bad ; <NEW_LINE>
if ( size_bmp > BMP_HEADER_SIZE && <NEW_LINE>size_bmp < INT_MAX - AV_INPUT_BUFFER_PADDING_SIZE ) { <NEW_LINE>
<TAB> <TAB> zend_throw_exception_ex ( spl_ce_BadMethodCallException , 0 TSRMLS_CC , " % s" , error ) ; <NEW_LINE>
<TAB> <TAB> <NEW_LINE><TAB> <TAB> <NEW_LINE><TAB> <TAB> box -> ops = & boxinfo -> ops ; <NEW_LINE><NEW_LINE>
<NEW_LINE>tmp = range + 6 ; <NEW_LINE>num_ranges = 1 ; <NEW_LINE>while ( * + + tmp ) <NEW_LINE>if ( * tmp == ' , ' ) <NEW_LINE>if ( + + num_ranges > 10 ) <NEW_LINE>return 0 ; <NEW_LINE>
next_input = input + i * input_incr ; <NEW_LINE><NEW_LINE>
out : <NEW_LINE><TAB> dput ( dentry ) ; <NEW_LINE><TAB> mntput ( mqueue_mnt ) ; <NEW_LINE>
if ( ctx -> terminated || ! ctx -> established ) { <NEW_LINE>
<TAB> <TAB> * outlen = utf8s_to_utf16s ( name , len , UTF16_HOST_ENDIAN , <NEW_LINE><TAB> <TAB> <TAB> <TAB> ( wchar_t * ) outname , FAT_LFN_LEN + 2 ) ; <NEW_LINE>
<TAB> size_t ini_entries_len = 0 ; <NEW_LINE>
Packet * p1 = BuildTestPacket ( IPPROTO_ICMP , ip_id , 2 , 1 , 'C' , 8 ) ; <NEW_LINE>Packet * p2 = BuildTestPacket ( IPPROTO_ICMP , ip_id , 0 , 1 , 'A' , 8 ) ; <NEW_LINE>Packet * p3 = BuildTestPacket ( IPPROTO_ICMP , ip_id , 1 , 0 , 'B' , 8 ) ; <NEW_LINE>
p = GetCacheViewVirtualPixels ( image_view , 0 , y , splice_image -> columns , 1 , <NEW_LINE>exception ) ; <NEW_LINE>
gchar * filename = NULL ; <NEW_LINE>gint file_handle ; <NEW_LINE>
<TAB> <TAB> zend_throw_exception_ex ( spl_ce_BadMethodCallException , 0 TSRMLS_CC , " % s" , error ) ; <NEW_LINE>
<TAB> <TAB> err = ip6_xmit ( sk , skb , fl6 , rcu_dereference ( np -> opt ) , <NEW_LINE><TAB> <TAB> <TAB> np -> tclass ) ; <NEW_LINE>
<TAB> if ( ! check_mnt ( real_mount ( path -> mnt ) ) ) <NEW_LINE><TAB> <TAB> tree = ERR_PTR ( - EINVAL ) ; <NEW_LINE><TAB> else <NEW_LINE><TAB> <TAB> tree = copy_tree ( real_mount ( path -> mnt ) , path -> dentry , <NEW_LINE><TAB> <TAB> <TAB> <TAB> CL_COPY_ALL | CL_PRIVATE ) ; <NEW_LINE>
NS_ASSERTION ( aForFrame || ( aForFrameLine && aLineContainer ) , <NEW_LINE>"One of aForFrame or aForFrameLine + aLineContainer must be set ! " ) ; <NEW_LINE><NEW_LINE>if ( ! aLineContainer || ! aForFrameLine ) { <NEW_LINE>
static inline void ext2_xattr_destroy_cache ( struct mb2_cache * cache ) <NEW_LINE>
<TAB> <TAB> <TAB> mb2_cache_entry_delete_block ( ext4_mb_cache , hash , <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> <TAB> bs -> bh -> b_blocknr ) ; <NEW_LINE>
if ( tm -> outOfMemory ( ) || <NEW_LINE>OverfullJITCache ( tm ) || <NEW_LINE> ! tm -> tracedScripts . put ( cx -> fp ( ) -> script ( ) ) ) { <NEW_LINE>if ( ! OverfullJITCache ( tm ) ) <NEW_LINE>js_ReportOutOfMemory ( cx ) ; <NEW_LINE>
ThrowBinaryException ( CorruptImageError , <NEW_LINE>"UnexpectedEndOfFile" , image -> filename ) ; <NEW_LINE>
PRBool isIPaddr = cert_IsIPAddr ( hn ) ; <NEW_LINE>if ( isIPaddr ) { <NEW_LINE>if ( PORT_Strcasecmp ( hn , cn ) == 0 ) { <NEW_LINE>rv = SECSuccess ; <NEW_LINE> } else { <NEW_LINE>PORT_SetError ( SSL_ERROR_BAD_CERT_DOMAIN ) ; <NEW_LINE>rv = SECFailure ; <NEW_LINE> } <NEW_LINE> } else { <NEW_LINE>rv = cert_TestHostName ( cn , hn ) ; <NEW_LINE> } <NEW_LINE>
<TAB> sc = create_spnego_ctx ( 1 ) ; <NEW_LINE>
<TAB> memset ( & ah , 0 , sizeof ( ah ) ) ; <NEW_LINE>
int fd = - 1 ; <NEW_LINE>
<TAB> { <NEW_LINE><TAB> <TAB> <NEW_LINE><TAB> <TAB> size_t new_ssize = len / ( size_t ) 2 * ( size_t ) 3 + ( size_t ) 1 ; <NEW_LINE><TAB> <TAB> if ( new_ssize < len || new_ssize > LONG_MAX / sizeof ( sop ) ) { <NEW_LINE><TAB> <TAB> <TAB> free ( ( char * ) g ) ; <NEW_LINE><TAB> <TAB> <TAB> return REG_INVARG ; <NEW_LINE><TAB> <TAB> } <NEW_LINE><TAB> <TAB> p -> ssize = new_ssize ; <NEW_LINE><TAB> } <NEW_LINE>
<TAB> ctxt -> _eip = rdx ; <NEW_LINE><TAB> * reg_write ( ctxt , VCPU_REGS_RSP ) = rcx ; <NEW_LINE>
<TAB> <TAB> if ( n == - 1 ) { <NEW_LINE>
<TAB> <TAB> if ( nlh -> nlmsg_len < NLMSG_HDRLEN || <NEW_LINE><TAB> <TAB> skb -> len < nlh -> nlmsg_len || <NEW_LINE><TAB> <TAB> nlmsg_len ( nlh ) < sizeof ( struct nfgenmsg ) ) { <NEW_LINE><TAB> <TAB> <TAB> nfnl_err_reset ( & err_list ) ; <NEW_LINE><TAB> <TAB> <TAB> status |= NFNL_BATCH_FAILURE ; <NEW_LINE><TAB> <TAB> <TAB> goto done ; <NEW_LINE>
JSObject ** aTargetClassObject , <NEW_LINE>bool * aTargetIsNew ) ; <NEW_LINE>
<TAB> if ( do_vnet ) { <NEW_LINE>
<TAB> if ( shdr -> sh_size < 1 || shdr -> sh_size > SIZE_MAX ) { <NEW_LINE>
int need_emu = ( unsigned ) ix >= width - w || width < w || <NEW_LINE> ( unsigned ) iy >= height - h || height < h <NEW_LINE> ; <NEW_LINE>
for ( i = 0 ; i <= w - ( int ) sizeof ( long ) ; i += sizeof ( long ) ) { <NEW_LINE>
<TAB> struct dm_dev * dev = lc -> dev ; <NEW_LINE><TAB> int r = 0 ; <NEW_LINE><NEW_LINE><TAB> <NEW_LINE><TAB> if ( lc -> start || <NEW_LINE><TAB> ti -> len != i_size_read ( dev -> bdev -> bd_inode ) >> SECTOR_SHIFT ) <NEW_LINE><TAB> <TAB> r = scsi_verify_blk_ioctl ( NULL , cmd ) ; <NEW_LINE><NEW_LINE><TAB> return r ? : __blkdev_driver_ioctl ( dev -> bdev , dev -> mode , cmd , arg ) ; <NEW_LINE>
<TAB> <TAB> return - 1 ; <NEW_LINE>
<TAB> <TAB> msg -> msg_namelen = sizeof ( * maddr ) ; <NEW_LINE>
<TAB> <TAB> <TAB> if ( s && s >= filename ) { <NEW_LINE>
if ( ! _dopr ( & buf , NULL , & n , & retlen , & truncated , format , args ) ) <NEW_LINE>return - 1 ; <NEW_LINE>
<TAB> sem_unlock ( sma , locknum ) ; <NEW_LINE>
gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; <NEW_LINE>gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER ; <NEW_LINE>
else if ( ( s -> filesize == UINT64_MAX && whence == SEEK_END ) ) <NEW_LINE>
<TAB> <TAB> fa = xfs_dinode_verify_fork ( dip , mp , XFS_ATTR_FORK ) ; <NEW_LINE><TAB> <TAB> if ( fa ) <NEW_LINE><TAB> <TAB> <TAB> return fa ; <NEW_LINE>
mCachedMaxUshortElement = FindMaxElementInSubArray < GLushort > ( mByteLength >> 1 , 0 ) ; <NEW_LINE>
<TAB> <TAB> . proc_handler <TAB> = proc_dmesg_restrict , <NEW_LINE>
if ( ( key_bytes_len < GROUP_KEY_MIN_LEN ) || <NEW_LINE> ( eapol_len < sizeof ( EAPOL_RSN_KEY ) ) || <NEW_LINE> ( key_bytes_len > eapol_len - sizeof ( EAPOL_RSN_KEY ) ) ) { <NEW_LINE>
NS_tchar buffer [ MAXPATHLEN * 2 ] = { NS_T ( '\0' ) } ; <NEW_LINE>size_t bufferLeft = MAXPATHLEN * 2 ; <NEW_LINE>
<TAB> 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , - 1 , - 1 , - 1 , - 2 , - 1 , - 1 , <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "ccm ( aes ) " ) ;
<NEW_LINE>already_AddRefed < nsIDOMSVGNumber > GetItemAt ( uint32_t aIndex ) ; <NEW_LINE>
<TAB> <TAB> <TAB> { <NEW_LINE><TAB> <TAB> <TAB> <TAB> X509 * cert = SSL_get_peer_certificate ( serv -> ssl ) ; <NEW_LINE><TAB> <TAB> <TAB> <TAB> int hostname_err ; <NEW_LINE><TAB> <TAB> <TAB> <TAB> if ( ( hostname_err = _SSL_check_hostname ( cert , serv -> hostname ) ) != 0 ) <NEW_LINE><TAB> <TAB> <TAB> <TAB> { <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> snprintf ( buf , sizeof ( buf ) , " * Verify E : Failed to validate hostname ? ( % d ) % s" , <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> <TAB> <TAB> hostname_err , serv -> accept_invalid_cert ? " -- Ignored" : "" ) ; <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> if ( serv -> accept_invalid_cert ) <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> <TAB> EMIT_SIGNAL ( XP_TE_SSLMESSAGE , serv -> server_session , buf , NULL , NULL , NULL , 0 ) ; <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> else <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> <TAB> goto conn_fail ; <NEW_LINE><TAB> <TAB> <TAB> <TAB> } <NEW_LINE><TAB> <TAB> <TAB> <TAB> break ; <NEW_LINE><TAB> <TAB> <TAB> } <NEW_LINE>
<TAB> if ( urb -> actual_length > 0 && edge_port -> lsr_event ) { <NEW_LINE>
<TAB> . write <TAB> <TAB> = new_sync_write , <NEW_LINE><TAB> . write_iter <TAB> = pipe_write , <NEW_LINE>
assert_se ( touch_file ( path , true , USEC_INFINITY , UID_INVALID , GID_INVALID , MODE_INVALID ) == 0 ) ; <NEW_LINE>
state -> space = fstrndup ( RSTRING_PTR ( space ) , len ) ; <NEW_LINE>
<TAB> cl_cURLLib = Cvar_Get ( "cl_cURLLib" , DEFAULT_CURL_LIB , CVAR_ARCHIVE | CVAR_PROTECTED ) ; <NEW_LINE>
iakerb_gss_import_sec_context , <NEW_LINE>
<TAB> if ( hdr -> hdr . incl_len > wth -> snapshot_length ) { <NEW_LINE><TAB> <TAB> g_warning ( "pcap : File has packet larger than file's snapshot length . " ) ; <NEW_LINE>
<TAB> mutex_unlock ( & dev -> lock ) ; <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "aes" ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "aes - asm" ) ;
int kvm_lapic_set_vapic_addr ( struct kvm_vcpu * vcpu , gpa_t vapic_addr ) ; <NEW_LINE>
<TAB> * flags |= FOLL_COW ; <NEW_LINE>
already_AddRefed < dom : : SVGTransform > GetItem ( uint32_t index , <NEW_LINE>ErrorResult & error ) ; <NEW_LINE>already_AddRefed < dom : : SVGTransform > IndexedGetter ( uint32_t index , bool & found , <NEW_LINE>ErrorResult & error ) ; <NEW_LINE>
<TAB> fprintf ( fp , " % s % s\n" , certificate_data -> hostname , certificate_data -> fingerprint ) ; <NEW_LINE>
return mPump || mWaitingOnAsyncRedirect ; <NEW_LINE>
if ( ( ret = av_get_packet ( pb , pkt , vsize ) ) < 0 ) <NEW_LINE>return ret ; <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "crc32c" ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "crc32c - intel" ) ;
Packet * p = BuildTestPacket ( IPPROTO_ICMP , i , 0 , 1 , 'A' + i , 16 ) ; <NEW_LINE>
struct inet_peer * inet_getpeer ( const struct inetpeer_addr * daddr , int create ) <NEW_LINE>
<TAB> <TAB> timr -> it_overrun += kc -> timer_forward ( timr , now ) ; <NEW_LINE>
if ( ! encoding && c -> palette_size && c -> bpp <= 8 && c -> format != CHUNKY ) { <NEW_LINE>
IPV6BuildTestPacket ( uint8_t proto , uint32_t id , uint16_t off , int mf , <NEW_LINE>const char content , int content_len ) <NEW_LINE>
last mod : $ Id : os_types . h 17287 2010 - 06 - 10 13 : 42 : 06Z tterribe $ <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "aes" ) ;
<TAB> size_t bytes = no * size ; <NEW_LINE><TAB> <NEW_LINE><TAB> if ( size && no != bytes / size ) <NEW_LINE><TAB> <TAB> return 0 ; <NEW_LINE><TAB> unsigned flags = NEDMALLOC_FORCERESERVE ( p , 0 , bytes ) ; <NEW_LINE><TAB> return nedpmalloc2 ( p , bytes , 0 , M2_ZERO_MEMORY|flags ) ; <NEW_LINE>
avpriv_request_sample ( mov -> fc , "Multiple independent substreams" ) ; <NEW_LINE>
PRUint32 * aLineno , JSPrincipals * aPrincipals ) ; <NEW_LINE>
<TAB> <TAB> if ( peer != NULL ) <NEW_LINE>
if ( ! page_name_is_good ( page ) ) <NEW_LINE>
<TAB> <TAB> if ( vdaux < 1 || vstart + vdaux < vstart ) { <NEW_LINE>
static const float tonemasks [ P_BANDS ] [ 6 ] [ EHMER_MAX ] = { <NEW_LINE>
#define AP4_VERSION 0x01050001 <NEW_LINE>#define AP4_VERSION_STRING "1 . 5 . 0 . 1" <NEW_LINE>
ZEND_ARG_INFO ( 0 , flags ) <NEW_LINE>
void OnContentRemoved ( nsPresContext * aPresContext , nsIContent * aContainer , <NEW_LINE>nsIFrame * aChildFrame , PRInt32 aIndex ) ; <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> <TAB> size_t len = strlen ( reflection_what ) ; <NEW_LINE>
<TAB> <TAB> if ( unlikely ( __copy_from_user ( & pte , ptep_user , sizeof ( pte ) ) ) ) { <NEW_LINE>
if ( * state != CCS_START ) <NEW_LINE> * state = CCS_VALUE ; <NEW_LINE><NEW_LINE>
dom : : Uint8ClampedArray * aArray , <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "ccm_base" ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "rfc4309" ) ;
<TAB> <TAB> zend_throw_exception_ex ( phar_ce_PharException , 0 TSRMLS_CC , " % s" , error ) ; <NEW_LINE>
extern int utf8s_to_utf16s ( const u8 * s , int len , <NEW_LINE><TAB> <TAB> enum utf16_endian endian , wchar_t * pwcs , int maxlen ) ; <NEW_LINE>
blocks_ = js_pod_calloc < IonBlockCounts > ( numBlocks ) ; <NEW_LINE>
if ( temp == - 1 || temp >= info -> partvals ) goto eopbreak ; <NEW_LINE>
<TAB> <TAB> <TAB> consume_skb ( skb ) ; <NEW_LINE><TAB> <TAB> <TAB> return 0 ; <NEW_LINE>
<TAB> int idx , ret = 0 ; <NEW_LINE>
return ret_value ; <NEW_LINE>
TypedArrayObjectStorage ( JSObject * obj ) : mObj ( obj ) <NEW_LINE>
<TAB> <TAB> values [ 4 ] = connstr . data ; <NEW_LINE>
guint16 msdu_length , actual_octets ; <NEW_LINE>
<TAB> u64 msr_data , rcx , rdx ; <NEW_LINE>
bool growPendingArray ( JSContext * cx ) ; <NEW_LINE>
imap_quote_string ( term , sizeof ( term ) , pat -> p . str , false ) ; <NEW_LINE>
float * logmdct , <NEW_LINE>
<TAB> size_t ffmax , parent_len ; <NEW_LINE>
nickname = NULL ; <NEW_LINE>
<TAB> mutex_unlock ( & dev -> lock ) ;
if ( ss -> ssl3 . hs . ws != wait_server_key ) { <NEW_LINE>errCode = SSL_ERROR_RX_UNEXPECTED_SERVER_KEY_EXCH ; <NEW_LINE>desc = unexpected_message ; <NEW_LINE>goto alert_loser ; <NEW_LINE>
TypedArrayObjectStorage ( JSObject * obj ) : mObj ( obj ) <NEW_LINE>
last mod : $ Id $ <NEW_LINE>
p -> vi -> noiseoff [ j ] [ inthalfoc ] * ( 1 . - del ) + <NEW_LINE>p -> vi -> noiseoff [ j ] [ inthalfoc + 1 ] * del ; <NEW_LINE>
<TAB> <TAB> <TAB> size_t off = 0 , len = 0 , end ; <NEW_LINE>
if ( nad_find_attr ( nad , 0 , - 1 , "type" , "valid" ) >= 0 && xhash_get ( out -> states , rkey ) == ( void * ) conn_INPROGRESS ) { <NEW_LINE>
nsCOMPtr < nsPIDOMWindow > mWindow ; <NEW_LINE>
<TAB> <TAB> io -> page = NULL ; <NEW_LINE>
free ( tk -> p_subpackets ) ; <NEW_LINE>free ( tk -> p_subpackets_timecode ) ; <NEW_LINE>
<TAB> sem_unlock ( sma , - 1 ) ; <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "serpent" ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "serpent - asm" ) ;
imap_quote_string ( q_user , sizeof ( q_user ) , idata -> conn -> account . user , false ) ; <NEW_LINE>imap_quote_string ( q_pass , sizeof ( q_pass ) , idata -> conn -> account . pass , false ) ;
<TAB> <TAB> snprintf ( grump , sizeof ( grump ) , <NEW_LINE><TAB> <TAB> <TAB> "matched null at ` % . 20s'" , p ) ; <NEW_LINE>
FILE_RCSID ( "@ ( # ) $ File : readelf . c , v 1 . 114 2014 / 12 / 11 14 : 19 : 36 christos Exp $ " ) <NEW_LINE>
<TAB> guint <TAB> pkt_len ; <NEW_LINE><TAB> int <TAB> pktnum , hr , min , sec , csec ; <NEW_LINE>
<TAB> cmd = zend_string_safe_alloc ( 4 , l , 2 , 0 ) ; <NEW_LINE>
CWD_API void realpath_cache_del ( const char * path , size_t path_len ) ; <NEW_LINE>CWD_API realpath_cache_bucket * realpath_cache_lookup ( const char * path , size_t path_len , time_t t ) ; <NEW_LINE>
<TAB> mc -> id = idr_alloc ( & multicast_idr , NULL , 0 , 0 , GFP_KERNEL ) ; <NEW_LINE>
} <NEW_LINE>
<TAB> cl_renderer = Cvar_Get ( "cl_renderer" , "opengl1" , CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED ) ; <NEW_LINE>
length -= 4 ; <NEW_LINE>if ( length < 0 || length > 65 || PACKET -> DATA . len < length + 5 ) { <NEW_LINE>dissect_wipe_session ( PACKET , DISSECT_CODE ( dissector_postgresql ) ) ; <NEW_LINE>return NULL ; <NEW_LINE> } <NEW_LINE>snprintf ( ( char * ) conn_status -> password , length + 1 , " % s" , ( char * ) ( ptr + 5 ) ) ; <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "md4" ) ;
<TAB> EVENT_NULL , main_inI1_outR1 } ,
<TAB> <TAB> <TAB> <TAB> goto out_bad ; <NEW_LINE>
last mod : $ Id $ <NEW_LINE>
<TAB> return __load_segment_descriptor ( ctxt , selector , seg , cpl , false , NULL ) ; <NEW_LINE>
<TAB> <TAB> <TAB> if ( ( strlen ( ptr ) > 2 ) && ( * + + ptr == '"' ) && ( strchr ( & ptr [ 1 ] , '"' ) != NULL ) ) { <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> bool compat , <NEW_LINE><TAB> <TAB> <TAB> <TAB> struct iov_iter * iter ) <NEW_LINE>
<TAB> err = xt_check_entry_offsets ( e , e -> elems , e -> target_offset , <NEW_LINE><TAB> <TAB> <TAB> <TAB> e -> next_offset ) ; <NEW_LINE>
ctx -> last_untrusted = sk_X509_num ( ctx -> chain ) ; <NEW_LINE>
<TAB> mono_reflection_shutdown ( ) ; <NEW_LINE>
static int <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> <TAB> <TAB> fname_len = spprintf ( & fname , 0 , " % s % c % s" , test , DEFAULT_SLASH , intern -> u . dir . entry . d_name ) ; <NEW_LINE>
if ( frame_end - frame < width + 4 ) <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "sha224" ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "sha256" ) ; <NEW_LINE>
<TAB> if ( ! vma -> anon_vma || vma -> vm_ops ) <NEW_LINE>
if ( lzx -> inbuf ) <NEW_LINE>sys -> free ( lzx -> inbuf ) ; <NEW_LINE>if ( lzx -> window ) <NEW_LINE>sys -> free ( lzx -> window ) ; <NEW_LINE>
<TAB> setup_force_cpu_cap ( X86_FEATURE_RSB_CTXSW ) ; <NEW_LINE><TAB> pr_info ( "Spectre v2 / SpectreRSB mitigation : Filling RSB on context switch\n" ) ; <NEW_LINE>
<TAB> <TAB> gf_isom_box_del ( __abox ) ; \ <NEW_LINE>
netdev_tx_t hns_nic_net_xmit_hw ( struct net_device * ndev , <NEW_LINE><TAB> <TAB> <TAB> <TAB> struct sk_buff * skb , <NEW_LINE><TAB> <TAB> <TAB> <TAB> struct hns_nic_ring_data * ring_data ) <NEW_LINE>
#include "imgRequestProxy . h" <NEW_LINE>
IsTransparent ( JSContext * cx , JSObject * wrapper , jsid id ) ; <NEW_LINE>
#include "imgRequestProxy . h" <NEW_LINE>
<TAB> <TAB> return - EINVAL ; <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> for ( i = 0 ; ( i + 7 ) < sec -> size ; i += 8 ) { <NEW_LINE>
ResourceLimitError , "MemoryAllocationFailed" , "` % s'" , image -> filename ) ; <NEW_LINE>
MODULE_ALIAS_NETDEV ( "tunl0" ) ;
<TAB> <TAB> timer -> it_overrun += 1LL << i ; <NEW_LINE>
build_config ( char * prefix , struct manager_ctx * manager , struct server * server ) <NEW_LINE>
imap_quote_string ( term , sizeof ( term ) , pat -> p . str , false ) ; <NEW_LINE>
mutt_bcache_del ( pop_data -> bcache , cache_id ( ctx -> hdrs [ i ] -> data ) ) ; <NEW_LINE>
{ } <NEW_LINE>
<TAB> if ( page && page_name_is_good ( page ) && ( access ( page , R_OK ) == 0 ) ) <NEW_LINE>
<TAB> ssize_t n ; <NEW_LINE>
<TAB> ! change_apphead ? "" : <NEW_LINE>
if ( ppc ) { <NEW_LINE>if ( fp -> hasImacropc ( ) ) <NEW_LINE> * ppc = fp -> imacropc ( ) ; <NEW_LINE>else <NEW_LINE> * ppc = fp -> pcQuadratic ( * this ) ; <NEW_LINE> } <NEW_LINE>
<TAB> <TAB> <TAB> guint32 len ; <NEW_LINE>
<TAB> . splice_write <TAB> = iter_file_splice_write , <NEW_LINE>
if ( s -> framep [ VP56_FRAME_GOLDEN ] -> data [ 0 ] && s -> framep [ VP56_FRAME_GOLDEN ] != p && <NEW_LINE>
void FireOnInput ( PRBool aTrusted ) ; <NEW_LINE>
<TAB> char <TAB> * dbname ; <TAB> <TAB> <TAB> <NEW_LINE>
<TAB> r = idr_start ( a , idr , isoent -> children . cnt , ( int ) ffmax , 6 , 2 , & rb_ops ) ; <NEW_LINE>
nsCOMPtr < nsIDOMElement > mFrameElement ; <NEW_LINE>
static int search_old_relocation ( struct reloc_struct_t * reloc_table , <NEW_LINE><TAB> <TAB> <TAB> <TAB> ut32 addr_to_patch , int n_reloc ) { <NEW_LINE>
<TAB> if ( unlikely ( static_cpu_has ( X86_FEATURE_FXSAVE_LEAK ) ) ) { <NEW_LINE><TAB> <TAB> asm volatile ( <NEW_LINE><TAB> <TAB> <TAB> "fnclex\n\t" <NEW_LINE><TAB> <TAB> <TAB> "emms\n\t" <NEW_LINE><TAB> <TAB> <TAB> "fildl % P [ addr ] " <TAB> <NEW_LINE><TAB> <TAB> <TAB> : : [ addr ] "m" ( tsk -> thread . fpu . has_fpu ) ) ; <NEW_LINE><TAB> } <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "sha1" ) ; <NEW_LINE>
FILE_RCSID ( "@ ( # ) $ File : funcs . c , v 1 . 73 2014 / 09 / 10 18 : 41 : 51 christos Exp $ " ) <NEW_LINE>
<TAB> if ( guest_irq >= irq_rt -> nr_rt_entries || <NEW_LINE><TAB> hlist_empty ( & irq_rt -> map [ guest_irq ] ) ) { <NEW_LINE><TAB> <TAB> pr_warn_once ( "no route for guest_irq % u / % u ( broken user space ? ) \n" , <NEW_LINE><TAB> <TAB> <TAB> guest_irq , irq_rt -> nr_rt_entries ) ; <NEW_LINE><TAB> <TAB> goto out ; <NEW_LINE><TAB> } <NEW_LINE>
if ( ( cp = strchr ( ip , ' ] ' ) ) != 0 ) { <NEW_LINE> * cp = '\0' ; <NEW_LINE> } <NEW_LINE>
<TAB> <NEW_LINE><TAB> if ( ec_GFp_pt_is_inf_jac ( px , py , pz ) == MP_YES || mp_cmp_z ( py ) == 0 ) { <NEW_LINE>
<TAB> ts -> tm_mon + 1 , ts -> tm_mday , ts -> tm_hour , ts -> tm_min , ts -> tm_sec ) ; <NEW_LINE>
<TAB> struct serial_icounter_struct icount = { } ; <NEW_LINE>
size_t input_forwards_size , <NEW_LINE>size_t input_backwards_size , <NEW_LINE>
<TAB> if ( key_is_positive ( key ) ) <NEW_LINE>
static const char CVS_ID [ ] = "@ ( # ) $ RCSfile : certdata . c , v $ $ Revision : 1 . 67 . 2 . 1 $ $ Date : 2010 / 08 / 27 15 : 46 : 44 $ "" ; @ ( # ) $ RCSfile : certdata . c , v $ $ Revision : 1 . 67 . 2 . 1 $ $ Date : 2010 / 08 / 27 15 : 46 : 44 $ " ; <NEW_LINE>
<TAB> <TAB> if ( perf_event_overflow ( event , & data , regs ) ) <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "tgr160" ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "tgr128" ) ; <NEW_LINE>
<TAB> hash_param . data = instance -> private_key ; <NEW_LINE><TAB> hash_param . len = instance -> private_key_len ; <NEW_LINE>
cli_dbgmsg ( "cli_scanxar : checksum value is % s . \n" , xmlval ) ; <NEW_LINE>if ( * hash == XAR_CKSUM_SHA1 && xmlStrlen ( xmlval ) == 2 * CLI_HASHLEN_SHA1 || <NEW_LINE> * hash == XAR_CKSUM_MD5 && xmlStrlen ( xmlval ) == 2 * CLI_HASHLEN_MD5 ) <NEW_LINE> { <NEW_LINE> * cksum = xmlStrdup ( xmlval ) ; <NEW_LINE> } <NEW_LINE>else <NEW_LINE> { <NEW_LINE>cli_dbgmsg ( "cli_scanxar : checksum type is unknown or length is invalid . \n" ) ; <NEW_LINE> * hash = XAR_CKSUM_OTHER ; <NEW_LINE> * cksum = NULL ; <NEW_LINE> } <NEW_LINE>
nsCSSKeyframesRule * KeyframesRuleForName ( nsPresContext * aPresContext , <NEW_LINE>const nsString & aName ) ; <NEW_LINE>
<NEW_LINE>
last mod : $ Id $ <NEW_LINE>
static const float vwin8192 [ 4096 ] = { <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "aes - all" ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "des - all" ) ; <NEW_LINE>
JSObject * GetJSObject ( ) ; <NEW_LINE>JSObject * GetJSObjectPreserveColor ( ) const ; <NEW_LINE>
<TAB> <TAB> <TAB> if ( BPF_CLASS ( insn -> code ) == BPF_ALU64 ) { <NEW_LINE><TAB> <TAB> <TAB> <TAB> __mark_reg_known ( regs + insn -> dst_reg , <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> <TAB> insn -> imm ) ; <NEW_LINE><TAB> <TAB> <TAB> } else { <NEW_LINE><TAB> <TAB> <TAB> <TAB> __mark_reg_known ( regs + insn -> dst_reg , <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> <TAB> ( u32 ) insn -> imm ) ; <NEW_LINE><TAB> <TAB> <TAB> } <NEW_LINE>
last mod : $ Id : lpc . h 16037 2009 - 05 - 26 21 : 10 : 58Z xiphmont $ <NEW_LINE>
size_t size = bytes + sizeof ( AllocationEntry ) ; <NEW_LINE>if ( size < bytes ) { <NEW_LINE>return NULL ; <NEW_LINE> } <NEW_LINE><NEW_LINE>void * base = dlmalloc ( size ) ; <NEW_LINE>
for ( i = 1 ; i <= lpc_order && i < nb_samples ; i + + ) <NEW_LINE>
<TAB> <TAB> goto out2 ; <NEW_LINE>
js : : ReadBarriered < js : : types : : TypeObject > emptyTypeObject ; <NEW_LINE>
static int _nfs4_do_open ( struct inode * dir , struct path * path , fmode_t fmode , int flags , struct iattr * sattr , struct rpc_cred * cred , struct nfs4_state ** res ) <NEW_LINE>
<TAB> if ( opt && opt -> opt . optlen ) { <NEW_LINE><TAB> <TAB> iph -> ihl += opt -> opt . optlen >> 2 ; <NEW_LINE><TAB> <TAB> ip_options_build ( skb , & opt -> opt , daddr , rt , 0 ) ; <NEW_LINE>
const guchar * token , * next_token ; <NEW_LINE>
<TAB> if ( ec -> key ) <NEW_LINE><TAB> <TAB> { <NEW_LINE><TAB> <TAB> OPENSSL_cleanse ( ec -> key , ec -> keylen ) ; <NEW_LINE><TAB> <TAB> OPENSSL_free ( ec -> key ) ; <NEW_LINE><TAB> <TAB> } <NEW_LINE><NEW_LINE><TAB> ec -> key = ek ; <NEW_LINE><TAB> ec -> keylen = eklen ; <NEW_LINE>
return touch_file ( path , false , USEC_INFINITY , UID_INVALID , GID_INVALID , MODE_INVALID ) ; <NEW_LINE>
<TAB> <NEW_LINE><TAB> box = 0 ; <NEW_LINE><TAB> out = 0 ; <NEW_LINE>
if ( end - * p < 2 ) <NEW_LINE>
<TAB> if ( ! ptrace_may_access ( task , PTRACE_MODE_READ_REALCREDS ) ) { <NEW_LINE>
<TAB> <TAB> goto out ; <NEW_LINE>
length = image -> rows * ( bytes_per_line + bytes_per_line % 2 ) ; <NEW_LINE>
<NEW_LINE>
<TAB> <TAB> goto out_good ; <NEW_LINE>
FILE_RCSID ( "@ ( # ) $ File : cdf . c , v 1 . 56 2014 / 05 / 05 16 : 11 : 21 christos Exp $ " ) <NEW_LINE>
<TAB> return kvm_vcpu_has_lapic ( vcpu ) && vcpu -> arch . apic -> pending_events ; <NEW_LINE>
<TAB> <TAB> NAPI_GRO_CB ( skb ) -> encap_mark = 0 ; <NEW_LINE>
<TAB> <TAB> rc = crypto_memneq ( xattr_data -> digest , calc . digest , <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "crc32" ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "crc32 - pclmul" ) ;
static inline realpath_cache_bucket * realpath_cache_find ( const char * path , size_t path_len , time_t t ) <NEW_LINE>
<NEW_LINE>
<TAB> int <TAB> <TAB> <TAB> <TAB> byte_count = 0 , count = 0 ; <NEW_LINE>
<TAB> <TAB> sk -> sk_rcvbuf = max_t ( int , val * 2 , SOCK_MIN_RCVBUF ) ; <NEW_LINE>
last mod : $ Id : lookup_data . h 16037 2009 - 05 - 26 21 : 10 : 58Z xiphmont $ <NEW_LINE>
<TAB> return err == 0 ? NF_ACCEPT : NF_DROP ; <NEW_LINE>
<TAB> <TAB> ipv6_select_ident ( fh , rt ) ; <NEW_LINE>
<TAB> cmpt -> stream_ = ( inmem ) ? jas_stream_memopen2 ( 0 , size ) : <NEW_LINE>
if ( ! gsasl_server_support_p ( ctx -> gsasl_ctx , mech ) || ( ctx -> cb ) ( sx_sasl_cb_CHECK_MECH , ( void * ) mech , NULL , s , ctx -> cbarg ) != sx_sasl_ret_OK ) { <NEW_LINE>
<TAB> <TAB> evt -> event . lun [ 1 ] = tpg -> tport_tpgt ; <NEW_LINE>
<TAB> needquotes = true ; <NEW_LINE>
<TAB> char * data ; <NEW_LINE><NEW_LINE><TAB> data = kmalloc ( 2 , GFP_KERNEL ) ; <NEW_LINE><TAB> if ( ! data ) <NEW_LINE><TAB> <TAB> return - ENOMEM ; <NEW_LINE>
inline AutoCompartment ( ExclusiveContext * cx , JSCompartment * target ) ; <NEW_LINE>
dd_create_basic_files ( dd , fsuid , NULL ) ; <NEW_LINE>
<TAB> <NEW_LINE><TAB> req . len = ast_str_strlen ( req . data ) ; <NEW_LINE>
if ( ! _dopr ( & hugebufp , & dynbuf , & hugebufsize , & retlen , & ignored , format , <NEW_LINE>args ) ) { <NEW_LINE>OPENSSL_free ( dynbuf ) ; <NEW_LINE>return - 1 ; <NEW_LINE> } <NEW_LINE>
void unix_inflight ( struct user_struct * user , struct file * fp ) <NEW_LINE>
<TAB> return ret < 0 ? ret : - EIO ; <NEW_LINE>
IceConn ice_conn ; <NEW_LINE>GsmClient * client ; <NEW_LINE>GsmIceConnectionWatch * data ; <NEW_LINE>
<TAB> if ( ! f2fs_readonly ( sbi -> sb ) ) { <NEW_LINE>
<TAB> . flags = FLAG_POINTTOPOINT | FLAG_NO_SETINT | FLAG_MULTI_PACKET <NEW_LINE><TAB> <TAB> <TAB> | FLAG_LINK_INTR , <NEW_LINE>
<TAB> if ( header_len > LEVEL_3_MAX_HEADER_LEN <NEW_LINE><TAB> || header_len < RAW_DATA_LEN ( header ) ) { <NEW_LINE>
<TAB> <NEW_LINE>
if ( i < n_key_data - 1 ) <NEW_LINE>currkvno = key_data [ i + 1 ] . key_data_kvno ; <NEW_LINE>
<TAB> <NEW_LINE><TAB> cond_resched ( ) ; <NEW_LINE>
<NEW_LINE>
<TAB> <TAB> int count , int pmgr_flag ) ; <NEW_LINE>
strm -> next_in = in ; <NEW_LINE>strm -> next_out = out ; <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> goto error ; <NEW_LINE>
WCHAR updateStatusFilePath [ MAX_PATH + 1 ] = { L'\0' } ; <NEW_LINE>wcsncpy ( updateStatusFilePath , updateDirPath , MAX_PATH ) ; <NEW_LINE>
OriginClearCompleted ( const nsACString & aPattern ) ; <NEW_LINE>
<TAB> int delta_munlocked = - nr ; <NEW_LINE>
<TAB> bufsize = MIN ( file -> size , sizeof buf ) ; <NEW_LINE>
<TAB> <TAB> zend_throw_exception_ex ( spl_ce_BadMethodCallException , 0 TSRMLS_CC , " % s" , error ) ; <NEW_LINE>
<TAB> <TAB> <TAB> rc = jmp_rel ( ctxt , ctxt -> src . val ) ; <NEW_LINE>
CHECK_PRINCIPAL_AND_DATA ( ShouldProcess ) ; <NEW_LINE>
last mod : $ Id $ <NEW_LINE>
fprintf ( stderr , " ( % d ) , " , pageout ) ; <NEW_LINE>
<TAB> <TAB> sem_unlock ( sma , - 1 ) ; <NEW_LINE>
<NEW_LINE>int index = ( sy + y ) * CDG_SCREEN_PITCH + ( sx + x ) ; <NEW_LINE>if ( index >= CDG_SCREEN_PITCH * CDG_SCREEN_HEIGHT ) <NEW_LINE>return 0 ; <NEW_LINE><NEW_LINE>uint8_t * p = & p_cdg -> p_screen [ index ] ; <NEW_LINE><NEW_LINE>
<TAB> <TAB> <TAB> n = dn_expand ( answer -> qb2 , end , cp , name , ( sizeof name ) - 2 ) ; <NEW_LINE>
<TAB> <NEW_LINE>
return retval ; <NEW_LINE>
<TAB> if ( ( ! EXT4_SB ( inode -> i_sb ) -> s_journal ) && <NEW_LINE><TAB> ! ( EXT4_SB ( inode -> i_sb ) -> s_mount_state & EXT4_ORPHAN_FS ) ) <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> NEED_OP ( t , 0 ) ; <NEW_LINE>
int i = 0 ; <NEW_LINE>cl_int status = CL_SUCCESS ; <NEW_LINE>cl_uint numDevices = 0 ; <NEW_LINE>size_t * binarySizes = NULL ; <NEW_LINE>cl_device_id * devices = NULL ; <NEW_LINE>char ** binaries = NULL ; <NEW_LINE>char * str = NULL ; <NEW_LINE>int ret_value = 1 ; <NEW_LINE>
code = iakerb_alloc_context ( & ctx , 0 ) ; <NEW_LINE>
<TAB> <TAB> Huff_transmit ( & huff , ch , seq , size << 3 ) ; <TAB> <TAB> <TAB> <TAB> <TAB> <TAB> <NEW_LINE>
<TAB> CURLMcode error = CURLM_OK ; <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "twofish" ) ;
<TAB> <NEW_LINE><TAB> return parse_cosine_packet ( wth -> fh , & wth -> phdr , wth -> frame_buffer , <NEW_LINE><TAB> line , err , err_info ) ; <NEW_LINE>
FILE_RCSID ( "@ ( # ) $ File : readcdf . c , v 1 . 40 2014 / 03 / 06 15 : 23 : 33 christos Exp $ " ) <NEW_LINE>
<TAB> uint16_t type , phnum , shnum ; <NEW_LINE>
<TAB> len = file && file -> size > 0 ? file -> size : 4096 ; <NEW_LINE>
} JSVAL_ALIGNMENT jsval_layout ; <NEW_LINE>
<TAB> ( 1812433253UL * ( mt -> mt_buffer_ [ i - 1 ] ^ <NEW_LINE>
len = sizeof ( query ) ; <NEW_LINE>len -= my_snprintf ( query , len , "show columns from ` % s`" , <NEW_LINE>table ) ; <NEW_LINE>if ( wild && wild [ 0 ] && len ) <NEW_LINE>strxnmov ( query + strlen ( query ) , len , " like '" , wild , "'" , NullS ) ; <NEW_LINE>
<TAB> * temp = * ( temp - r -> bpp ) ; <NEW_LINE><TAB> temp += 1 ; <NEW_LINE><TAB> count -= 1 ; <NEW_LINE>
<NEW_LINE>
av_log ( mxf -> fc , AV_LOG_TRACE , "could not resolve essence container data strong ref\n" ) ; <NEW_LINE>
if ( so == & slirp -> udb || so -> so_lport != uh -> uh_sport || <NEW_LINE>
<NEW_LINE>nsCSSKeyframesRule * KeyframesRuleForName ( nsPresContext * aPresContext , <NEW_LINE>const nsString & aName ) ; <NEW_LINE>
NS_IMETHOD_ ( void ) NoteWeakMapping ( void * map , void * key , void * kdelegate , void * val ) = 0 ; <NEW_LINE>
<TAB> SECOidTag hashid ; <NEW_LINE>
<TAB> sem_unlock ( sma , - 1 ) ; <NEW_LINE>
problem_data_reload_from_dump_dir ( ) ; <NEW_LINE>update_gui_state_from_problem_data ( 0 ) ; <NEW_LINE>
if ( SSL_READ_ETM ( s ) && s -> read_hash ) { <NEW_LINE>
<TAB> <TAB> if ( opt ) { <NEW_LINE><TAB> <TAB> <TAB> atomic_sub ( opt -> tot_len , & sk -> sk_omem_alloc ) ; <NEW_LINE><TAB> <TAB> <TAB> txopt_put ( opt ) ; <NEW_LINE><TAB> <TAB> } <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "twofish" ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "twofish - asm" ) ;
<TAB> fmode_t <TAB> <TAB> <TAB> fmode ; <NEW_LINE>
<TAB> ( ( flags & O_ACCMODE ) != O_RDONLY || <NEW_LINE><TAB> ( flags & ( O_CREAT|O_TRUNC ) ) != 0 ) ) { <NEW_LINE>
<TAB> <TAB> <NEW_LINE><TAB> <TAB> mark_key_instantiated ( key , 0 ) ; <NEW_LINE>
<TAB> frame_table = ( guint32 * ) g_try_malloc ( frame_table_length ) ; <NEW_LINE><TAB> if ( frame_table_length != 0 && frame_table == NULL ) { <NEW_LINE><TAB> <TAB> * err = ENOMEM ; <TAB> <NEW_LINE><TAB> <TAB> return - 1 ; <NEW_LINE><TAB> } <NEW_LINE>
for ( p = 0 ; p < 4 && in -> data [ p ] && in -> linesize [ p ] ; p + + ) { <NEW_LINE>
static int xar_get_toc_data_values ( xmlTextReaderPtr reader , size_t * length , size_t * offset , size_t * size , int * encoding , <NEW_LINE>
<TAB> if ( ( ret = insert_vm_struct ( mm , vma ) ) ) { <NEW_LINE><TAB> <TAB> up_write ( & mm -> mmap_sem ) ; <NEW_LINE><TAB> <TAB> kmem_cache_free ( vm_area_cachep , vma ) ; <NEW_LINE><TAB> <TAB> return ret ; <NEW_LINE><TAB> } <NEW_LINE>
<TAB> vcpu -> arch . pv_time_enabled = false ; <NEW_LINE>
<TAB> else if ( anope_flags_compat && ! strcasecmp ( target , "MODIFY" ) && myentity_find_ext ( target ) == NULL ) <NEW_LINE>
<TAB> if ( arg >= cdi -> capacity ) <NEW_LINE>
<TAB> dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; <NEW_LINE>
<NEW_LINE>
<TAB> <TAB> if ( remain <= 0 ) {
<TAB> if ( kvm_apic_get_reg ( apic , APIC_TMICT ) == 0 || <NEW_LINE><TAB> <TAB> apic -> lapic_timer . period == 0 ) <NEW_LINE>
void oz_hcd_get_desc_cnf ( void * hport , u8 req_id , u8 status , const u8 * desc , <NEW_LINE><TAB> <TAB> <TAB> u8 length , u16 offset , u16 total_size ) <NEW_LINE>
<NEW_LINE><NEW_LINE><NEW_LINE>gboolean crm_recv_remote_msg ( void * session , char ** recv_buf , gboolean encrypted , int total_timeout_ms , int * disconnected ) ; <NEW_LINE>char * crm_recv_remote_raw ( void * data , gboolean encrypted , size_t max_recv , size_t * recv_len , int * disconnected ) ; <NEW_LINE>int crm_send_remote_msg ( void * session , xmlNode * msg , gboolean encrypted ) ; <NEW_LINE>int crm_recv_remote_ready ( void * session , gboolean encrypted , int timeout_ms ) ; <NEW_LINE>xmlNode * crm_parse_remote_buffer ( char ** msg_buf ) ; <NEW_LINE>int crm_remote_tcp_connect ( const char * host , int port ) ; <NEW_LINE><NEW_LINE>#ifdef HAVE_GNUTLS_GNUTLS_H <NEW_LINE><NEW_LINE>int crm_initiate_client_tls_handshake ( void * session_data , int timeout_ms ) ; <NEW_LINE><NEW_LINE>void * crm_create_anon_tls_session ( int sock , int type , void * credentials ) ; <NEW_LINE>#endif <NEW_LINE><NEW_LINE>#define REMOTE_MSG_TERMINATOR "\r\n\r\n" <NEW_LINE>
<TAB> user -> unix_inflight -- ; <NEW_LINE>
nsWindow * GetContainerWindow ( ) ; <NEW_LINE>
<TAB> if ( ! unconditional ( e ) ) <NEW_LINE>
<TAB> nfcb_poll -> sensb_res_len = min_t ( __u8 , * data + + , NFC_SENSB_RES_MAXSIZE ) ; <NEW_LINE>
int temp_size = 500 ; <NEW_LINE>char * temp = malloc ( temp_size ) ; <NEW_LINE><NEW_LINE>
length -= 4 ; <NEW_LINE>if ( length < 0 || length > 65 || PACKET -> DATA . len < length + 5 ) { <NEW_LINE>dissect_wipe_session ( PACKET , DISSECT_CODE ( dissector_postgresql ) ) ; <NEW_LINE>return NULL ; <NEW_LINE> } <NEW_LINE>snprintf ( ( char * ) conn_status -> password , length + 1 , " % s" , ( char * ) ( ptr + 5 ) ) ; <NEW_LINE>
nsSMILTimedElement * mElement ; <NEW_LINE>
NS_DECL_CYCLE_COLLECTING_ISUPPORTS <NEW_LINE><NEW_LINE>NS_DECL_CYCLE_COLLECTION_CLASS_AMBIGUOUS ( WebGLContext , nsICanvasRenderingContextWebGL ) <NEW_LINE><NEW_LINE>
#define GET_INDEXBASE ( pc ) ( JS_ASSERT ( * ( pc ) == JSOP_INDEXBASE \ <NEW_LINE> || * ( pc ) == JSOP_TRAP ) , \ <NEW_LINE>
<TAB> ( unsigned char * ) e + sizeof ( struct compat_arpt_entry ) >= limit || <NEW_LINE><TAB> ( unsigned char * ) e + e -> next_offset > limit ) { <NEW_LINE>
<TAB> if ( key_is_positive ( key ) ) <NEW_LINE>
<TAB> chip -> data_buffer = kzalloc ( TPM_BUFSIZE , GFP_KERNEL ) ; <NEW_LINE>
tmp = parse_code & 0x03 ; <NEW_LINE>if ( tmp > 2 ) { <NEW_LINE>av_log ( avctx , AV_LOG_ERROR , "num_refs of 3\n" ) ; <NEW_LINE>return - 1 ; <NEW_LINE> } <NEW_LINE>s -> num_refs = tmp ; <NEW_LINE>
last mod : $ Id $ <NEW_LINE>
<TAB> cl_cURLLib = Cvar_Get ( "cl_cURLLib" , DEFAULT_CURL_LIB , CVAR_ARCHIVE | CVAR_PROTECTED ) ; <NEW_LINE>
struct inet_peer <TAB> * inet_getpeer ( const struct inetpeer_addr * daddr , int create ) ; <NEW_LINE>
as_vmov ( VFPRegister ( dest ) . singleOverlay ( ) , VFPRegister ( src ) . singleOverlay ( ) ) ; <NEW_LINE>
<TAB> * ( ( struct vbg_ioctl_hdr * ) buf ) = hdr ; <NEW_LINE><TAB> if ( copy_from_user ( buf + sizeof ( hdr ) , ( void * ) arg + sizeof ( hdr ) , <NEW_LINE><TAB> <TAB> <TAB> hdr . size_in - sizeof ( hdr ) ) ) { <NEW_LINE>
netdev_tx_t hns_nic_net_xmit_hw ( struct net_device * ndev , <NEW_LINE><TAB> <TAB> <TAB> <TAB> struct sk_buff * skb , <NEW_LINE><TAB> <TAB> <TAB> <TAB> struct hns_nic_ring_data * ring_data ) ; <NEW_LINE>
<NEW_LINE>
<TAB> if ( ( psf = psf_allocate ( ) ) == NULL ) <NEW_LINE>
if ( i + 1 < data_size ) <NEW_LINE>block_length = data [ i ] * 256 + data [ i + 1 ] ; <NEW_LINE>
bool seek ( const Position & pos , const TokenStream & other ) ; <NEW_LINE>
FILE_RCSID ( "@ ( # ) $ File : readelf . c , v 1 . 116 2014 / 12 / 16 23 : 18 : 40 christos Exp $ " ) <NEW_LINE>
<TAB> if ( tcp_filter ( sk , skb ) ) <NEW_LINE>
s -> icy_metaint = strtoull ( p , NULL , 10 ) ; <NEW_LINE>
<NEW_LINE>if ( mk_security_check_url ( sr -> uri_processed ) < 0 ) { <NEW_LINE>
FILE_RCSID ( "@ ( # ) $ File : readelf . c , v 1 . 127 2015 / 11 / 18 12 : 29 : 29 christos Exp $ " ) <NEW_LINE>
cli_dbgmsg ( "cli_scanxar : Can't read % i bytes @ % li , errno : % s . \n" , <NEW_LINE>CLI_LZMA_HDR_SIZE , at , errbuff ) ; <NEW_LINE>
<TAB> size = MIN ( count , self -> buffer_size - self -> buffer_offset % self -> chunkSize ) ; <NEW_LINE><TAB> memcpy ( buf , self -> buffer + self -> buffer_offset % self -> chunkSize , size ) ; <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "stdrng" ) ;
p1 = BuildTestPacket ( IPPROTO_ICMP , id , 0 , 0 , 'A' , 8 ) ; <NEW_LINE>
<TAB> if ( writable ) { <NEW_LINE><TAB> <TAB> unix_state_lock ( sk ) ; <NEW_LINE><NEW_LINE><TAB> <TAB> other = unix_peer ( sk ) ; <NEW_LINE><TAB> <TAB> if ( other && unix_peer ( other ) != sk && <NEW_LINE><TAB> <TAB> unix_recvq_full ( other ) && <NEW_LINE><TAB> <TAB> unix_dgram_peer_wake_me ( sk , other ) ) <NEW_LINE><TAB> <TAB> <TAB> writable = 0 ; <NEW_LINE><NEW_LINE><TAB> <TAB> unix_state_unlock ( sk ) ; <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> sas_eh_finish_cmd ( cmd ) ; <NEW_LINE>
<TAB> <TAB> <TAB> if ( vma -> vm_ops ) <NEW_LINE><TAB> <TAB> <TAB> <TAB> return do_fault ( mm , vma , address , pte , pmd , <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> <TAB> flags , entry ) ; <NEW_LINE><NEW_LINE><TAB> <TAB> <TAB> return do_anonymous_page ( mm , vma , address , pte , pmd , <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> flags ) ; <NEW_LINE>
<TAB> if ( syscall_nr < 0 || syscall_nr >= NR_syscalls ) <NEW_LINE>
<TAB> <TAB> if ( sid >= maxsector ) { <NEW_LINE><TAB> <TAB> <TAB> DPRINTF ( ( "Sector % d >= % d\n" , sid , maxsector ) ) ; <NEW_LINE>
Copyright ( c ) 2009 , 2016 , MariaDB <NEW_LINE>
<TAB> int len = 0 ; <NEW_LINE>
<TAB> <TAB> rdata = ( DTLS1_RECORD_DATA * ) item -> data ; <NEW_LINE><TAB> <TAB> if ( rdata -> rbuf . buf ) <NEW_LINE><TAB> <TAB> <TAB> { <NEW_LINE><TAB> <TAB> <TAB> OPENSSL_free ( rdata -> rbuf . buf ) ; <NEW_LINE><TAB> <TAB> <TAB> } <NEW_LINE><TAB> <TAB> OPENSSL_free ( item -> data ) ; <NEW_LINE>
unlock : <NEW_LINE>
<NEW_LINE>const char * base = isarchive ? config_archivepartitiondir ( part ) <NEW_LINE> : config_partitiondir ( part ) ; <NEW_LINE>
<TAB> if ( * rsize >= 62 && rdesc [ 39 ] == 0x2a && rdesc [ 40 ] == 0xf5 && <NEW_LINE>
<TAB> size_t weights_size ; <NEW_LINE><TAB> if ( overflow2 ( windows_size , sizeof ( double ) ) ) { <NEW_LINE><TAB> <TAB> return NULL ; <NEW_LINE><TAB> } else { <NEW_LINE><TAB> <TAB> weights_size = windows_size * sizeof ( double ) ; <NEW_LINE><TAB> } <NEW_LINE>
if ( IsTextureSizeSafeToPassToDriver ( target , width , height ) ) { <NEW_LINE>mSymbols . fTexImage2D ( target , level , internalformat , width , height , border , format , type , pixels ) ; <NEW_LINE> } else { <NEW_LINE><NEW_LINE><NEW_LINE>mSymbols . fTexImage2D ( target , - 1 , internalformat , - 1 , - 1 , - 1 , format , type , nsnull ) ; <NEW_LINE> } <NEW_LINE>
<TAB> strncpy ( hid -> name , req -> name , sizeof ( req -> name ) - 1 ) ; <NEW_LINE>
virtual void WriteInternal ( const char * aBuffer , uint32_t aCount , DecodeStrategy aStrategy ) ; <NEW_LINE>
if ( pv -> parser == NULL || pv -> parser -> parser == NULL || <NEW_LINE>
if ( ! doapr_outch ( sbuffer , buffer , & currlen , maxlen , ch ) ) <NEW_LINE>return 0 ; <NEW_LINE>
if ( ctx -> terminated || ! ctx -> established ) <NEW_LINE>
if ( ( TIFFGetField ( tiff , 37706 , & length , & tietz ) == 1 ) && <NEW_LINE> ( tietz != ( unsigned long * ) NULL ) ) <NEW_LINE>
<TAB> struct ip_options_rcu __rcu <TAB> * inet_opt ; <NEW_LINE>
<TAB> fname_len = Z_STRLEN_P ( value ) ; <NEW_LINE>
enum { FIXNUM_WIDTH = ( ( 8 * sizeof ( native_int ) ) - TAG_SHIFT - 1 ) } ; <NEW_LINE>enum { <NEW_LINE>FIXNUM_MAX = ( ( ( native_int ) 1 << FIXNUM_WIDTH ) - 1 ) , <NEW_LINE>FIXNUM_MIN = - ( ( ( native_int ) 1 << FIXNUM_WIDTH ) - 1 ) <NEW_LINE> } ; <NEW_LINE>
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED ( DOMCursor , <NEW_LINE>DOMRequest ) <NEW_LINE>
const int anon_tls_kx_order [ ] = { <NEW_LINE>
<TAB> OPT_INFILE , <NEW_LINE><TAB> OPT_DEBUG <NEW_LINE>
int mutt_b64_decode ( char * out , const char * in , size_t olen ) ; <NEW_LINE>
last mod : $ Id $ <NEW_LINE>
<TAB> cl_renderer = Cvar_Get ( "cl_renderer" , "opengl1" , CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED ) ; <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "md5" ) ; <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> <TAB> KEY_ALLOC_UID_KEYRING | <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> <TAB> KEY_ALLOC_IN_QUOTA , <NEW_LINE>
<TAB> pr_info ( " % s : ' % s : % s' successfully deinitialized and disconnected\n" , <NEW_LINE><TAB> <TAB> KBUILD_MODNAME , drvname , devname ) ; <NEW_LINE><TAB> kfree ( devname ) ; <NEW_LINE>
unlink ( path ) ; <NEW_LINE>int abrt_core_fd = xopen3 ( path , O_WRONLY | O_CREAT | O_EXCL , 0600 ) ; <NEW_LINE>
<TAB> <TAB> cwd_skip = strlen ( cwd ) + 1 ; <NEW_LINE>
if ( ! * ptrptr && nmemb && size ) <NEW_LINE>
#include < linux / mbcache2 . h > <NEW_LINE>
<TAB> <NEW_LINE><TAB> if ( ! mm || ! mm -> env_end ) <NEW_LINE>
<TAB> struct mutex ioctl_lock ; <NEW_LINE>
last mod : $ Id $ <NEW_LINE>
<TAB> <TAB> v . val = ! ! test_bit ( SOCK_PASSCRED , & sock -> flags ) ; <NEW_LINE>
<NEW_LINE>
touch_file ( t -> stamp_path , true , t -> last_trigger . realtime , UID_INVALID , GID_INVALID , MODE_INVALID ) ; <NEW_LINE>
<TAB> <TAB> if ( ! mp -> ports && ! mp -> mglist && mp -> timer_armed && <NEW_LINE>
<NEW_LINE>
<NEW_LINE>
<TAB> EVENT_NULL , aggr_inI1_outR1 } ,
<NEW_LINE>void test_parser_param ( uint8_t hvi_trick ) { <NEW_LINE>
int len , nb_components , i , width , height , bits , pix_fmt_id , ret ; <NEW_LINE>
<TAB> <TAB> <TAB> | FLAG_LINK_INTR | FLAG_WWAN , <NEW_LINE>
<TAB> char buf [ 1024 ] ; <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "sha512" ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "sha384" ) ;
if ( ( mask & KADM5_POLICY ) && entry -> policy == NULL ) <NEW_LINE>return KADM5_BAD_MASK ; <NEW_LINE>
fd = cups_open ( filename , O_WRONLY | O_LARGEFILE | O_BINARY ) ; <NEW_LINE><TAB> if ( fd < 0 && errno == ENOENT ) <NEW_LINE><TAB> { <NEW_LINE><TAB> fd = cups_open ( filename , <NEW_LINE><TAB> O_WRONLY | O_CREAT | O_EXCL | O_LARGEFILE | O_BINARY ) ; <NEW_LINE><TAB> if ( fd < 0 && errno == EEXIST ) <NEW_LINE><TAB> fd = cups_open ( filename , O_WRONLY | O_LARGEFILE | O_BINARY ) ; <NEW_LINE><TAB> } <NEW_LINE><NEW_LINE><TAB> if ( fd >= 0 ) <NEW_LINE><TAB> ftruncate ( fd , 0 ) ; <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> mask = ( JAS_CAST ( uint_fast32_t , 1 ) << numbps ) - 1 ; <NEW_LINE>
state -> object_nl = fstrndup ( RSTRING_PTR ( object_nl ) , len ) ; <NEW_LINE>
<TAB> mpz_powm_sec ( r , key -> g , k , key -> p ) ; <NEW_LINE>
<TAB> <TAB> if ( OFFSET_OOB ( nbytes , offset , 0 ) ) <NEW_LINE>
last mod : $ Id $ <NEW_LINE>
if ( eindex < 0 || eindex >= MAX_EVENTS ) { <NEW_LINE>
bool ExitScript ( JSContext * , JSScript * , JSFunction * , bool popSPSFrame ) ; <NEW_LINE>
<TAB> INF ( "io" , <TAB> S_IRUSR , proc_tgid_io_accounting ) , <NEW_LINE>
<TAB> <NEW_LINE><TAB> case AST_OPTION_TONE_VERIFY : <NEW_LINE><TAB> case AST_OPTION_TDD : <NEW_LINE><TAB> case AST_OPTION_RELAXDTMF : <NEW_LINE><TAB> case AST_OPTION_AUDIO_MODE : <NEW_LINE><TAB> case AST_OPTION_DIGIT_DETECT : <NEW_LINE><TAB> case AST_OPTION_FAX_DETECT : <NEW_LINE>
<TAB> if ( ccid != NULL && ccid -> ccid_ops -> ccid_hc_rx_getsockopt != NULL ) <NEW_LINE>
<TAB> <TAB> <TAB> zend_throw_exception_ex ( spl_ce_UnexpectedValueException , 0 TSRMLS_CC , " % s" , error ) ; <NEW_LINE>
<NEW_LINE>
state -> space_before = fstrndup ( RSTRING_PTR ( space_before ) , len ) ; <NEW_LINE>
<TAB> <TAB> <TAB> if ( likely ( HAVE_OP ( t , 15 ) ) ) { <NEW_LINE>
<NEW_LINE>l_data_size = 1 + ( OPJ_UINT32 ) ( ( p_code_block -> x1 - p_code_block -> x0 ) * <NEW_LINE> ( p_code_block -> y1 - p_code_block -> y0 ) * ( OPJ_INT32 ) sizeof ( OPJ_UINT32 ) ) ; <NEW_LINE>
std : : string hostname = node . hostname . empty ( ) ? " * " : node . hostname ; <NEW_LINE>std : : string addr = local ? "ipc : <NEW_LINE>
if ( prefixlen <= len ) { <NEW_LINE>
<TAB> if ( syscall_nr < 0 || syscall_nr >= NR_syscalls ) <NEW_LINE>
<TAB> if ( page && page_name_is_good ( page ) && ( access ( page , R_OK ) == 0 ) ) <NEW_LINE>
nsHttpRequestHead ( ) : mMethod ( nsHttp : : Get ) , mVersion ( NS_HTTP_VERSION_1_1 ) { } <NEW_LINE>
<TAB> <TAB> if ( M_fs_perms_can_access ( p2 , M_FS_PERMS_MODE_NONE ) == M_FS_ERROR_SUCCESS ) { <NEW_LINE>
snprintf ( charbuf , sizeof ( charbuf ) , " % s_thumb_ % 03d" , rootname , index ) ; <NEW_LINE>
<TAB> <TAB> { . first = NULL } , <TAB> <TAB> <TAB> <TAB> <TAB> \ <NEW_LINE><TAB> <TAB> { . first = NULL } , <TAB> <TAB> <TAB> <TAB> <TAB> \ <NEW_LINE><TAB> <TAB> { . first = NULL } , <TAB> <TAB> <TAB> <TAB> <TAB> \ <NEW_LINE>
<TAB> <NEW_LINE><TAB> return pmd_flags ( pmd ) & ( _PAGE_PRESENT | _PAGE_PROTNONE | _PAGE_PSE ) ; <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> <TAB> struct ip_options_rcu * opt ) ; <NEW_LINE>
<TAB> JAS_DBGLOG ( 101 , ( "jas_malloc ( % zu ) \n" , size ) ) ; <NEW_LINE>
<TAB> if ( ret < 0 && ! p -> skip_release_on_error ) <NEW_LINE>
nsTArray < nsCOMPtr < nsIContent > > mOwnedElements ; <NEW_LINE>
if ( mPresShell ) { <NEW_LINE>nsRefPtr < PresShell > shell = mPresShell ; <NEW_LINE>shell -> ProcessSynthMouseMoveEvent ( mFromScroll ) ; <NEW_LINE> } <NEW_LINE>
REProgState * curState = NULL ; <NEW_LINE>
<TAB> . llseek <TAB> <TAB> = ftrace_filter_lseek , <NEW_LINE>
<TAB> if ( ! mcryptd_check_internal ( tb , & type , & mask ) ) <NEW_LINE><TAB> <TAB> return - EINVAL ; <NEW_LINE>
<TAB> int buflen = bin -> buf -> length - ( ut32 ) sec -> payload_data ; <NEW_LINE>
<TAB> <TAB> msg -> msg_namelen = sizeof ( * sx25 ) ; <NEW_LINE>
<TAB> <TAB> <TAB> if ( sibling -> rt6i_metric == rt -> rt6i_metric && <NEW_LINE><TAB> <TAB> <TAB> rt6_qualify_for_ecmp ( sibling ) ) { <NEW_LINE>
<NEW_LINE>
last mod : $ Id $ <NEW_LINE>
<TAB> ctx2 -> more = more ; <NEW_LINE><NEW_LINE><TAB> if ( ! more ) <NEW_LINE><TAB> <TAB> return err ; <NEW_LINE>
<TAB> rv = verifyPKCS1DigestInfo ( cx , digest ) ; <NEW_LINE>
<NEW_LINE>
<TAB> <TAB> <TAB> sem_unlock ( sma , - 1 ) ; <NEW_LINE>
<TAB> if ( ( creds -> pid == task_tgid_vnr ( current ) || <NEW_LINE><TAB> ns_capable ( current -> nsproxy -> pid_ns -> user_ns , CAP_SYS_ADMIN ) ) && <NEW_LINE>
FILE_RCSID ( "@ ( # ) $ File : readelf . c , v 1 . 138 2017 / 08 / 27 07 : 55 : 02 christos Exp $ " ) <NEW_LINE>
size2 , NULL ) ; <NEW_LINE>
size_t count , const cdf_directory_t * root_storage ) <NEW_LINE>
nsresult InitBasic ( ) ; <NEW_LINE>
extern void ssl3_SetSIDSessionTicket ( sslSessionID * sid , <NEW_LINE><TAB> <TAB> <TAB> NewSessionTicket * session_ticket , <NEW_LINE><TAB> <TAB> <TAB> PRBool isResumptionUpdate ) ; <NEW_LINE>
<TAB> <TAB> . match_data . cmp <TAB> <TAB> = key_default_cmp , <NEW_LINE>
if ( ctx -> internal_ctx_id != GSS_C_NO_CONTEXT ) { <NEW_LINE><TAB> status = gssint_delete_internal_sec_context ( minor_status , <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> <TAB> ctx -> mech_type , <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> <TAB> & ctx -> internal_ctx_id , <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> <TAB> output_token ) ; <NEW_LINE><TAB> if ( status ) <NEW_LINE><TAB> return status ; <NEW_LINE> } <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "tnepres" ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "serpent" ) ;
MODULE_ALIAS_CRYPTO ( "gcm_base" ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "rfc4106" ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "rfc4543" ) ;
<TAB> if ( arg >= cdi -> capacity ) <NEW_LINE>
vorbis_info_psy_global * gi , <NEW_LINE>float * data , <NEW_LINE>envelope_band * bands , <NEW_LINE>envelope_filter_state * filters ) { <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "serpent" ) ;
<TAB> <TAB> if ( state < 0 ) { <NEW_LINE><TAB> <TAB> <TAB> ctx -> result = ERR_PTR ( state ) ; <NEW_LINE>
if ( server -> method ) <NEW_LINE>fprintf ( f , " , \n\"method\" : \" % s\"" , server -> method ) ; <NEW_LINE>else if ( manager -> method ) <NEW_LINE>fprintf ( f , " , \n\"method\" : \" % s\"" , manager -> method ) ; <NEW_LINE>if ( server -> fast_open [ 0 ] ) <NEW_LINE>fprintf ( f , " , \n\"fast_open\" : % s" , server -> fast_open ) ; <NEW_LINE>if ( server -> mode ) <NEW_LINE>fprintf ( f , " , \n\"mode\" : \" % s\"" , server -> mode ) ; <NEW_LINE>if ( server -> plugin ) <NEW_LINE>fprintf ( f , " , \n\"plugin\" : \" % s\"" , server -> plugin ) ; <NEW_LINE>if ( server -> plugin_opts ) <NEW_LINE>fprintf ( f , " , \n\"plugin_opts\" : \" % s\"" , server -> plugin_opts ) ; <NEW_LINE>
print_primaries ( w , par -> color_primaries ) ; <NEW_LINE>
<TAB> <TAB> zend_throw_exception_ex ( phar_ce_PharException , 0 TSRMLS_CC , " % s" , error ) ; <NEW_LINE>
<TAB> <TAB> <TAB> eprintf ( "DWARF : Unexpected pointer size : % u\n" , ( unsigned ) hdr -> pointer_size ) ; <NEW_LINE>
virtual nsresult OpenContentStream ( PRBool async , nsIInputStream ** result , <NEW_LINE>nsIChannel ** channel ) ; <NEW_LINE>
<TAB> if ( tag == ASN1_EOC ) { <NEW_LINE>
<NEW_LINE>void ClearTextRun ( nsTextFrame * aStartContinuation ) ; <NEW_LINE>
<TAB> if ( used_address && msg_sys -> msg_name && <NEW_LINE><TAB> used_address -> name_len == msg_sys -> msg_namelen && <NEW_LINE><TAB> ! memcmp ( & used_address -> name , msg_sys -> msg_name , <NEW_LINE>
<TAB> int copylen = 0 ; <NEW_LINE>
<TAB> <TAB> goto error ; <NEW_LINE><TAB> <TAB> <NEW_LINE>
<TAB> CERTCertificate * the_cert = <NEW_LINE>SECU_FindCertByNicknameOrFilename ( handle , name , ascii , NULL ) ; <NEW_LINE>if ( ! the_cert ) { <NEW_LINE>SECU_PrintError ( progName , "Could not find cert : % s\n" , name ) ; <NEW_LINE>return SECFailure ; <NEW_LINE> } <NEW_LINE>
<TAB> <TAB> <TAB> zend_throw_exception_ex ( phar_ce_PharException , 0 TSRMLS_CC , " % s" , error ) ; <NEW_LINE>
for ( j = last ; j < this ; j + + ) { <NEW_LINE>oggpack_write ( opb , i - count , _ilog ( c -> entries - count ) ) ; <NEW_LINE>count = i ; <NEW_LINE> } <NEW_LINE>
<NEW_LINE>
<TAB> <TAB> if ( vsa && vportno > 0 ) { <NEW_LINE>
<TAB> s64 <TAB> <TAB> <TAB> it_overrun ; <NEW_LINE><TAB> s64 <TAB> <TAB> <TAB> it_overrun_last ; <NEW_LINE>
<TAB> <TAB> if ( ( tcptls_session -> f = fdopen ( tcptls_session -> fd , "w + " ) ) ) { <NEW_LINE><TAB> <TAB> <TAB> if ( setvbuf ( tcptls_session -> f , NULL , _IONBF , 0 ) ) { <NEW_LINE><TAB> <TAB> <TAB> <TAB> fclose ( tcptls_session -> f ) ; <NEW_LINE><TAB> <TAB> <TAB> <TAB> tcptls_session -> f = NULL ; <NEW_LINE><TAB> <TAB> <TAB> } <NEW_LINE><TAB> <TAB> } <NEW_LINE>
<TAB> if ( ! jas_safe_size_mul ( dec -> numhtiles , dec -> numvtiles , & size ) ) { <NEW_LINE><TAB> <TAB> return - 1 ; <NEW_LINE><TAB> } <NEW_LINE><TAB> dec -> numtiles = size ; <NEW_LINE>
<TAB> mpz_powm_sec ( v , v , key -> d , key -> n ) ; <NEW_LINE>
#include < linux / crypto . h > <NEW_LINE>
<TAB> if ( ! list_empty ( & asoc -> asocs ) ) { <NEW_LINE>
s -> cur_pic . field_picture <NEW_LINE>
return mutt_bcache_del ( bcache , cache_id ( id ) ) ; <NEW_LINE>
<TAB> <TAB> <TAB> if ( conn_opt -> val != NULL && conn_opt -> val [ 0 ] != '\0' && <NEW_LINE><TAB> <TAB> <TAB> <TAB> strcmp ( conn_opt -> keyword , "dbname" ) != 0 ) <NEW_LINE>
SetHeader ( atom , nsDependentCString ( p , p2 - p ) , PR_TRUE , PR_FALSE ) ; <NEW_LINE>
<TAB> <TAB> if ( x & ( 1U << ( unsigned int ) i ) ) return i ; <NEW_LINE>
<TAB> u16 offset [ NF_CT_EXT_NUM ] ; <NEW_LINE><TAB> u16 len ; <NEW_LINE>
<TAB> unsigned long vm_flags = VM_READ | VM_WRITE | VM_EXEC ; <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "salsa20" ) ;
<TAB> if ( rec_hdr . hdr . incl_len > WTAP_MAX_PACKET_SIZE ) { <NEW_LINE>
<TAB> php_pcre_match_impl ( pce , subject , subject_len , return_value , subpats , <NEW_LINE>
nsresult MarkLineDirty ( line_iterator aLine , <NEW_LINE>const nsLineList * aLineList = nsnull ) ; <NEW_LINE>
<TAB> if ( ss -> xtnData . sentSessionTicketInClientHello ) <NEW_LINE>
<TAB> <TAB> ! capable_wrt_inode_uidgid ( inode , CAP_FSETID ) ) <NEW_LINE>
<TAB> <TAB> if ( assoc_array_ptr_is_leaf ( ptr ) && <NEW_LINE><TAB> <TAB> ops -> compare_object ( assoc_array_ptr_to_leaf ( ptr ) , <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> index_key ) ) { <NEW_LINE>
<TAB> } else <NEW_LINE><TAB> <TAB> free ( flagsp ) ; <NEW_LINE>
<TAB> opt = rcu_dereference_protected ( np -> opt , sock_owned_by_user ( sk ) ) ; <NEW_LINE><TAB> final_p = fl6_update_dst ( & fl6 , opt , & final ) ; <NEW_LINE>
CWD_API realpath_cache_bucket * realpath_cache_lookup ( const char * path , size_t path_len , time_t t ) <NEW_LINE>
<NEW_LINE>
<TAB> . splice_write <TAB> = iter_file_splice_write , <NEW_LINE>
HKEY hkApp = nullptr ; <NEW_LINE>
static already_AddRefed < MediaResource > Create ( MediaDecoder * aDecoder , nsIChannel * aChannel ) ; <NEW_LINE>
fd = cups_open ( filename , <NEW_LINE><TAB> <TAB> O_RDWR | O_CREAT | O_APPEND | O_LARGEFILE | O_BINARY ) ; <NEW_LINE>
state -> array_nl = fstrndup ( RSTRING_PTR ( array_nl ) , len ) ; <NEW_LINE>
<NEW_LINE>
<TAB> error = curl_multi_remove_handle ( mh -> multi , ch -> cp ) ; <NEW_LINE><TAB> SAVE_CURLM_ERROR ( mh , error ) ; <NEW_LINE><NEW_LINE><TAB> RETVAL_LONG ( ( zend_long ) error ) ; <NEW_LINE>
<TAB> <TAB> unsigned char * ek = NULL , * tkey = NULL ; <NEW_LINE><TAB> <TAB> int eklen , tkeylen ; <NEW_LINE>
height ; <NEW_LINE>
<TAB> if ( op -> op > 0xbf ) { <NEW_LINE><TAB> <TAB> return 1 ; <NEW_LINE><TAB> } <NEW_LINE>
<TAB> savesegment ( fs , fs_selector ) ; <NEW_LINE><TAB> savesegment ( gs , gs_selector ) ; <NEW_LINE>
void neuter ( void * newData ) ; <NEW_LINE>
if ( ( i = cdf_file_summary_info ( ms , & h , & scn , root_storage ) ) < 0 ) <NEW_LINE>expn = "Can't expand summary_info" ; <NEW_LINE>
static inline zend_ulong realpath_cache_key ( const char * path , size_t path_len ) <NEW_LINE>
<TAB> sem_lock ( sma , NULL , - 1 ) ; <NEW_LINE>
uni_to_string ( get_finfo_value_string ( PTREE_FINFO ( tree_pointer ) ) , MIN ( get_finfo_length ( PTREE_FINFO ( tree_pointer ) ) , buffer_size ) , buffer ) ; <NEW_LINE>
<TAB> newinet -> inet_opt = NULL ; <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "intel_qat" ) ;
<TAB> if ( ! object || object -> list . length != 2 || ! object -> list . objects || <NEW_LINE><TAB> <TAB> ! object -> list . objects [ 0 ] || ! object -> list . objects [ 1 ] || <NEW_LINE><TAB> <TAB> object -> list . objects [ 1 ] -> list . length != 1 ) { <NEW_LINE>
struct btrfs_dir_item * btrfs_match_dir_item_name ( struct btrfs_root * root , <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> <TAB> struct btrfs_path * path , <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> <TAB> const char * name , int name_len ) <NEW_LINE>
<TAB> u64 insn_bitness = ( BPF_CLASS ( insn -> code ) == BPF_ALU64 ) ? 64 : 32 ; <NEW_LINE>
<TAB> <TAB> entries = kmalloc_array ( cmap -> len , sizeof ( * entries ) , <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> GFP_KERNEL ) ; <NEW_LINE>
<TAB> <TAB> <TAB> if ( i + bs > ( int ) rec -> length ) <NEW_LINE>
nsCxPusher mCxPusher ; <NEW_LINE><NEW_LINE>
if ( buf_size < 26 ) { <NEW_LINE>
: capacity ( capacity ) , initializedLength ( 0 ) , length ( length ) , flags ( 0 ) <NEW_LINE>
touch_file ( t -> stamp_path , true , USEC_INFINITY , UID_INVALID , GID_INVALID , MODE_INVALID ) ; <NEW_LINE>
<TAB> remaining = tvb_reported_length_remaining ( tvb , offset ) ; <NEW_LINE>
<TAB> dprintk ( 2 , "vm_close % p [ count = % u , vma = % 08lx - % 08lx ] \n" , map , <NEW_LINE>
<TAB> <NEW_LINE><TAB> return parse_cosine_packet ( wth -> random_fh , phdr , buf , line , err , <NEW_LINE>
<TAB> <NEW_LINE><TAB> if ( qcms_supports_iccv4 && <NEW_LINE><TAB> <TAB> <TAB> ( in_type == QCMS_DATA_RGB_8 || in_type == QCMS_DATA_RGBA_8 ) && <NEW_LINE><TAB> <TAB> <TAB> ( in -> A2B0 || out -> B2A0 || in -> mAB || out -> mAB ) ) <NEW_LINE><TAB> <TAB> {
if ( ( pendingCount == pendingCapacity ) && ! growPendingArray ( cx ) ) <NEW_LINE>return ; <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> snprintf ( op -> buf_asm , sizeof ( op -> buf_asm ) , "packed - switch - payload % d , % d" , array_size , first_key ) ; <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "aes" ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "aes - asm" ) ; <NEW_LINE>
void ResizeTransparencyBitmap ( ) ; <NEW_LINE>
<TAB> if ( ! PS ( use_only_cookies ) && ! PS ( id ) && <NEW_LINE>
<TAB> <TAB> copy_flags |= CL_SHARED_TO_SLAVE | CL_UNPRIVILEGED ; <NEW_LINE>
#define MNT_USER_SETTABLE_MASK ( MNT_NOSUID | MNT_NODEV | MNT_NOEXEC \ <NEW_LINE><TAB> <TAB> <TAB> <TAB> | MNT_NOATIME | MNT_NODIRATIME | MNT_RELATIME \ <NEW_LINE><TAB> <TAB> <TAB> <TAB> | MNT_READONLY ) <NEW_LINE>
<TAB> if ( fp && NFCT_FRAG6_CB ( fp ) -> orig == NULL ) <NEW_LINE>
unsigned long outlen , loid [ 16 ] , reallen ; <NEW_LINE>
<TAB> hrtimer_try_to_cancel ( & stime -> hrt ) ; <NEW_LINE>
<NEW_LINE>
shapes ( alloc ) , <NEW_LINE>visiting ( false ) <NEW_LINE>
static nsresult getXSLTId ( const txXPathNode & aNode , <NEW_LINE>const txXPathNode & aBase , nsAString & aResult ) ; <NEW_LINE>
<TAB> if ( shdr -> sh_size < 1 || shdr -> sh_size > SIZE_MAX ) { <NEW_LINE>
#include < linux / math64 . h > <NEW_LINE>#include < asm / uaccess . h > <NEW_LINE>
code = iakerb_alloc_context ( & ctx , 1 ) ; <NEW_LINE>
<TAB> struct o2nm_cluster * cluster ; <NEW_LINE>
<TAB> <NEW_LINE>
static nsComboboxControlFrame * sFocused ; <NEW_LINE>
<TAB> u8 * odata = pctx -> odata ; <NEW_LINE><TAB> u8 * idata = pctx -> idata ; <NEW_LINE>
JSObject * res = builder . clone ( regex , proto ) ; <NEW_LINE>JS_ASSERT ( res -> type ( ) == obj_ -> type ( ) ) ; <NEW_LINE>return res ; <NEW_LINE>
if ( startedFromUnelevatedUpdater ) { <NEW_LINE>
_wfopen_s ( & fp , path , L"rb" ) ; <NEW_LINE>
<TAB> <TAB> vhost_net_ubuf_put_wait_and_free ( oldubufs ) ; <NEW_LINE>
PRBool DownloadableFontsEnabled ( ) ; <NEW_LINE><NEW_LINE><NEW_LINE>PRBool SanitizeDownloadedFonts ( ) ; <NEW_LINE>
<TAB> <TAB> if ( offset > pkt_len ) { <NEW_LINE>
int i , hasAdditionalBlocks , <NEW_LINE>
<TAB> if ( udf_build_ustr_exact ( unifilename , sname , slen ) ) <NEW_LINE>
bool RemoveMessageAndDispatchPluginEvent ( UINT aFirstMsg , UINT aLastMsg ) const ; <NEW_LINE>
<TAB> <TAB> <TAB> rq = tags -> rqs [ off + bit ] ; <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> <TAB> <TAB> <TAB> snprintf ( bname , sizeof ( bname ) , " % s % s" , <NEW_LINE>
if ( ( ' % ' == in ) && ( alloc > 2 ) && <NEW_LINE>ISXDIGIT ( string [ 1 ] ) && ISXDIGIT ( string [ 2 ] ) ) { <NEW_LINE>
mpz_powm_sec ( b , b , key -> e , key -> n ) ; <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "ghash" ) ;
<TAB> <NEW_LINE><TAB> return GSS_S_UNAVAILABLE ; <NEW_LINE>
<TAB> <TAB> <TAB> goto out_release ; <NEW_LINE>
<TAB> <TAB> if ( perf_event_overflow ( event , & data , regs ) ) {
<TAB> <TAB> v |= ( JAS_CAST ( uint_fast32_t , c ) << 24 ) ; <NEW_LINE>
FILE_RCSID ( "@ ( # ) $ File : softmagic . c , v 1 . 190 2014 / 06 / 03 19 : 01 : 34 christos Exp $ " ) <NEW_LINE>
<TAB> <TAB> goto failed_mount_wq ; <NEW_LINE>
<TAB> case EXIT_REASON_INVEPT : case EXIT_REASON_INVVPID :
image -> alpha_trait = viff_info . number_data_bands == 4 ? BlendPixelTrait : <NEW_LINE>
<TAB> return ( tsfb -> numlvls > 0 && jas_seq2d_size ( a ) ) ? <NEW_LINE><TAB> jpc_tsfb_synthesize2 ( tsfb , <NEW_LINE>
<TAB> <TAB> if ( sa && portno > 0 ) { <NEW_LINE>
nsHttpResponseHead ( ) : mVersion ( NS_HTTP_VERSION_1_1 ) <NEW_LINE>
int cib_remote_callback_dispatch ( gpointer user_data ) ; <NEW_LINE>int cib_remote_command_dispatch ( gpointer user_data ) ; <NEW_LINE>
extent = MagickMax ( image -> columns , image -> rows ) * quantum ; <NEW_LINE>if ( ( MagickMax ( image -> columns , image -> rows ) != 0 ) && <NEW_LINE> ( quantum != ( extent / MagickMax ( image -> columns , image -> rows ) ) ) ) <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> coerce_reg_to_size ( & regs [ insn -> dst_reg ] , 4 ) ; <NEW_LINE>
CHECK_PIXEL_PTR ( 2 * byte_run ) ; <NEW_LINE>
public nsStubMutationObserver , <NEW_LINE>public nsIDocument_MOZILLA_1_9_2_BRANCH <NEW_LINE>
<TAB> <TAB> coerce_reg_to_size ( dst_reg , 4 ) ; <NEW_LINE><TAB> <TAB> coerce_reg_to_size ( & src_reg , 4 ) ; <NEW_LINE>
void RequestUpdatePluginGeometry ( ) ; <NEW_LINE>
dom : : Uint8ClampedArray * aArray , <NEW_LINE>
<TAB> if ( used_address && msg_sys -> msg_name && <NEW_LINE><TAB> used_address -> name_len == msg_sys -> msg_namelen && <NEW_LINE><TAB> ! memcmp ( & used_address -> name , msg_sys -> msg_name , <NEW_LINE>
<NEW_LINE>
#define MY_REDEL_NO_COPY_STAT 512 <NEW_LINE>
<TAB> snprintf ( address , sizeof ( address ) , " % s : % s" , url , port ) ; <NEW_LINE>
<TAB> when = timespec_to_ns ( & new_setting -> it_value ) ; <NEW_LINE><TAB> period = timespec_to_ns ( & new_setting -> it_interval ) ; <NEW_LINE>
static struct mount * last_dest , * first_source , * last_source , * dest_master ; <NEW_LINE>
const char * filename , PRInt32 lineNo , PRBool returnString , <NEW_LINE>jsval * rval ) ; <NEW_LINE>
#define JSXDR_BYTECODE_VERSION ( 0xb973c0de - 88 )
last mod : $ Id $
<TAB> ptr = strchr ( ptr + 1 , ' / ' ) ; <NEW_LINE><TAB> if ( ptr == NULL ) <NEW_LINE><TAB> <TAB> return ( ENOENT ) ; <NEW_LINE><TAB> ptr + + ; <NEW_LINE>
void SetQuotes ( PRBool aNotify ) ; <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> list_del_init ( & ti -> active_list ) ; <NEW_LINE>
<NEW_LINE><NEW_LINE>
<NEW_LINE><TAB> if ( ( st . st_mode & S_IFREG ) == 0 || st . st_size <= 0 ) { <NEW_LINE><TAB> <TAB> st . st_size = 64 * 1024 ; <NEW_LINE><TAB> <TAB> dontmax = 1 ; <NEW_LINE><TAB> } <NEW_LINE><TAB> if ( ( r = sshbuf_allocate ( blob , st . st_size ) ) != 0 || <NEW_LINE><TAB> ( dontmax && ( r = sshbuf_set_max_size ( blob , st . st_size ) ) != 0 ) ) <NEW_LINE><TAB> <TAB> return r ; <NEW_LINE>
if ( p -> tokenpos >= ( p -> tokenlen - 1 ) ) { <NEW_LINE>
if ( ( ret = test_streaming ( stream , <NEW_LINE><TAB> <TAB> <TAB> buf , <NEW_LINE><TAB> <TAB> <TAB> buf + ( 1 << 20 ) , <NEW_LINE><TAB> <TAB> <TAB> buf + ( 2 << 20 ) , <NEW_LINE><TAB> <TAB> <TAB> 1 << 12 ) ) ) <NEW_LINE>
static const float vwin512 [ 256 ] = { <NEW_LINE>
last mod : $ Id : codebook . c 16597 2009 - 10 - 01 02 : 54 : 22Z tterribe $ <NEW_LINE>
<NEW_LINE>extern void <NEW_LINE>js_GCMarkSharpMap ( JSContext * cx , JSSharpObjectMap * map ) ; <NEW_LINE><NEW_LINE>
<TAB> <TAB> <TAB> <TAB> bool & isvalid , CryptoKey & session_key , <NEW_LINE><TAB> <TAB> <TAB> <TAB> std : : unique_ptr < AuthAuthorizerChallenge > * challenge ) { <NEW_LINE>
<TAB> <TAB> if ( ! ipc_rcu_getref ( sma ) ) { <NEW_LINE><TAB> <TAB> <TAB> rcu_read_unlock ( ) ; <NEW_LINE><TAB> <TAB> <TAB> return - EIDRM ; <NEW_LINE><TAB> <TAB> } <NEW_LINE>
<TAB> cert = SECU_FindCertByNicknameOrFilename ( handle , name , ascii , <NEW_LINE>NULL ) ; <NEW_LINE>
<NEW_LINE>
( Rec2 . RecordLength - 2 - 2 ) / 3 ) <NEW_LINE>ThrowReaderException ( CorruptImageError , "InvalidColormapIndex" ) ; <NEW_LINE>if ( WPG_Palette . StartIndex > WPG_Palette . NumOfEntries ) <NEW_LINE>
guint offset = 0 , offset2 ; <NEW_LINE>
gboolean bool_val ; <NEW_LINE><NEW_LINE>if ( value_len < 4 ) <NEW_LINE>break ; <NEW_LINE><NEW_LINE>bool_val = GST_READ_UINT32_LE ( value ) ; <NEW_LINE>
#include < android / log . h > <NEW_LINE>
<TAB> <TAB> <TAB> goto out_bad ; <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "crct10dif" ) ;
<TAB> kvm_iommu_put_pages ( kvm , slot -> base_gfn , gfn - slot -> base_gfn ) ; <NEW_LINE>
<TAB> <TAB> calc_max_reserv ( ip , ( len > max_chunk_size ) ? max_chunk_size : len , <NEW_LINE><TAB> <TAB> <TAB> <TAB> & max_bytes , & data_blocks , & ind_blocks ) ; <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> <TAB> <TAB> KEY_ALLOC_UID_KEYRING | <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> <TAB> <TAB> KEY_ALLOC_IN_QUOTA , <NEW_LINE>
fail_response : <NEW_LINE>
unsigned int actual_size = rtype == 2 ? n * 2 : n ; <NEW_LINE>unsigned int limit_r_begin = ( r -> begin < actual_size ? r -> begin : actual_size ) ; <NEW_LINE>unsigned int limit_r_end = ( r -> end < actual_size ? r -> end : actual_size ) ; <NEW_LINE>int n_read = limit_r_end - limit_r_begin ; <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "sha1 - powerpc" ) ;
<TAB> nla_strlcpy ( link_info . str , nla_data ( link [ TIPC_NLA_LINK_NAME ] ) , <NEW_LINE><TAB> <TAB> TIPC_MAX_LINK_NAME ) ; <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> 1 , regs , 0 ) ; <NEW_LINE>
nsTArray < nsRefPtr < nsRangeStore > > mArray ; <NEW_LINE>
} else if ( encoding == 1 && ( c -> bpp == 6 || c -> bpp == 8 ) && c -> format != CHUNKY ) { <NEW_LINE>
{ <NEW_LINE>SeekBlob ( image , layer_info -> channel_info [ channel ] . size - 2 , SEEK_CUR ) ; <NEW_LINE>return ( MagickTrue ) ; <NEW_LINE> } <NEW_LINE>
<TAB> <TAB> <TAB> <NEW_LINE><TAB> <TAB> <TAB> bytecnt_max = nbytes - offset ; <NEW_LINE><TAB> <TAB> <TAB> bytecnt_max = bytecnt_max > ( 1 << 14 ) ? ( 1 << 14 ) : bytecnt_max ; <NEW_LINE><TAB> <TAB> <TAB> bytecnt_max = bytecnt > nbytes ? nbytes : bytecnt_max ; <NEW_LINE><TAB> <TAB> <TAB> if ( bytecnt == 0 || bytecnt > bytecnt_max ) <NEW_LINE><TAB> <TAB> <TAB> <TAB> bytecnt = bytecnt_max ; <NEW_LINE>
<TAB> gpio_dev -> pctrl = devm_pinctrl_register ( & pdev -> dev , & amd_pinctrl_desc , <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> <TAB> gpio_dev ) ; <NEW_LINE>
<TAB> skipsize = LOGICAL_BLOCK_SIZE * ( int64_t ) vd -> location ; <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "salsa20" ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "salsa20 - asm" ) ;
<TAB> len = udf_translate_to_linux ( dname , dlen , <NEW_LINE><TAB> <TAB> <TAB> <TAB> filename -> u_name , filename -> u_len , <NEW_LINE>
<TAB> group -> inotify_data . user = get_current_user ( ) ; <NEW_LINE><NEW_LINE><TAB> if ( atomic_inc_return ( & group -> inotify_data . user -> inotify_devs ) > <NEW_LINE><TAB> inotify_max_user_instances ) { <NEW_LINE><TAB> <TAB> fsnotify_put_group ( group ) ; <NEW_LINE><TAB> <TAB> return ERR_PTR ( - EMFILE ) ; <NEW_LINE><TAB> } <NEW_LINE>
<TAB> zval <TAB> <TAB> * subpats ; <TAB> <TAB> <TAB> <NEW_LINE>
last mod : $ Id : framing . c 17269 2010 - 06 - 04 05 : 39 : 45Z xiphmont $ <NEW_LINE>
c -> tile_stride = FFALIGN ( c -> tile_width , 16 ) * 3 ; <NEW_LINE>
void CVE_2015_4001_oz_hcd_get_desc_cnf ( void * hport , u8 req_id , u8 status , const u8 * desc , <NEW_LINE><TAB> <TAB> <TAB> u8 length , u16 offset , u16 total_size ) <NEW_LINE>
if ( s -> ls && ! ( bits <= 8 || nb_components == 1 ) ) { <NEW_LINE>
bool NS_FASTCALL SetLength ( size_type newLength ) ; <NEW_LINE>
<TAB> struct o2nm_cluster * cluster ; <NEW_LINE>
<TAB> TOREAD_HTTP_NONE <TAB> <TAB> = - 5 , <NEW_LINE><TAB> TOREAD_HTTP_RANGE <TAB> <TAB> = TOREAD_HTTP_CHUNK_LENGTH <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "des" ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "des3_ede" ) ; <NEW_LINE>
<NEW_LINE>
<TAB> <TAB> else umount_tree ( mnt , UMOUNT_CONNECTED ) ; <NEW_LINE>
good = ~ 0U ; <NEW_LINE>
int total_octave_lines ; <NEW_LINE>
memset ( str , 0 , MAX_APN_LENGTH + 1 ) ; <NEW_LINE>
<TAB> <TAB> zend_throw_exception_ex ( phar_ce_PharException , 0 TSRMLS_CC , " % s" , error ) ; <NEW_LINE>
if ( gData -> stateStackTop ) <NEW_LINE> -- gData -> stateStackTop ; <NEW_LINE>
<TAB> <TAB> flen = udf_get_filename ( dir -> i_sb , nameptr , lfi , fname , <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> UDF_NAME_LEN ) ; <NEW_LINE>
} else if ( ( R >= 2 ) && ( R <= 4 ) ) { <NEW_LINE>
int hineighbor [ VIF_POSIT + 2 ] ; <NEW_LINE>
<TAB> state = nfs4_do_open ( dir , & path , fmode , nd -> intent . open . flags , & attr , cred ) ; <NEW_LINE>
nsRefPtrHashtable < nsVoidPtrHashKey , nsDOMWorkerPool > mPools ; <NEW_LINE>
if ( attr >= 0 && xhash_get ( in -> states , rkey ) == ( void * ) conn_INPROGRESS ) { <NEW_LINE>
<NEW_LINE>
<TAB> unsigned int count , i ; <NEW_LINE>
if ( HasFontSizeInflation ( ) ) { <NEW_LINE>ClearTextRun ( nsnull , nsTextFrame : : eNotInflated ) ; <NEW_LINE> } <NEW_LINE>
static int __net_init sctp_defaults_init ( struct net * net ) <NEW_LINE>
it = limited_get ( key , nkey , c ) ; <NEW_LINE>
<TAB> if ( vcpu -> mmio_cur_fragment >= vcpu -> mmio_nr_fragments ) { <NEW_LINE>
#include "nsIPKCS11 . h" <NEW_LINE>
PRPackedBool mIsPending ; <NEW_LINE>PRPackedBool mIsUnsafe ; <NEW_LINE>
<TAB> udpmsg . msg_iovlen = 2 ; <NEW_LINE>
<TAB> if ( perf_output_begin ( & handle , event , header . size * ( top - at ) , 1 ) ) <NEW_LINE>
if ( fputc ( c , file ) != c ) <NEW_LINE>break ; <NEW_LINE>
<TAB> if ( plen ) { <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> acl_len ) ; <NEW_LINE>
void oz_hcd_get_desc_cnf ( void * hport , u8 req_id , u8 status , <NEW_LINE><TAB> const u8 * desc , u8 length , u16 offset , u16 total_size ) ; <NEW_LINE>
if ( fputc ( c , file ) != c ) <NEW_LINE>break ; <NEW_LINE>
<TAB> dxtrace ( printk ( KERN_DEBUG "Creating index : inode % lu\n" , dir -> i_ino ) ) ; <NEW_LINE>
<TAB> rcu_read_lock ( ) ; <NEW_LINE><TAB> final_p = fl6_update_dst ( & fl6 , rcu_dereference ( np -> opt ) , & final ) ; <NEW_LINE><TAB> rcu_read_unlock ( ) ; <NEW_LINE>
<TAB> ipv6_select_ident ( fptr , ( struct rt6_info * ) skb_dst ( skb ) ) ;
<TAB> <TAB> <NEW_LINE>
fd = open ( path , O_WRONLY|O_CREAT|O_CLOEXEC|O_NOCTTY , <NEW_LINE> ( mode == 0 || mode == MODE_INVALID ) ? 0644 : mode ) ; <NEW_LINE>
int linesize = av_image_get_linesize ( avctx -> pix_fmt , avctx -> width , 0 ) ; <NEW_LINE>
bool fill ( const SourceCoords & other ) ; <NEW_LINE>
<TAB> skcipher_request_set_tfm ( & ctx -> req , skcipher ) ; <NEW_LINE>
add_proto_failed : <NEW_LINE><TAB> unregister_pernet_device ( & ipgre_net_ops ) ; <NEW_LINE>
<TAB> <TAB> peer = maybe_get_net ( peer ) ; <NEW_LINE>
if ( last_pic_structure != PICT_FRAME ) { <NEW_LINE>
<TAB> if ( key_is_negative ( key ) ) <NEW_LINE>
if ( ! ( call_options & cib_sync_call ) ) { <NEW_LINE>crm_send_remote_msg ( private -> callback . session , op_msg , private -> command . encrypted ) ; <NEW_LINE> } else { <NEW_LINE>crm_send_remote_msg ( private -> command . session , op_msg , private -> command . encrypted ) ; <NEW_LINE> } <NEW_LINE>
int sysctl_tcp_challenge_ack_limit = 1000 ; <NEW_LINE>
<TAB> if ( layout_type >= LAYOUT_TYPE_MAX || <NEW_LINE><TAB> ! ( exp -> ex_layout_types & ( 1 << layout_type ) ) ) { <NEW_LINE>
last mod : $ Id : registry . h 15531 2008 - 11 - 24 23 : 50 : 06Z xiphmont $ <NEW_LINE>
goto err ; <NEW_LINE>
<NEW_LINE>
<TAB> <TAB> <TAB> b43err ( dev -> wl , " % s" , errmsg ) ; <NEW_LINE>
__android_log_print ( ANDROID_LOG_INFO , "Gecko" , " % s" , NS_ConvertUTF16toUTF8 ( aStr ) . get ( ) ) ; <NEW_LINE>
err = init_get_bits8 ( & gb , buf , size ) ; <NEW_LINE>if ( err < 0 ) <NEW_LINE>return AVERROR_INVALIDDATA ; <NEW_LINE>
<NEW_LINE>
GetJSProtoObject ( ) const { return xpc_UnmarkGrayObject ( mJSProtoObject ) ; } <NEW_LINE>
<TAB> if ( dest == path ) {
PHPAPI void php_stat ( const char * filename , size_t filename_length , int type , zval * return_value ) <NEW_LINE>
<TAB> if ( msg -> overflowed ) { <NEW_LINE>
if ( ! opj_j2k_write_sot ( p_j2k , p_data , <NEW_LINE>p_total_data_size , <NEW_LINE> & l_current_nb_bytes_written , <NEW_LINE>p_stream , <NEW_LINE>
<NEW_LINE>
<NEW_LINE>overflow : <NEW_LINE>JS_free ( cx , vsharp ) ; <NEW_LINE>free ( chars ) ; <NEW_LINE>chars = NULL ; <NEW_LINE>goto error ; <NEW_LINE>
<TAB> return ralg -> seedsize ; <NEW_LINE>
<TAB> if ( ! vcpu -> arch . pv_time_enabled ) <NEW_LINE>
<TAB> <TAB> sbi -> s_mb_cache = ext4_xattr_create_cache ( ) ; <NEW_LINE>
<TAB> mpz_powm_sec ( v , v , key -> e , key -> n ) ; <NEW_LINE>
static void FinalizeCallback ( JSFreeOp * fop , JSFinalizeStatus status , JSBool isCompartmentGC ) ; <NEW_LINE>
int i , ci , n , c , cc , pi ; <NEW_LINE>
static const float vwin1024 [ 512 ] = { <NEW_LINE>
ret_value = 0 ; <NEW_LINE>goto to_exit ; <NEW_LINE>
<TAB> <TAB> if ( * vm_flags & ( VM_HUGEPAGE | VM_NO_THP ) ) <NEW_LINE>
<TAB> locknum = sem_lock ( sma , sops , nsops ) ; <NEW_LINE><TAB> if ( un && un -> semid == - 1 ) <NEW_LINE><TAB> <TAB> goto out_unlock_free ; <NEW_LINE>
<TAB> <TAB> <TAB> skb_pull ( chunk -> skb , chunk -> chunk_end - chunk -> skb -> data ) ; <NEW_LINE><TAB> <TAB> <TAB> <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "sha1" ) ; <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "stdrng" ) ;
<TAB> return error < 0 ? error : 0 ; <NEW_LINE>
JSObject ** aClassObject , bool * aNew ) ; <NEW_LINE>
<TAB> if ( ! inet_opt || ! inet_opt -> opt . srr ) <NEW_LINE>
<TAB> rc = segmented_read_std ( ctxt , ctxt -> memop . addr . mem , & fx_state , 512 ) ; <NEW_LINE>
<TAB> struct o2nm_cluster * cluster ; <NEW_LINE>
if ( fputc ( c , file ) != c ) <NEW_LINE>break ; <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> <TAB> <TAB> transhdrlen , mtu , flags , rt ) ; <NEW_LINE>
<TAB> <TAB> unix_notinflight ( scm -> fp -> user , scm -> fp -> fp [ i ] ) ; <NEW_LINE>
extern int parse_rock_ridge_inode ( struct iso_directory_record * , struct inode * , int relocated ) ; <NEW_LINE>
<NEW_LINE>
static long __snd_timer_user_ioctl ( struct file * file , unsigned int cmd , <NEW_LINE>
int i_index = ( i * 2 * tk -> i_frame_size / tk -> i_coded_frame_size ) + y ; <NEW_LINE>if ( i_index >= tk -> i_subpackets ) <NEW_LINE>return ; <NEW_LINE><NEW_LINE>
MODULE_ALIAS_CRYPTO ( "sha224" ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "sha256" ) ;
<NEW_LINE>already_AddRefed < dom : : SVGTransform > GetItemAt ( uint32_t aIndex ) ; <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> zend_throw_exception_ex ( phar_ce_PharException , 0 TSRMLS_CC , " % s" , error ) ; <NEW_LINE>
static const PRUint8 * <NEW_LINE>
<TAB> <TAB> <TAB> if ( newIndex < newLen ) <NEW_LINE>
for ( uint32_t c = mGIFStruct . width ; c > 0 ; c -- ) { <NEW_LINE> * -- to = cmap [ * -- from ] ; <NEW_LINE>
<NEW_LINE>
long <TAB> num_head = 0 ; <NEW_LINE>
<TAB> <TAB> if ( numcolors > RAS_CMAP_MAXSIZ ) { <NEW_LINE><TAB> <TAB> <TAB> return - 1 ; <NEW_LINE><TAB> <TAB> } <NEW_LINE>
#include "sfntly / port / type . h" <NEW_LINE>
<TAB> rv = DumpChain ( certHandle , name , <NEW_LINE>certutil . options [ opt_ASCIIForIO ] . activated ) ; <NEW_LINE>
ClearCloneReadInfo ( StructuredCloneReadInfo & aReadInfo ) ; <NEW_LINE><NEW_LINE>static void <NEW_LINE>ClearCloneWriteInfo ( StructuredCloneWriteInfo & aWriteInfo ) ; <NEW_LINE>
size_t length , offset , size , at ; <NEW_LINE>
<NEW_LINE>
<TAB> <TAB> return ret ; <NEW_LINE>
<TAB> size_t maxcount ; <NEW_LINE>
static int CVE_2011_1833_ecryptfs_parse_options ( struct ecryptfs_sb_info * sbi , char * options , <NEW_LINE><TAB> <TAB> <TAB> <TAB> uid_t * check_ruid ) <NEW_LINE>
print_primaries ( w , frame -> color_primaries ) ; <NEW_LINE>
<NEW_LINE><NEW_LINE><NEW_LINE>struct XPCWrappedNativeJSClass <NEW_LINE>
<TAB> rc = usb_submit_urb ( urb , GFP_ATOMIC ) ; <NEW_LINE><TAB> if ( rc < 0 ) { <NEW_LINE><TAB> <TAB> kfree ( buf ) ; <NEW_LINE><TAB> <TAB> usb_free_urb ( urb ) ; <NEW_LINE><TAB> } <NEW_LINE>
length = ( MagickSizeType ) ( unsigned char ) ReadBlobByte ( image ) ; <NEW_LINE>
<TAB> <TAB> <TAB> goto out_bad ; <NEW_LINE>
char * prime_arg1 = NULL , * prime_arg2 = NULL ; <NEW_LINE>gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; <NEW_LINE>gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER ; <NEW_LINE>
if ( aInputTrack -> IsEnded ( ) ) { <NEW_LINE>TrackTicks inputEndTicks = aInputTrack -> TimeToTicksRoundDown ( inputEnd ) ; <NEW_LINE>if ( aInputTrack -> GetEnd ( ) <= inputEndTicks ) { <NEW_LINE>inputTrackEndPoint = aInputTrack -> GetEnd ( ) ; <NEW_LINE>
<TAB> <TAB> if ( len > BUFSIZE - sizeof ( struct nbd_reply ) ) <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> NEED_OP ( 2 , 0 ) ; <NEW_LINE>
<TAB> <TAB> " % 4d - % 2d - % 2d , % 2d : % 2d : % 2d . % 9d : % 5s ( % 127 [ A - Za - z0 - 9 / : ] ) , Length : % 9d , Pro : % 9d , Off : % 9d , Pri : % 9d , RM : % 9d , Err : % 9d [ % 8x , % 8x ] " , <NEW_LINE>
FILE_RCSID ( "@ ( # ) $ File : readelf . c , v 1 . 105 2014 / 11 / 22 16 : 04 : 29 christos Exp $ " ) <NEW_LINE>
client -> auth_buffer = g_byte_array_new ( ) ; <NEW_LINE>
<TAB> BUG_ON ( ret == - EEXIST || ret == - EOVERFLOW ) ; <NEW_LINE>
if ( * object + size < * object || * object + size > bplist -> offset_table ) { <NEW_LINE>PLIST_BIN_ERR ( " % s : BPLIST_DICT data bytes point outside of valid range\n" , __func__ ) ; <NEW_LINE>
virtual already_AddRefed < MediaResource > CloneData ( MediaDecoder * aDecoder ) ; <NEW_LINE>
int mutt_b64_decode ( char * out , const char * in , size_t olen ) <NEW_LINE>
<TAB> . splice_write <TAB> = iter_file_splice_write , <NEW_LINE>
<TAB> <NEW_LINE><TAB> if ( rc != X86EMUL_CONTINUE ) <NEW_LINE><TAB> <TAB> return X86EMUL_UNHANDLEABLE ; <NEW_LINE><NEW_LINE>
<TAB> const int maxsamples = ARRAY_LEN ( buf ) - ( AST_FRIENDLY_OFFSET / sizeof ( buf [ 0 ] ) ) ; <NEW_LINE>
<TAB> if ( ! handle || ! SecIsValidHandle ( handle ) ) <NEW_LINE>
<TAB> . splice_write <TAB> = iter_file_splice_write , <NEW_LINE>
<TAB> <TAB> sk -> sk_sndbuf = max_t ( int , val * 2 , SOCK_MIN_SNDBUF ) ; <NEW_LINE>
char query [ NAME_LEN + 100 ] , rows [ NAME_LEN ] , fields [ 16 ] ; <NEW_LINE>
<TAB> <TAB> disconnect = ! ( ( ( how & UMOUNT_CONNECTED ) && <NEW_LINE><TAB> <TAB> <TAB> <TAB> mnt_has_parent ( p ) && <NEW_LINE><TAB> <TAB> <TAB> <TAB> ( p -> mnt_parent -> mnt . mnt_flags & MNT_UMOUNT ) ) || <NEW_LINE><TAB> <TAB> <TAB> IS_MNT_LOCKED_AND_LAZY ( p ) ) ; <NEW_LINE>
php_error_docref ( NULL TSRMLS_CC , E_NOTICE , "detect the error eof" ) ; <NEW_LINE>return SW_FALSE ; <NEW_LINE>
<TAB> <TAB> wtap_encap = wtap_pcap_encap_to_wtap_encap ( dlt ) ; <NEW_LINE><TAB> <TAB> switch ( wtap_encap ) { <NEW_LINE><NEW_LINE><TAB> <TAB> case WTAP_ENCAP_ETHERNET : <NEW_LINE><TAB> <TAB> <TAB> eth . fcs_len = - 1 ; <NEW_LINE><TAB> <TAB> <TAB> phdr = & eth ; <NEW_LINE><TAB> <TAB> <TAB> break ; <NEW_LINE><NEW_LINE><TAB> <TAB> default : <NEW_LINE><TAB> <TAB> <TAB> phdr = NULL ; <NEW_LINE><TAB> <TAB> <TAB> break ; <NEW_LINE><TAB> <TAB> } <NEW_LINE><TAB> <TAB> dissector_try_uint_new ( wtap_encap_dissector_table , <NEW_LINE><TAB> <TAB> wtap_encap , next_tvb , pinfo , tree , TRUE , phdr ) ; <NEW_LINE>
<TAB> <TAB> struct nfs4_state_owner * sp , fmode_t fmode , int flags , <NEW_LINE>
int _SSL_check_hostname ( X509 * cert , const char * host ) ; <NEW_LINE>
virtual nsresult OpenContentStream ( PRBool async , nsIInputStream ** result , <NEW_LINE>nsIChannel ** channel ) ; <NEW_LINE>
<TAB> <NEW_LINE><TAB> for ( pass = 0 ; pass < 10 || image ; pass + + ) { <NEW_LINE>
<TAB> nfs4_intent_set_file ( nd , & path , state , fmode ) ; <NEW_LINE>
<TAB> if ( pread ( fd , xsh_addr , xsh_sizeof , off + size * strtab ) < ( ssize_t ) xsh_sizeof ) { <NEW_LINE>
<TAB> size_t pos = 0 ; <NEW_LINE>
ogg_packet * op ) { <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "compress_null" ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "digest_null" ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "cipher_null" ) ; <NEW_LINE>
int xt_compat_check_entry_offsets ( const void * base , const char * elems , <NEW_LINE>
if ( ( count != ( ssize_t ) length ) || ( length < 4 ) || <NEW_LINE>
<TAB> ret = key_read_state ( key ) ; <NEW_LINE><TAB> if ( ret < 0 ) <NEW_LINE><TAB> <TAB> goto error2 ; <NEW_LINE>
last mod : $ Id : smallft . h 13293 2007 - 07 - 24 00 : 09 : 47Z xiphmont $ <NEW_LINE>
<TAB> ast_variables_destroy ( cookies ) ; <NEW_LINE>
<NEW_LINE>
<TAB> char * name , int rep_quick , my_bool no_copy_stat ) <NEW_LINE>
mutt_error ( " % s" , s + 2 ) ; <NEW_LINE>
<TAB> struct mb2_cache * ext4_mb_cache = EXT4_GET_MB_CACHE ( inode ) ; <NEW_LINE>
<NEW_LINE><NEW_LINE><NEW_LINE>nsresult SetHeader ( nsHttpAtom header , const nsACString & value , <NEW_LINE>PRBool merge = PR_FALSE , <NEW_LINE>PRBool replace = PR_TRUE ) ; <NEW_LINE><NEW_LINE>
<TAB> <TAB> unsigned char * start = sptr + sopt -> srr ; <NEW_LINE>
, public nsIDocShell_ESR38_2 <NEW_LINE>
<TAB> struct ipv6_txoptions __rcu <TAB> * opt ; <NEW_LINE>
const cdf_stream_t * sst , const cdf_directory_t * root_storage ) <NEW_LINE>
<TAB> cur_setting -> it_interval = ns_to_timespec ( timr -> it . mmtimer . incr * sgi_clock_period ) ; <NEW_LINE><TAB> cur_setting -> it_value = ns_to_timespec ( ( timr -> it . mmtimer . expires - rtc_time ( ) ) * sgi_clock_period ) ; <NEW_LINE>
ftrace_filter_lseek ( struct file * file , loff_t offset , int whence ) <NEW_LINE>
static const float vwin4096 [ 2048 ] = { <NEW_LINE>
<TAB> ipc . opt = & icmp_param . replyopts . opt ; <NEW_LINE>
<TAB> <TAB> r = kvm_lapic_set_vapic_addr ( vcpu , va . vapic_addr ) ; <NEW_LINE>
<TAB> <TAB> xen_netbk_idx_release ( netbk , pending_idx , XEN_NETIF_RSP_OKAY ) ; <NEW_LINE>
void * buffer , float * ) ; <NEW_LINE>
STIN void mdct_bitreverse ( mdct_lookup * init , <NEW_LINE>
gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; <NEW_LINE>gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER ; <NEW_LINE>
bool FireClipboardEvent ( int32_t aType , int32_t aSelectionType ) ; <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> cp = php_parserr ( cp , end , & answer , type_to_fetch , store_results , raw , & retval ) ; <NEW_LINE>
if ( fputc ( c , file ) != c ) <NEW_LINE>break ; <NEW_LINE>
<NEW_LINE>
<TAB> <TAB> <TAB> <TAB> if ( HAVE_IP ( 6 , 0 ) ) { <NEW_LINE>
nsresult GetIndicesForInterval ( nsINode * aBeginNode , PRInt32 aBeginOffset , <NEW_LINE>nsINode * aEndNode , PRInt32 aEndOffset , <NEW_LINE>bool aAllowAdjacent , <NEW_LINE>PRInt32 * aStartIndex , PRInt32 * aEndIndex ) ; <NEW_LINE>
<NEW_LINE>if ( buf_size > CDG_HEADER_SIZE ) <NEW_LINE>bytestream_get_buffer ( & buf , cdg_data , buf_size - CDG_HEADER_SIZE ) ; <NEW_LINE>
<TAB> if ( flag & CL_UNPRIVILEGED ) { <NEW_LINE><TAB> <TAB> mnt -> mnt . mnt_flags |= MNT_LOCK_ATIME ; <NEW_LINE><NEW_LINE><TAB> <TAB> if ( mnt -> mnt . mnt_flags & MNT_READONLY ) <NEW_LINE><TAB> <TAB> <TAB> mnt -> mnt . mnt_flags |= MNT_LOCK_READONLY ; <NEW_LINE><NEW_LINE><TAB> <TAB> if ( mnt -> mnt . mnt_flags & MNT_NODEV ) <NEW_LINE><TAB> <TAB> <TAB> mnt -> mnt . mnt_flags |= MNT_LOCK_NODEV ; <NEW_LINE><NEW_LINE><TAB> <TAB> if ( mnt -> mnt . mnt_flags & MNT_NOSUID ) <NEW_LINE><TAB> <TAB> <TAB> mnt -> mnt . mnt_flags |= MNT_LOCK_NOSUID ; <NEW_LINE><NEW_LINE><TAB> <TAB> if ( mnt -> mnt . mnt_flags & MNT_NOEXEC ) <NEW_LINE><TAB> <TAB> <TAB> mnt -> mnt . mnt_flags |= MNT_LOCK_NOEXEC ; <NEW_LINE><TAB> } <NEW_LINE>
<TAB> else if ( cpu_has_secondary_exec_ctrls ( ) && <NEW_LINE><TAB> <TAB> ( vmcs_read32 ( SECONDARY_VM_EXEC_CONTROL ) & <NEW_LINE><TAB> <TAB> SECONDARY_EXEC_VIRTUALIZE_X2APIC_MODE ) ) { <NEW_LINE>
<TAB> <TAB> if ( isa && udptlportno > 0 ) { <NEW_LINE>
while ( peek ( s ) != ' > ' && ! eol ( s ) && ! eof ( s ) ) <NEW_LINE>
spnego_gss_ctx_id_t sc = ( spnego_gss_ctx_id_t ) context_handle ; <NEW_LINE><NEW_LINE>if ( sc -> ctx_handle == GSS_C_NO_CONTEXT ) <NEW_LINE><TAB> return ( GSS_S_NO_CONTEXT ) ; <NEW_LINE><NEW_LINE>return gss_verify_mic_iov ( minor_status , sc -> ctx_handle , qop_state , iov , <NEW_LINE>
nsresult GetInterfaceGlobal ( const nsIID & aIID , void ** result ) ; <NEW_LINE><NEW_LINE>
<TAB> . splice_write <TAB> = iter_file_splice_write , <NEW_LINE>
# define SSL_ST_ERR ( 0x05|SSL_ST_INIT ) <NEW_LINE>
<TAB> if ( ! unconditional ( e ) ) <NEW_LINE>
<TAB> bufsize = MIN ( file -> size , sizeof buf ) ; <NEW_LINE>
<TAB> <TAB> ASN1err ( ASN1_F_ASN1_ITEM_VERIFY , ASN1_R_INVALID_BIT_STRING_BITS_LEFT ) ; <NEW_LINE>
static struct usb_host_interface * uas_find_uas_alt_setting ( <NEW_LINE><TAB> <TAB> struct usb_interface * intf ) <NEW_LINE>
<TAB> dev -> priv_flags <TAB> <TAB> &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) ; <NEW_LINE>
{ <NEW_LINE>register Image <NEW_LINE> * next ; <NEW_LINE><NEW_LINE>next = GetNextImageInList ( p ) ; <NEW_LINE>if ( next == ( Image * ) NULL ) <NEW_LINE>break ; <NEW_LINE>if ( p -> scene >= next -> scene ) <NEW_LINE>
if ( ! merge && entry && replace ) <NEW_LINE>
<TAB> if ( setpwnam ( ctl -> pw , " . chfn" ) < 0 ) { <NEW_LINE>
<TAB> bits [ 0 ] = cpu_to_be64 ( sctx -> count [ 1 ] << 3 | sctx -> count [ 0 ] >> 61 ) ;
FILE_RCSID ( "@ ( # ) $ File : readelf . c , v 1 . 104 2014 / 10 / 17 15 : 49 : 00 christos Exp $ " ) <NEW_LINE>
<TAB> int <TAB> pkt_len , pktnum , hr , min , sec , csec ; <NEW_LINE>
<TAB> if ( ! eof && vars -> str . c != vars -> ptr ) { <NEW_LINE>
<TAB> return try_then_request_module ( __crypto_lookup_template ( name ) , <NEW_LINE><TAB> <TAB> <TAB> <TAB> "crypto - % s" , name ) ; <NEW_LINE>
if ( h0 -> s . avctx -> pix_fmt != get_pixel_format ( h0 ) ) <NEW_LINE>must_reinit = 1 ; <NEW_LINE>
<TAB> guint b1 , b2 , b3 , b4 , b5 , b6 , b7 , b8 , b9 , b10 ; <NEW_LINE>
for ( k = 0 ; offset < len ; j + + ) <NEW_LINE>
goto decrypt_loser ; <NEW_LINE>
static const struct crypto_type crypto_rng_type = { <NEW_LINE>
<TAB> int undos = 0 , alter = 0 , max , locknum ; <NEW_LINE>
! js_data . isObject ( ) ) <NEW_LINE>
<NEW_LINE>
nanojit : : LIns * args [ ] , bool rooted ) ; <NEW_LINE>
<TAB> <TAB> <TAB> int transhdrlen , int mtu , unsigned int flags , <NEW_LINE><TAB> <TAB> <TAB> struct rt6_info * rt ) <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> <TAB> <TAB> s -> servername_done = s -> session -> tlsext_hostname <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> <TAB> <TAB> && strlen ( s -> session -> tlsext_hostname ) == len <NEW_LINE>
<TAB> <NEW_LINE>
<TAB> <TAB> phar_file_stat ( filename , filename_len , funcnum , PHAR_G ( orig ) , INTERNAL_FUNCTION_PARAM_PASSTHRU ) ; \ <NEW_LINE>
<NEW_LINE><NEW_LINE>
if ( fchmod ( fileno ( fp ) , 0666 & ~ curumsk ) < 0 ) { <NEW_LINE>
<TAB> <TAB> if ( ! context || <NEW_LINE>
<TAB> <TAB> switch ( task -> tk_status ) { <NEW_LINE><TAB> <TAB> case - EACCES : <NEW_LINE><TAB> <TAB> case - EIO : <NEW_LINE><TAB> <TAB> <TAB> goto die ; <NEW_LINE><TAB> <TAB> default : <NEW_LINE><TAB> <TAB> <TAB> goto retry_rebind ; <NEW_LINE><TAB> <TAB> } <NEW_LINE>
<TAB> sig_none = timr -> it_sigev_notify == SIGEV_NONE ; <NEW_LINE>
off_t fat_size ; <TAB> <TAB> <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> if ( ( offsets [ 1 ] - offsets [ 0 ] < 0 ) || pcre_get_substring_list ( subject , offsets , count , & stringlist ) < 0 ) { <NEW_LINE>
#define pte_valid_user ( pte ) \ <NEW_LINE><TAB> ( ( pte_val ( pte ) & ( PTE_VALID | PTE_USER ) ) == ( PTE_VALID | PTE_USER ) ) <NEW_LINE>
snprintf ( psz_remote , sizeof ( psz_remote ) , "\\\\ % s\\ % s" , psz_server , psz_share ) ; <NEW_LINE>
nsCOMPtr < nsIDOMHTMLCanvasElement > mCanvasElement ; <NEW_LINE>nsHTMLCanvasElement * HTMLCanvasElement ( ) { <NEW_LINE>return static_cast < nsHTMLCanvasElement * > ( mCanvasElement . get ( ) ) ; <NEW_LINE> } <NEW_LINE>
request_buf . length = mutt_b64_decode ( buf2 , idata -> buf + 2 , sizeof ( buf2 ) ) ; <NEW_LINE>
for ( plane = 0 ; plane < 4 && src -> data [ plane ] && src -> linesize [ plane ] ; plane + + ) <NEW_LINE>
virtual void Bound ( int32_t offset , int32_t length ) ;
#define MODULE_MAGIC_NUMBER_MINOR 3 <NEW_LINE>
char query [ NAME_LEN + 100 ] ; <NEW_LINE>
<TAB> <TAB> if ( skb_is_err_queue ( skb ) && skb -> len && <NEW_LINE><TAB> <TAB> ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_STATS ) ) <NEW_LINE>
if ( mTarget == LOCAL_GL_ELEMENT_ARRAY_BUFFER && mByteLength ) { <NEW_LINE>
#include < k5 - int . h > <NEW_LINE>
ret_value = 0 ; <NEW_LINE>goto to_exit ; <NEW_LINE>
* rowp + + = * -- stackp & mColorMask ; <NEW_LINE>
p = BuildTestPacket ( IPPROTO_ICMP , id , 1 , 0 , 'A' , 0 ) ; <NEW_LINE>
<TAB> if ( ! security_decrypt ( s -> p , length , rdp ) ) <NEW_LINE><TAB> <TAB> return FALSE ; <NEW_LINE>
<TAB> <TAB> if ( sock -> sk ) <NEW_LINE><TAB> <TAB> <TAB> sock -> sk -> sk_uid = iattr -> ia_uid ; <NEW_LINE><TAB> <TAB> else <NEW_LINE><TAB> <TAB> <TAB> err = - ENOENT ; <NEW_LINE>
<TAB> if ( ( flags & EXT4_GET_BLOCKS_PRE_IO ) ) { <NEW_LINE>
int i , j , l ; <NEW_LINE>
if ( ss -> ssl3 . hs . kea_def -> ephemeral ) { <NEW_LINE>ss -> ssl3 . hs . ws = wait_server_key ; <NEW_LINE> } else { <NEW_LINE>ss -> ssl3 . hs . ws = wait_cert_request ; <NEW_LINE> } <NEW_LINE>
<TAB> <TAB> <TAB> goto out_bad ; <NEW_LINE>
if ( isExtensible ( ) ) <NEW_LINE>d . lengthAndFlags = buildLengthAndFlags ( length ( ) , FIXED_FLAGS ) ; <NEW_LINE>
<TAB> uint32_t backup_handle = 0 ; <NEW_LINE>
<TAB> <TAB> if ( flags & ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS ) { <NEW_LINE><TAB> <TAB> <TAB> if ( error_number ) * error_number = ARCHIVE_ERRNO_MISC ; <NEW_LINE><TAB> <TAB> <TAB> if ( error_string ) <NEW_LINE><TAB> <TAB> <TAB> archive_string_sprintf ( error_string , <NEW_LINE><TAB> <TAB> <TAB> <TAB> "Path is absolute" ) ; <NEW_LINE>
if ( newPtr != nullptr && newPtr == oldPtr ) { <NEW_LINE>NS_RUNTIMEABORT ( "Logic flaw in the caller" ) ; <NEW_LINE> } <NEW_LINE><NEW_LINE>
( url_Encoded ? " ( " : "" ) , ( url_Encoded ? url_Encoded : "" ) , ( url_Encoded ? " ) " : "" ) ) ; <NEW_LINE><NEW_LINE>free ( url_Encoded ) ; <NEW_LINE>
<TAB> while ( ( i < to_read ) && ( tmpName [ i ] != 0 ) ) { <NEW_LINE>
XDRScriptState * state ; <NEW_LINE> } ; <NEW_LINE><NEW_LINE>class XDRScriptState { <NEW_LINE>public : <NEW_LINE>XDRScriptState ( JSXDRState * x ) ; <NEW_LINE> ~ XDRScriptState ( ) ; <NEW_LINE><NEW_LINE>JSXDRState * xdr ; <NEW_LINE>const char * filename ; <NEW_LINE>bool filenameSaved ; <NEW_LINE>XDRAtoms atoms ; <NEW_LINE>XDRAtomsHashMap atomsMap ; <NEW_LINE>
p -- ; <NEW_LINE>if ( p < 0 ) p += VE_AMP ; <NEW_LINE>premax = max ( premax , filters [ j ] . ampbuf [ p ] ) ; <NEW_LINE>premin = min ( premin , filters [ j ] . ampbuf [ p ] ) ; <NEW_LINE>
static already_AddRefed < MediaResource > Create ( MediaDecoder * aDecoder , nsIChannel * aChannel ) ; <NEW_LINE>
<TAB> copy_file_as_user ( src , dest , getuid ( ) , getgid ( ) , S_IRUSR | S_IWUSR ) ; <NEW_LINE><TAB> fs_logger2 ( "clone" , dest ) ; <NEW_LINE>
<NEW_LINE>dlen -= 3 ; <NEW_LINE>
<TAB> sctp_add_cmd_sf ( commands , SCTP_CMD_SET_ASOC , SCTP_ASOC ( new_asoc ) ) ; <NEW_LINE>
last mod : $ Id $ <NEW_LINE>
<TAB> <TAB> RETURN_EMPTY_STRING ( ) ; <NEW_LINE>
if ( ( ( tot_len - offset - 4 ) < bodyLength ) || ( bodyLength < sizeof ( EAPOL_RSN_KEY ) ) ) { <NEW_LINE>
{ 0xd16d73c1 , 0xe0f7 , 0x415c , \ <NEW_LINE> { 0xbd , 0x68 , 0x9c , 0x1f , 0x93 , 0xb8 , 0x73 , 0x7a } } <NEW_LINE>
extern struct key * find_keyring_by_name ( const char * name , bool uid_keyring ) ; <NEW_LINE>
uint32_t bytes_to_copy = ( uint32_t ) caf_chunk_header . mChunkSize ; <NEW_LINE>char * buff ; <NEW_LINE><NEW_LINE>if ( caf_chunk_header . mChunkSize < 0 || caf_chunk_header . mChunkSize > 1048576 ) { <NEW_LINE>error_line ( " % s is not a valid . CAF file ! " , infilename ) ; <NEW_LINE>return WAVPACK_SOFT_ERROR ; <NEW_LINE> } <NEW_LINE><NEW_LINE>buff = malloc ( bytes_to_copy ) ; <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "sha1 - all" ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "sha256 - all" ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "hmac - sha1 - all" ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "hmac - sha256 - all" ) ;
std : : map < std : : string , std : : string > varyingLongNameMap ; <NEW_LINE>
<TAB> if ( page && page_name_is_good ( page ) && ( unlink ( page ) > 0 ) ) <NEW_LINE>
<TAB> if ( ! sctp_verify_asconf ( asoc , asconf_ack , false , & err_param ) ) <NEW_LINE>
* <TAB> <TAB> to a file so it could be read back and the hmac recomputed <NEW_LINE> * <TAB> <TAB> and verified . doesn't seem to be a way for both encoding <NEW_LINE>
mOwnedElements . AppendElement ( aContent ) ; <NEW_LINE>
request_buf . length = mutt_b64_decode ( buf2 , idata -> buf + 2 , sizeof ( buf2 ) ) ; <NEW_LINE>
static void kgdb_hw_overflow_handler ( struct perf_event * event , <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "des3_ede" ) ; <NEW_LINE>
<TAB> sctp_copy_descendant ( newsk , oldsk ) ;
<TAB> if ( ext2_xattr_cache_insert ( ext2_mb_cache , bh ) ) <NEW_LINE>
PRBool aNotify , <NEW_LINE>const nsAString * aValueForAfterSetAttr ) ; <NEW_LINE>
<TAB> <TAB> <TAB> for ( j = 0 ; j < nelements && i < sh . sh_properties ; <NEW_LINE><TAB> <TAB> <TAB> j + + , i + + ) <NEW_LINE><TAB> <TAB> <TAB> { <NEW_LINE>
<TAB> bitmap_zero ( ioapic -> rtc_status . dest_map . map , KVM_MAX_VCPU_ID ) ; <NEW_LINE>
virtual void WriteInternal ( const char * aBuffer , uint32_t aCount , DecodeStrategy aStrategy ) ; <NEW_LINE>
if ( ! doapr_outch ( sbuffer , buffer , & currlen , maxlen , <NEW_LINE>va_arg ( args , int ) ) ) <NEW_LINE>return 0 ; <NEW_LINE>
<TAB> if ( key_is_positive ( key ) ) <NEW_LINE>
<TAB> encode_share_access ( xdr , arg -> fmode ) ; <NEW_LINE>
<TAB> skcipher -> setkey = skcipher_setkey ; <NEW_LINE>
FILE_RCSID ( "@ ( # ) $ File : softmagic . c , v 1 . 197 2014 / 11 / 11 17 : 48 : 23 christos Exp $ " ) <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> tk_cred_retry : 2 , <NEW_LINE><TAB> <TAB> <TAB> <TAB> tk_rebind_retry : 2 ; <NEW_LINE>
last mod : $ Id : codec . h 16037 2009 - 05 - 26 21 : 10 : 58Z xiphmont $ <NEW_LINE>
<TAB> fmode_t delegation_type = 0 ; <NEW_LINE>
<TAB> if ( kvm_set_msr ( vcpu , & msr ) != 0 ) { <NEW_LINE>
for ( plane = 1 ; plane < 4 && frame -> data [ plane ] && frame -> linesize [ plane ] ; plane + + ) <NEW_LINE>
<TAB> if ( ! BN_rand ( priv_key , l , 0 , 0 ) ) goto err ; <NEW_LINE><TAB> if ( ! ENGINE_get_DH ( dh -> engine ) -> bn_mod_exp ( dh , pub_key , dh -> g , <NEW_LINE><TAB> <TAB> priv_key , dh -> p , ctx , mont ) ) goto err ; <NEW_LINE>
static int <NEW_LINE>
<TAB> if ( ! index_key . type -> instantiate || <NEW_LINE>
if ( split_flag && size >= MIN_BLOCK_SIZE ) { <NEW_LINE>
<TAB> perf_sw_event ( PERF_COUNT_SW_EMULATION_FAULTS , 1 , regs , 0 ) ; <NEW_LINE>
<TAB> termPQExpBuffer ( & user_specification ) ; <NEW_LINE>
qemu_get_be32s ( f , & nb_cpus ) ; <NEW_LINE>if ( opp -> nb_cpus != nb_cpus ) { <NEW_LINE>return - EINVAL ; <NEW_LINE> } <NEW_LINE>assert ( nb_cpus > 0 && nb_cpus <= MAX_CPU ) ; <NEW_LINE>
<TAB> <TAB> " % 5s ( % 127 [ A - Za - z0 - 9 / : ] ) , Length : % 9d , Pro : % 9d , Off : % 9d , Pri : % 9d , RM : % 9d , Err : % 9d [ % 8x , % 8x ] " , <NEW_LINE>
<TAB> <TAB> <TAB> int copied ; <NEW_LINE>
<NEW_LINE><TAB> setup_new_exec ( bprm ) ; <NEW_LINE>
FILE_RCSID ( "@ ( # ) $ File : cdf . c , v 1 . 49 2012 / 02 / 20 20 : 04 : 37 christos Exp $ " ) <NEW_LINE>
<TAB> jas_tvparser_destroy ( tvp ) ; <NEW_LINE>
<TAB> cl_renderer = Cvar_Get ( "cl_renderer" , "opengl2" , CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED ) ; <NEW_LINE>
<TAB> fmode_t state ; <TAB> <TAB> <TAB> <NEW_LINE>
#include < linux / math64 . h > <NEW_LINE>
NS_ASSERTION ( mContentOffset < PRInt32 ( aContent -> GetText ( ) -> GetLength ( ) ) , <NEW_LINE>
static inline void realpath_cache_add ( const char * path , int path_len , const char * realpath , size_t realpath_len , int is_dir , time_t t ) <NEW_LINE>
<TAB> return ret ; <NEW_LINE>beach : <NEW_LINE><TAB> free ( ptr ) ; <NEW_LINE>
mark_desktop_file_executable ( CommonJob * common , <NEW_LINE>GCancellable * cancellable , <NEW_LINE>GFile * file , <NEW_LINE>gboolean interactive ) ; <NEW_LINE>
<TAB> len = dp -> ip6r_len ; <NEW_LINE>
<TAB> <TAB> ext3_msg ( sb , KERN_ERR , "error : invalid sb specification : % s" , <NEW_LINE>
<TAB> scm -> creds . uid = cred ? cred -> uid : INVALID_UID ; <NEW_LINE><TAB> scm -> creds . gid = cred ? cred -> gid : INVALID_GID ; <NEW_LINE>
p_chk -> strf . vids . p_bih = malloc ( __MAX ( p_chk -> common . i_chunk_size , <NEW_LINE>sizeof ( * p_chk -> strf . vids . p_bih ) ) ) ; <NEW_LINE>
static spnego_gss_ctx_id_t create_spnego_ctx ( int ) ; <NEW_LINE>
<TAB> <TAB> <TAB> if ( p -> owner && find_sdp ( req ) ) { <NEW_LINE>
already_AddRefed < nsISVGPoint > GetItem ( uint32_t index , <NEW_LINE>ErrorResult & error ) ; <NEW_LINE>already_AddRefed < nsISVGPoint > IndexedGetter ( uint32_t index , bool & found , <NEW_LINE>ErrorResult & error ) ; <NEW_LINE>
<TAB> if ( stringset == ETH_SS_STATS || stringset == ETH_SS_PRIV_FLAGS ) <NEW_LINE>
<TAB> f2fs_wait_discard_bios ( sbi , false ) ; <NEW_LINE>
<TAB> <TAB> } else if ( cmd ) { <NEW_LINE><TAB> <TAB> <TAB> <NEW_LINE>
count = 64 ; <NEW_LINE><NEW_LINE>while ( count <= index ) <NEW_LINE>count *= 2 ; <NEW_LINE>
if ( chunksize > MAX_SIZE ) { <NEW_LINE><TAB> PORT_SetError ( SEC_ERROR_NO_MEMORY ) ; <NEW_LINE><TAB> return NULL ; <NEW_LINE> } <NEW_LINE>
<TAB> <TAB> sem_unlock ( sma , - 1 ) ; <NEW_LINE>
<TAB> <TAB> for ( ie = io + ps -> nid ; io < ie && ND_TTEST ( * io ) ; + + io ) { <NEW_LINE>
PHPAPI void php_clear_stat_cache ( zend_bool clear_realpath_cache , const char * filename , size_t filename_len ) <NEW_LINE>
kindInt ( Ion ) , <NEW_LINE>pendingRecompilation ( false ) <NEW_LINE>
ret_value = write_output ( ) ; <NEW_LINE>if ( ret_value == - E_NOTHANDLED ) <NEW_LINE>FATAL_ERROR ( "Cannot write output file ( % s ) : the filter is not correctly handled . " , EF_GBL_OPTIONS -> output_file ) ; <NEW_LINE>else if ( ret_value == - E_INVALID ) <NEW_LINE>FATAL_ERROR ( "Cannot write output file ( % s ) : the filter format is not correct . " , EF_GBL_OPTIONS -> output_file ) ; <NEW_LINE><NEW_LINE>
if ( ubits <= BN_BITS2 ) { <NEW_LINE>if ( udp [ 0 ] == 0 ) <NEW_LINE>goto err ; <NEW_LINE>if ( udp [ 0 ] == 1 ) <NEW_LINE>break ; <NEW_LINE> } <NEW_LINE>
#define JSXDR_BYTECODE_VERSION ( 0xb973c0de - 90 ) <NEW_LINE>
<NEW_LINE>
return close_connection ( conn ) ; <NEW_LINE>
last mod : $ Id $ <NEW_LINE>
<TAB> <TAB> if ( test_opt ( sb , DIOREAD_NOLOCK ) ) { <NEW_LINE><TAB> <TAB> <TAB> ext4_msg ( sb , KERN_WARNING , "dioread_nolock option is " <NEW_LINE><TAB> <TAB> <TAB> <TAB> "not supported with nobh mode" ) ; <NEW_LINE><TAB> <TAB> <TAB> goto failed_mount_wq ; <NEW_LINE><TAB> <TAB> } <NEW_LINE>
<TAB> <TAB> split_flag1 = split_flag & ( EXT4_EXT_MAY_ZEROOUT | <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> EXT4_EXT_DATA_VALID2 ) ; <NEW_LINE>
<NEW_LINE>
std : : vector < TBuiltInFunction > mFunctions ; <NEW_LINE>
inline void SetDestroyJSContextInDestructor ( ) ; <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> <TAB> cp = php_parserr ( cp , end , & answer , DNS_T_ANY , 1 , raw , & retval ) ; <NEW_LINE>
nsCOMPtr < nsITreeBoxObject > mTree ; <NEW_LINE>
{ <NEW_LINE>data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; <NEW_LINE>ThrowReaderException ( CorruptImageError , "ImproperImageHeader" ) ; <NEW_LINE> } <NEW_LINE>
<TAB> <TAB> name_rmt -> valuelen = cpu_to_be32 ( args -> rmtvaluelen ) ; <NEW_LINE>
wtap_encap = wtap_pcap_encap_to_wtap_encap ( dlt ) ; <NEW_LINE>switch ( wtap_encap ) { <NEW_LINE><NEW_LINE>case WTAP_ENCAP_ETHERNET : <NEW_LINE>eth . fcs_len = - 1 ; <NEW_LINE>phdrp = & eth ; <NEW_LINE>break ; <NEW_LINE><NEW_LINE>default : <NEW_LINE>phdrp = NULL ; <NEW_LINE>break ; <NEW_LINE> } <NEW_LINE>dissector_try_uint_new ( wtap_encap_dissector_table , <NEW_LINE>wtap_encap , next_tvb , pinfo , tree , TRUE , phdrp ) ; <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> for ( i = 0 ; ( i + 3 ) < sec -> size ; i += 4 ) { <NEW_LINE>
while ( s [ l ] && l < len ) { <NEW_LINE>
uint64_t tableTotal = 0 ; <NEW_LINE>
<TAB> struct rcu_head <TAB> <TAB> rcu ; <NEW_LINE>
<TAB> JAS_DBGLOG ( 101 , ( "jas_realloc ( % x , % zu ) \n" , ptr , size ) ) ; <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "cast6" ) ;
<TAB> <TAB> <TAB> no_copy_stat ? MYF ( MY_REDEL_NO_COPY_STAT ) : MYF ( 0 ) ) || <NEW_LINE>
<TAB> <TAB> . match_data . cmp <TAB> <TAB> = key_default_cmp , <NEW_LINE>
<TAB> if ( ! IS_ERR ( vma ) ) <NEW_LINE><TAB> <TAB> vma_stop ( priv , vma ) ; <NEW_LINE>
#define JSXDR_BYTECODE_VERSION ( 0xb973c0de - 86 )
Alloc : : SizeTooBig ( ) ; <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "cast5" ) ;
spnego_gss_ctx_id_t sc = ( spnego_gss_ctx_id_t ) context_handle ; <NEW_LINE><NEW_LINE>if ( sc -> ctx_handle == GSS_C_NO_CONTEXT ) <NEW_LINE><TAB> return ( GSS_S_NO_CONTEXT ) ; <NEW_LINE><NEW_LINE>return gss_get_mic_iov_length ( minor_status , sc -> ctx_handle , qop_req , iov , <NEW_LINE>
<TAB> if ( dumpable != SUID_DUMP_USER && <NEW_LINE><TAB> ! ptrace_has_cap ( __task_cred ( task ) -> user_ns , mode ) ) { <NEW_LINE>
struct nfs_open_context * nfs_find_open_context ( struct inode * inode , struct rpc_cred * cred , fmode_t mode ) <NEW_LINE>
switch ( linktype ) { <NEW_LINE><NEW_LINE>case WTAP_ENCAP_ETHERNET : <NEW_LINE>eth . fcs_len = - 1 ; <NEW_LINE>phdr = & eth ; <NEW_LINE>break ; <NEW_LINE><NEW_LINE>default : <NEW_LINE>phdr = NULL ; <NEW_LINE>break ; <NEW_LINE> } <NEW_LINE>dissector_try_uint_new ( wtap_encap_dissector_table , linktype , new_tvb , pinfo , top_tree , TRUE , phdr ) ; <NEW_LINE>
c -> framebuf_stride = FFALIGN ( c -> width + 15 , 16 ) * 3 ; <NEW_LINE>aligned_height = c -> height + 15 ; <NEW_LINE>
const static PRUint32 kMaxStrLen = 1 << 6 ; <NEW_LINE>
if ( password == NULL || ! ( mask & KADM5_ATTRIBUTES ) || <NEW_LINE>
<TAB> . splice_write <TAB> = iter_file_splice_write , <NEW_LINE>
<TAB> <TAB> if ( pread ( fd , xph_addr , xph_sizeof , off ) < ( ssize_t ) xph_sizeof ) { <NEW_LINE>
int setpwnam ( struct passwd * pwd , const char * prefix ) <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "camellia" ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "camellia - asm" ) ;
<NEW_LINE>if ( rep != NULL && rep -> u . dh_Info . kdfID ) { <NEW_LINE>secret . data = ( char * ) server_key ; <NEW_LINE>
<TAB> <TAB> if ( x & ( 1U << ( unsigned int ) i ) ) return i ; <NEW_LINE>
<TAB> ret = snprintf ( dest , len , " % s / lxc / lock / % s" , rundir , p ) ; <NEW_LINE>
<TAB> <TAB> if ( WARN_ON ( type == EBT_COMPAT_TARGET && size_left ) ) <NEW_LINE><TAB> <TAB> <TAB> return - EINVAL ; <NEW_LINE><NEW_LINE>
<TAB> ( unsigned char * ) e + sizeof ( struct ipt_entry ) >= limit || <NEW_LINE><TAB> ( unsigned char * ) e + e -> next_offset > limit ) { <NEW_LINE>
<TAB> if ( ! peer && sip_cfg . alwaysauthreject && ast_test_flag ( & p -> flags [ 1 ] , SIP_PAGE2_REGISTERTRYING ) ) { <NEW_LINE>
<NEW_LINE>already_AddRefed < nsISVGPoint > GetItemAt ( uint32_t aIndex ) ; <NEW_LINE>
nsRefPtr < HTMLMediaElement > mMediaElement ; <NEW_LINE>
<TAB> <TAB> <TAB> ipv6_select_ident ( fh , rt ) ; <NEW_LINE>
s -> filesize = UINT64_MAX ; <NEW_LINE>
<TAB> if ( ! npages || base_gfn != old . base_gfn ) { <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "crc32c" ) ; <NEW_LINE>
Packet * p = BuildTestPacket ( IPPROTO_ICMP , 99 , 0 , 1 , 'A' + i , 16 ) ; <NEW_LINE>
<TAB> <TAB> case 4 : <NEW_LINE>
JSObject * NewOutObject ( JSContext * cx , JSObject * scope ) ; <NEW_LINE>
ippSetString ( job -> attrs , & attr , 1 , attr -> values [ 0 ] . string . text ) ; <NEW_LINE>
<NEW_LINE>
<TAB> if ( stringset == ETH_SS_STATS || stringset == ETH_SS_PRIV_FLAGS ) <NEW_LINE>
<TAB> hugepage_subpool_put_pages ( spool , 1 ) ; <NEW_LINE>
public nsStubMutationObserver , <NEW_LINE>public nsIDocument_MOZILLA_1_9_2_BRANCH <NEW_LINE>
<NEW_LINE>JS_FRIEND_API ( JSBool ) <NEW_LINE>DefaultValue ( JSContext * cx , HandleObject obj , JSType hint , MutableHandleValue vp ) ; <NEW_LINE><NEW_LINE>
<TAB> if ( length > 128 ) <NEW_LINE><TAB> length = 128 ; <NEW_LINE>
<TAB> if ( ! handle ) <NEW_LINE>
<TAB> <TAB> hwc -> event_base = MSR_ARCH_PERFMON_FIXED_CTR0 + ( hwc -> idx - X86_PMC_IDX_FIXED ) ; <NEW_LINE>
<TAB> struct frag_hdr fhdr ; <NEW_LINE>
<TAB> vdev -> ctx = kcalloc ( nvec , sizeof ( struct vfio_pci_irq_ctx ) , GFP_KERNEL ) ; <NEW_LINE>
nsCOMPtr < nsPIDOMWindow > mWindow ; <NEW_LINE>
<TAB> perf_sw_event ( PERF_COUNT_SW_EMULATION_FAULTS , 1 , regs , regs -> ARM_pc ) ; <NEW_LINE>
s -> filesize = UINT64_MAX ; <NEW_LINE>
if ( parse_input ( conn ) != 0 ) <NEW_LINE>return ; <NEW_LINE>
<TAB> <TAB> copy_file_as_user ( src , dest , getuid ( ) , getgid ( ) , 0644 ) ; <NEW_LINE><TAB> <TAB> fs_logger2 ( "clone" , dest ) ; <NEW_LINE>
HKEY baseKey = nullptr ; <NEW_LINE>
<NEW_LINE>if ( ! mDepthAttachment . IsNull ( ) && ! mDepthAttachment . HasSameDimensionsAs ( mColorAttachment ) ) <NEW_LINE>return PR_TRUE ; <NEW_LINE>if ( ! mStencilAttachment . IsNull ( ) && ! mStencilAttachment . HasSameDimensionsAs ( mColorAttachment ) ) <NEW_LINE>return PR_TRUE ; <NEW_LINE>if ( ! mDepthStencilAttachment . IsNull ( ) && ! mDepthStencilAttachment . HasSameDimensionsAs ( mColorAttachment ) ) <NEW_LINE>return PR_TRUE ; <NEW_LINE><NEW_LINE>
<TAB> <TAB> ce = mb2_cache_entry_find_next ( ext4_mb_cache , ce ) ; <NEW_LINE>
for ( plane = 0 ; plane < 4 && in -> data [ plane ] && in -> linesize [ plane ] ; plane + + ) { <NEW_LINE>
#define IW_DEFAULT_MAX_DIMENSION 40000 <NEW_LINE>#define IW_DEFAULT_MAX_MALLOC 2000000000 <NEW_LINE>
static void phar_file_stat ( const char * filename , size_t filename_length , int type , void ( * orig_stat_func ) ( INTERNAL_FUNCTION_PARAMETERS ) , INTERNAL_FUNCTION_PARAMETERS ) <NEW_LINE>
<TAB> error = curl_multi_fdset ( mh -> multi , & readfds , & writefds , & exceptfds , & maxfd ) ; <NEW_LINE><TAB> SAVE_CURLM_ERROR ( mh , error ) ; <NEW_LINE><NEW_LINE>
#define SMKTREE_DECODE_MAX_RECURSION 32 <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> <TAB> NEED_OP ( t , 0 ) ; <NEW_LINE><TAB> <TAB> <TAB> <TAB> <TAB> NEED_IP ( t , 3 ) ; <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> return - 1 ; <NEW_LINE>
extern void show_object_with_name ( FILE * , struct object * , const char * ) ; <NEW_LINE>
<TAB> <TAB> if ( parent_len > 240 <NEW_LINE><TAB> <TAB> || np -> mb_len > 240 <NEW_LINE><TAB> <TAB> || parent_len + np -> mb_len > 240 ) { <NEW_LINE>
<NEW_LINE>
static LPCWSTR delayDLLs [ ] = { L"wsock32 . dll" , L"crypt32 . dll" , <NEW_LINE>L"cryptsp . dll" , L"cryptbase . dll" , <NEW_LINE>L"msasn1 . dll" , L"userenv . dll" , <NEW_LINE>L"secur32 . dll" } ; <NEW_LINE><NEW_LINE>
<NEW_LINE>static already_AddRefed < nsTimerImpl > PostTimerEvent ( <NEW_LINE>already_AddRefed < nsTimerImpl > aTimerRef ) ; <NEW_LINE>
CHECK_PIXEL_PTR ( 2 * byte_run ) ; <NEW_LINE>
<TAB> <TAB> if ( info -> num < 0 || info -> num > 1 ) <NEW_LINE>
<TAB> <TAB> ! capable_wrt_inode_uidgid ( inode , CAP_FSETID ) ) <NEW_LINE>
<TAB> BIO * cmsbio = NULL , * tmpin = NULL , * tmpout = NULL ; <NEW_LINE>
<TAB> <TAB> if ( perf_event_overflow ( event , & data , regs ) ) <NEW_LINE>
param . iter . type = siBuffer ; <NEW_LINE>
static const char TMH_full [ ] = { 1 , 2 , 3 , 13 , 9 , 10 , 5 , 6 , 12 , 14 , 15 , 16 , 17 , 9 , 4 , 18 , 7 , 8 , 19 , 20 , 21 , 0 } ; <NEW_LINE>static const char TMH_std [ ] = { 1 , 2 , 3 , 11 , 8 , 9 , 5 , 6 , 10 , 12 , 13 , 14 , 15 , 7 , 4 , 16 , 0 } ; <NEW_LINE>
size_t input_forwards_size , <NEW_LINE>size_t input_backwards_size , <NEW_LINE>
<TAB> INTEL_EVENT_EXTRA_REG ( 0xb7 , MSR_OFFCORE_RSP_0 , 0x3f807f8fffull , RSP_0 ) , <NEW_LINE><TAB> INTEL_EVENT_EXTRA_REG ( 0xbb , MSR_OFFCORE_RSP_1 , 0x3f807f8fffull , RSP_1 ) , <NEW_LINE><TAB> EVENT_EXTRA_END <NEW_LINE> } ; <NEW_LINE><NEW_LINE>static struct extra_reg intel_snbep_extra_regs [ ] __read_mostly = { <NEW_LINE><TAB> INTEL_EVENT_EXTRA_REG ( 0xb7 , MSR_OFFCORE_RSP_0 , 0x3fffff8fffull , RSP_0 ) , <NEW_LINE><TAB> INTEL_EVENT_EXTRA_REG ( 0xbb , MSR_OFFCORE_RSP_1 , 0x3fffff8fffull , RSP_1 ) , <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> AuthCapsInfo & caps_info , CryptoKey & session_key , <NEW_LINE><TAB> <TAB> <TAB> <TAB> uint64_t * auid , <NEW_LINE><TAB> <TAB> <TAB> <TAB> std : : unique_ptr < AuthAuthorizerChallenge > * challenge ) = 0 ; <NEW_LINE>
<TAB> <TAB> <TAB> <NEW_LINE>
if ( s -> width != avctx -> width || s -> height != avctx -> height ) { <NEW_LINE>
<NEW_LINE>
void imap_quote_string ( char * dest , size_t dlen , const char * src , bool quote_backtick ) ; <NEW_LINE>
cli_dbgmsg ( "cli_scanxar : decompress into temp file : \n % s , size % zu , \n" <NEW_LINE>"from xar heap offset % zu length % zu\n" , <NEW_LINE>
<TAB> if ( ! is_guest_mode ( vcpu ) && kvm_x86_ops -> get_cpl ( vcpu ) == 0 ) { <NEW_LINE>
<TAB> int kBufferFrameCount = 65536 ; <NEW_LINE><TAB> int bufferSize ; <NEW_LINE><TAB> while ( multiplyCheckOverflow ( kBufferFrameCount , frameSize , & bufferSize ) ) <NEW_LINE><TAB> <TAB> kBufferFrameCount /= 2 ; <NEW_LINE><TAB> void * buffer = malloc ( bufferSize ) ; <NEW_LINE>
<TAB> while ( ibuf [ ind ] == 0x01 && i < gemsafe_cert_max ) { <NEW_LINE>
JSPROP_READONLY | JSPROP_PERMANENT | <NEW_LINE> ( mJSAttributes & JSPROP_ENUMERATE ) ; <NEW_LINE>
<TAB> if ( ND_TTEST2 ( cp , len ) ) { <NEW_LINE>
<TAB> if ( is_nmi ( intr_info ) ) <NEW_LINE>
const HeapPtrShape & previous ( ) const { <NEW_LINE>
<TAB> nfcf_poll -> sensf_res_len = min_t ( __u8 , * data + + , NFC_SENSF_RES_MAXSIZE ) ; <NEW_LINE>
<TAB> <TAB> l_current_pi -> include = ( OPJ_INT16 * ) opj_calloc ( ( size_t ) ( l_tcp -> numlayers + 1U ) * l_step_l , sizeof ( OPJ_INT16 ) ) ; <NEW_LINE>
<TAB> kfree ( rcu_dereference_protected ( inet -> inet_opt , 1 ) ) ; <NEW_LINE>
<TAB> <TAB> if ( ! bh ) { <NEW_LINE><TAB> <TAB> <TAB> err = - EIO ; <NEW_LINE><TAB> <TAB> <TAB> goto out_unlock_inode ; <NEW_LINE><TAB> <TAB> } <NEW_LINE>
<TAB> <TAB> u8 * oid = fs -> cache . array [ x ] . objectId . id ; <NEW_LINE><TAB> <TAB> if ( bufLen < 2 ) <NEW_LINE><TAB> <TAB> <TAB> break ; <NEW_LINE>
<TAB> <TAB> <NEW_LINE><TAB> <TAB> dst_reg -> smin_value = S64_MIN ; <NEW_LINE><TAB> <TAB> dst_reg -> smax_value = S64_MAX ; <NEW_LINE>
<TAB> <TAB> <NEW_LINE><TAB> <TAB> edt -> tvb = tvb_new_real_data ( pd , fd -> cap_len , <NEW_LINE><TAB> <TAB> fd -> pkt_len > G_MAXINT ? G_MAXINT : fd -> pkt_len ) ; <NEW_LINE>
last mod : $ Id $ <NEW_LINE>
<TAB> if ( sec_attr == NULL || sec_attr_len ) { <NEW_LINE>
<TAB> <NEW_LINE><TAB> spinlock_t ps_lock ; <NEW_LINE>
static const float vwin2048 [ 1024 ] = { <NEW_LINE>
<TAB> <TAB> len = ipv6_optlen ( exthdr ) ; <NEW_LINE><TAB> <TAB> if ( len + offset >= IPV6_MAXPLEN ) <NEW_LINE><TAB> <TAB> <TAB> return - EINVAL ; <NEW_LINE><TAB> <TAB> offset += len ; <NEW_LINE>
CHECK_STEP ; <NEW_LINE>
<TAB> <TAB> <TAB> zend_throw_exception_ex ( phar_ce_PharException , 0 TSRMLS_CC , " % s" , error ) ; <NEW_LINE>
if ( parameters -> numresolution == 1 ) { <NEW_LINE>parameters -> res_spec = 1 ; <NEW_LINE>parameters -> prcw_init [ 0 ] = 128 ; <NEW_LINE>parameters -> prch_init [ 0 ] = 128 ; <NEW_LINE> } else { <NEW_LINE>parameters -> res_spec = parameters -> numresolution - 1 ; <NEW_LINE>for ( i = 0 ; i < parameters -> res_spec ; i + + ) { <NEW_LINE>parameters -> prcw_init [ i ] = 256 ; <NEW_LINE>parameters -> prch_init [ i ] = 256 ; <NEW_LINE> } <NEW_LINE>
<TAB> if ( ext2_xattr_cache_insert ( ext2_mb_cache , bh ) ) <NEW_LINE>
<TAB> <TAB> <TAB> goto out_bad ; <NEW_LINE>
<NEW_LINE><TAB> dst = ! IS_ERR ( rt ) ? & rt -> dst : NULL ; <NEW_LINE><TAB> sk_dst_set ( sk , dst ) ; <NEW_LINE><NEW_LINE>
ippSetString ( con -> request , & username , 0 , RemoteRoot ) ; <NEW_LINE>
virtual already_AddRefed < MediaResource > CloneData ( MediaDecoder * aDecoder ) ; <NEW_LINE>
if ( ! ss -> opt . noCache && sid -> cached == never_cached ) <NEW_LINE>
<TAB> return pmd_flags ( pte ) & _PAGE_PSE ; <NEW_LINE>
extern void nfs4_close_state ( struct path * , struct nfs4_state * , fmode_t ) ; <NEW_LINE>extern void nfs4_close_sync ( struct path * , struct nfs4_state * , fmode_t ) ; <NEW_LINE>extern void nfs4_state_set_mode_locked ( struct nfs4_state * , fmode_t ) ; <NEW_LINE>
<TAB> <TAB> else if ( mono_class_is_subclass_of ( dest_class , src_class , FALSE ) ) { <NEW_LINE><TAB> <TAB> <TAB> <NEW_LINE><TAB> <TAB> <TAB> return FALSE ; <NEW_LINE><TAB> <TAB> <TAB> <NEW_LINE><TAB> <TAB> } else <NEW_LINE>
<TAB> <TAB> <NEW_LINE><TAB> <TAB> ret = ocfs2_lock_get_block ( inode , iblock , bh_result , create ) ; <NEW_LINE>
PHPAPI ulong <NEW_LINE>
mark_desktop_file_executable_task_thread_func ( GTask * task , <NEW_LINE>gpointer source_object , <NEW_LINE>gpointer task_data , <NEW_LINE>GCancellable * cancellable ) <NEW_LINE>
<TAB> err = crypto_rng_alg ( tfm ) -> seed ( tfm , seed , slen ) ; <NEW_LINE>
<TAB> <TAB> <TAB> mb2_cache_entry_touch ( ext4_mb_cache , ce ) ; <NEW_LINE><TAB> <TAB> <TAB> mb2_cache_entry_put ( ext4_mb_cache , ce ) ; <NEW_LINE>
<TAB> <TAB> if ( ret == 0 ) { <NEW_LINE><TAB> <TAB> <TAB> if ( res -> backup -> base . num_pages * PAGE_SIZE < <NEW_LINE><TAB> <TAB> <TAB> res -> backup_size ) { <NEW_LINE><TAB> <TAB> <TAB> <TAB> DRM_ERROR ( "Surface backup buffer is too small . \n" ) ; <NEW_LINE><TAB> <TAB> <TAB> <TAB> vmw_dmabuf_unreference ( & res -> backup ) ; <NEW_LINE><TAB> <TAB> <TAB> <TAB> ret = - EINVAL ; <NEW_LINE><TAB> <TAB> <TAB> <TAB> goto out_unlock ; <NEW_LINE><TAB> <TAB> <TAB> } else { <NEW_LINE><TAB> <TAB> <TAB> <TAB> backup_handle = req -> buffer_handle ; <NEW_LINE><TAB> <TAB> <TAB> } <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "sha512" ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "sha384" ) ;
snprintf ( & str [ i_level * 5 ] , sizeof ( str ) - 5 * i_level , <NEW_LINE>
<TAB> <TAB> <TAB> goto out_bad ; <NEW_LINE>
<TAB> <TAB> if ( is_nmi ( intr_info ) ) <NEW_LINE>
<TAB> <TAB> goto error_put_dest_keyring ; <NEW_LINE>
int <TAB> rad_get_vendor_attr ( u_int32_t * , unsigned char * , const void ** , size_t * , const void * , size_t ) ; <NEW_LINE>
<TAB> ( unsigned char * ) e + sizeof ( struct arpt_entry ) >= limit || <NEW_LINE><TAB> ( unsigned char * ) e + e -> next_offset > limit ) { <NEW_LINE>
<TAB> <TAB> schp -> pages [ k ] = alloc_pages ( gfp_mask | __GFP_ZERO , order ) ; <NEW_LINE>
<TAB> <TAB> int count , int pmgr_flag ) <NEW_LINE>
d . lengthAndFlags = buildLengthAndFlags ( length , DEPENDENT_FLAGS ) ; <NEW_LINE>
extern struct nfs_open_context * nfs_find_open_context ( struct inode * inode , struct rpc_cred * cred , fmode_t mode ) ; <NEW_LINE>
<TAB> <TAB> <TAB> request -> ssids [ i ] . ssid_len = nla_len ( attr ) ; <NEW_LINE>
<TAB> <TAB> unsigned int index , count , i ; <NEW_LINE>
nsresult InitBasic ( ) ; <NEW_LINE>
<TAB> . splice_write <TAB> = iter_file_splice_write , <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "wp384" ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "wp256" ) ; <NEW_LINE>
if ( caught_signal && child != ( pid_t ) - 1 ) <NEW_LINE>
extern int rose_parse_facilities ( unsigned char * , unsigned int , struct rose_facilities_struct * ) ; <NEW_LINE>
file_handle = g_file_open_tmp ( "gimp - test - XXXXXX . xcf" , & filename , NULL ) ; <NEW_LINE>g_assert ( file_handle != - 1 ) ; <NEW_LINE>close ( file_handle ) ; <NEW_LINE>
<TAB> if ( argReg > regsz ) { <NEW_LINE><TAB> <TAB> return ; <NEW_LINE>
<TAB> <TAB> . pprev = NULL , <TAB> <TAB> <TAB> <TAB> <TAB> \ <NEW_LINE>
if ( fscanf ( f , "PG % 31 [ \t ] % c % c % 31 [ \t + - ] % d % 31 [ \t ] % d % 31 [ \t ] % d" , temp , & endian1 , <NEW_LINE>
long <NEW_LINE>video_usercopy ( struct file * file , unsigned int cmd , unsigned long arg , <NEW_LINE><TAB> v4l2_kioctl func ) <NEW_LINE>
" < message type = 'chat' to = 'stabber@localhost / profanity' from = 'stabber@localhost' > " <NEW_LINE>
if ( ctx -> seq == NULL ) { <NEW_LINE><NEW_LINE> * minor_status = 0 ; <NEW_LINE>return GSS_S_DEFECTIVE_TOKEN ; <NEW_LINE> } <NEW_LINE><NEW_LINE>if ( header -> buffer . length < token_wrapper_len + 22 ) { <NEW_LINE>
<TAB> . splice_write = iter_file_splice_write , <NEW_LINE>
<TAB> if ( IPCB ( skb ) -> flags & IPSKB_DOREDIRECT && ! opt -> srr && <NEW_LINE><TAB> ! skb_sec_path ( skb ) ) <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> <TAB> <TAB> <TAB> fname_len = strlen ( fname ) ; <NEW_LINE>
<TAB> <TAB> if ( boot_cpu_data . x86_model == 45 ) <NEW_LINE><TAB> <TAB> <TAB> x86_pmu . extra_regs = intel_snbep_extra_regs ; <NEW_LINE><TAB> <TAB> else <NEW_LINE><TAB> <TAB> <TAB> x86_pmu . extra_regs = intel_snb_extra_regs ; <NEW_LINE>
! js_data . isObject ( ) ) <NEW_LINE>
<TAB> struct ip_options_rcu <TAB> * opt ; <NEW_LINE>
<TAB> mutex_init ( & tu -> ioctl_lock ) ; <NEW_LINE>
<TAB> <TAB> <TAB> ( unsigned long ) iterator -> _rtheader + <NEW_LINE><TAB> <TAB> <TAB> sizeof ( uint32_t ) > <NEW_LINE>
<TAB> struct btrfs_dir_item * di = NULL ; <NEW_LINE>
<TAB> if ( ip_options_echo ( & icmp_param -> replyopts . opt . opt , skb ) ) <NEW_LINE>
if ( gData -> stateStackTop ) <NEW_LINE> -- gData -> stateStackTop ; <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "sha384" ) ; <NEW_LINE>
<TAB> opt = xchg ( ( __force struct ipv6_txoptions ** ) & inet6_sk ( sk ) -> opt , <NEW_LINE><TAB> <TAB> opt ) ; <NEW_LINE>
<TAB> char * data ; <NEW_LINE><NEW_LINE><TAB> data = kmalloc ( 8 , GFP_KERNEL ) ; <NEW_LINE><TAB> if ( ! data ) <NEW_LINE><TAB> <TAB> return - ENOMEM ; <NEW_LINE>
BuildTestPacket ( uint8_t proto , uint16_t id , uint16_t off , int mf , <NEW_LINE>const char content , int content_len ) <NEW_LINE>
nsRefPtr < nsRangeStore > mRangeItem ; <NEW_LINE>
<TAB> <TAB> dev -> canch [ i ] = gs_make_candev ( i , intf , dconf ) ; <NEW_LINE>
<TAB> return ntohl ( daddr -> a4 + saddr -> a4 ) ; <NEW_LINE>
<TAB> <TAB> if ( * rsize >= 75 && <NEW_LINE>
<TAB> if ( ! EXT4_SB ( inode -> i_sb ) -> s_journal ) <NEW_LINE>
<TAB> <TAB> mnt_flags |= mnt -> mnt . mnt_flags & ~ MNT_USER_SETTABLE_MASK ; <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> ERROR ( "error using IPC to receive notification " <NEW_LINE><TAB> <TAB> <TAB> <TAB> "from attached process ( 1 ) " ) ; <NEW_LINE>
<TAB> <TAB> <TAB> <TAB> if ( * off >= skb -> len && skb -> len ) { <NEW_LINE>
<TAB> sem_unlock ( sma , - 1 ) ; <NEW_LINE>
if ( ! to -> GetJSObjectPreserveColor ( ) ) { <NEW_LINE>
fh -> ip6fh_nxt = proto ; <NEW_LINE>
virtual nsresult InstallMember ( JSContext * aCx , <NEW_LINE>JSObject * aTargetClassObject ) ; <NEW_LINE>
<TAB> ( void ) gss_delete_sec_context ( minor_status , & ( * ctx ) -> ctx_handle , <NEW_LINE><TAB> <TAB> <TAB> <TAB> output_token ) ; <NEW_LINE><TAB> ( void ) release_spnego_ctx ( ctx ) ; <NEW_LINE>
memcpy ( result , ptr , len ) ; <NEW_LINE>
<TAB> <TAB> v . val = ! ! test_bit ( SOCK_PASSSEC , & sock -> flags ) ; <NEW_LINE>
FILE_RCSID ( "@ ( # ) $ File : cdf . c , v 1 . 64 2014 / 07 / 24 19 : 35 : 39 christos Exp $ " ) <NEW_LINE>
<TAB> <TAB> } <NEW_LINE>
<TAB> <TAB> if ( ( l = np -> file -> basename_utf16 . length ) > ffmax ) <NEW_LINE>
<TAB> mutex_init ( & dev -> lock ) ; <NEW_LINE>
StreamingVertexBuffer * mCurrentValueBuffer [ MAX_VERTEX_ATTRIBS ] ; <NEW_LINE>UINT mCurrentValueOffsets [ MAX_VERTEX_ATTRIBS ] ; <NEW_LINE>
<NEW_LINE>
<TAB> <TAB> if ( skb -> mac_header < ( tnl_hlen + frag_hdr_sz ) ) { <NEW_LINE>
cx -> rsasiglen = sig -> len ; <NEW_LINE>if ( cx -> rsasiglen > sizeof ( cx -> u . rsasig ) ) { <NEW_LINE>PORT_SetError ( SEC_ERROR_INPUT_LEN ) ; <NEW_LINE>rv = SECFailure ; <NEW_LINE>break ; <NEW_LINE> } <NEW_LINE>if ( cx -> hashAlg == SEC_OID_UNKNOWN ) { <NEW_LINE>rv = GetAlgorithmForUnknownDigestInfo ( cx -> key , sig , <NEW_LINE> & cx -> hashAlg , wincx ) ; <NEW_LINE> } <NEW_LINE>
<TAB> room -= sizeof ( struct iphdr ) + icmp_param . replyopts . opt . opt . optlen ; <NEW_LINE>
XPC_XOW_WrapObject ( JSContext * cx , JSObject * parent , jsval * vp , <NEW_LINE>XPCWrappedNative * wn = nsnull ) ; <NEW_LINE>
<TAB> err = xt_check_entry_offsets ( e , e -> elems , e -> target_offset , <NEW_LINE><TAB> <TAB> <TAB> <TAB> e -> next_offset ) ; <NEW_LINE>
mapping ] ) ) ; <NEW_LINE>
FILE_RCSID ( "@ ( # ) $ File : softmagic . c , v 1 . 196 2014 / 11 / 07 15 : 24 : 14 christos Exp $ " ) <NEW_LINE>
guint16 ucs_count , akms_count ; <NEW_LINE>guint i ; <NEW_LINE>
return - ENOMEM ; <NEW_LINE>
<TAB> <TAB> unix_inflight ( scm -> fp -> user , scm -> fp -> fp [ i ] ) ; <NEW_LINE>
if ( g_path_is_absolute ( filename ) ) { <NEW_LINE>
<TAB> ns_capable ( task_active_pid_ns ( current ) -> user_ns , CAP_SYS_ADMIN ) ) && <NEW_LINE>
g_assert ( box_width > 0 ) ; <NEW_LINE><NEW_LINE>
<TAB> <TAB> now = timespec_to_ns ( & n ) ; <NEW_LINE>
<TAB> if ( nsops < 1 || nsops > SEMOPM ) <NEW_LINE>
<TAB> <TAB> if ( psf -> fileoffset < psf -> filelength ) <NEW_LINE><TAB> <TAB> { <TAB> psf_binheader_readf ( psf , "p" , psf -> fileoffset ) ; <NEW_LINE><TAB> <TAB> <TAB> return 1 ; <NEW_LINE><TAB> <TAB> <TAB> } ; <NEW_LINE>
<TAB> <TAB> if ( perf_event_overflow ( event , & data , regs ) ) <NEW_LINE>
<TAB> if ( ( flags & FOLL_WRITE ) && ! can_follow_write_pte ( pte , flags ) ) { <NEW_LINE>
<NEW_LINE> } while ( bufferSize < neededSize && bufferSize > 0 ) ; <NEW_LINE><NEW_LINE><NEW_LINE>if ( bufferSize <= 0 ) { <NEW_LINE>errorCode = XML_ERROR_NO_MEMORY ; <NEW_LINE>return NULL ; <NEW_LINE> } <NEW_LINE><NEW_LINE>
static int asymmetric_key_cmp ( const struct key * key , <NEW_LINE><TAB> <TAB> <TAB> const struct key_match_data * match_data ) <NEW_LINE>
<TAB> <TAB> ret = aio_setup_single_vector ( READ , file , kiocb ) ; <NEW_LINE>
tf = ( luaY_parser ) ( L , p -> z , <NEW_LINE>
<TAB> <TAB> <TAB> mnt_flags |= MNT_NODEV | MNT_LOCK_NODEV ; <NEW_LINE>
static int fmtstr ( char ** , char ** , size_t * , size_t * , <NEW_LINE>const char * , int , int , int ) ; <NEW_LINE>static int fmtint ( char ** , char ** , size_t * , size_t * , <NEW_LINE>LLONG , int , int , int , int ) ; <NEW_LINE>static int fmtfp ( char ** , char ** , size_t * , size_t * , <NEW_LINE>LDOUBLE , int , int , int ) ; <NEW_LINE>static int doapr_outch ( char ** , char ** , size_t * , size_t * , int ) ; <NEW_LINE>static int _dopr ( char ** sbuffer , char ** buffer , <NEW_LINE>size_t * maxlen , size_t * retlen , int * truncated , <NEW_LINE>const char * format , va_list args ) ; <NEW_LINE>
<TAB> <TAB> if ( val < 64 || val > MAX_TCP_WINDOW ) { <NEW_LINE>
<TAB> if ( stringset == ETH_SS_STATS || stringset == ETH_SS_PRIV_FLAGS ) <NEW_LINE>
<TAB> perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS , 1 , regs , address ) ; <NEW_LINE>
if ( ( ret = av_get_packet ( pb , pkt , asize ) ) < 0 ) <NEW_LINE>return ret ; <NEW_LINE>
gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; <NEW_LINE>gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER ; <NEW_LINE>
if ( mem ) { <NEW_LINE>free ( mem ) ; <NEW_LINE>mem = NULL ; <NEW_LINE> } <NEW_LINE>return ; <NEW_LINE>
<TAB> <NEW_LINE>
<TAB> <TAB> resv_map_put ( vma ) ; <NEW_LINE>
guint16 pcs_count , akms_count , pmkid_count ; <NEW_LINE>guint i ; <NEW_LINE>
<TAB> struct gs_host_config * hconf ; <NEW_LINE><TAB> struct gs_device_config * dconf ; <NEW_LINE><NEW_LINE><TAB> hconf = kmalloc ( sizeof ( * hconf ) , GFP_KERNEL ) ; <NEW_LINE><TAB> if ( ! hconf ) <NEW_LINE><TAB> <TAB> return - ENOMEM ; <NEW_LINE><NEW_LINE><TAB> hconf -> byte_order = 0x0000beef ; <NEW_LINE>
<TAB> <TAB> state -> pos = rand % count ; <NEW_LINE>
<TAB> type == NT_GNU_BUILD_ID && ( descsz >= 4 && descsz <= 20 ) ) { <NEW_LINE>
<NEW_LINE>ctx -> terminated = 1 ; <NEW_LINE>return ( GSS_S_COMPLETE ) ; <NEW_LINE>
FILE_RCSID ( "@ ( # ) $ File : softmagic . c , v 1 . 171 2014 / 01 / 08 22 : 02 : 06 christos Exp $ " ) <NEW_LINE>
<TAB> INF ( "io" , <TAB> S_IRUSR , proc_tid_io_accounting ) , <NEW_LINE>
bool TextNodeWillChangeDirection ( nsIContent * aTextNode , Directionality * aOldDir , <NEW_LINE>uint32_t aOffset ) ; <NEW_LINE><NEW_LINE><NEW_LINE>void TextNodeChangedDirection ( nsIContent * aTextNode , Directionality aOldDir , <NEW_LINE>bool aNotify ) ; <NEW_LINE>
<TAB> CKM_INVALID_MECHANISM , UNSUPPORTED_CERT_EXTENSION ) , <NEW_LINE>
segment -> AppendSlice ( * aInputTrack -> GetSegment ( ) , <NEW_LINE>
if ( ( transfer_encoding != NULL ) && ( m_strcasestr ( transfer_encoding , "chunked" ) != NULL ) ) { <NEW_LINE>
<TAB> <TAB> <TAB> zend_throw_exception_ex ( phar_ce_PharException , 0 TSRMLS_CC , " % s" , error ) ; <NEW_LINE>
if ( s -> predictor == MEDIAN && avctx -> pix_fmt == AV_PIX_FMT_YUV422P && avctx -> width % 4 ) { <NEW_LINE>av_log ( avctx , AV_LOG_ERROR , "width must be a multiple of 4 this colorspace and predictor\n" ) ; <NEW_LINE>return AVERROR_INVALIDDATA ; <NEW_LINE> } <NEW_LINE>
if ( quantum_info != ( QuantumInfo * ) NULL ) <NEW_LINE>quantum_info = DestroyQuantumInfo ( quantum_info ) ; <NEW_LINE>
off_t fat_length ; <NEW_LINE>
<TAB> mapping = vma -> vm_file -> f_dentry -> d_inode -> i_mapping ; <NEW_LINE>
<TAB> <TAB> new -> count = 0 ; <NEW_LINE>
<TAB> if ( bee -> ui -> ft_in_start && bu ) { <NEW_LINE>
<TAB> kvm_write_guest_cached ( v -> kvm , & vcpu -> pv_time , <NEW_LINE><TAB> <TAB> <TAB> <TAB> & vcpu -> hv_clock , <NEW_LINE><TAB> <TAB> <TAB> <TAB> sizeof ( vcpu -> hv_clock ) ) ; <NEW_LINE>
<TAB> <TAB> if ( iova < mem -> iova || <NEW_LINE><TAB> <TAB> length > mem -> length || <NEW_LINE><TAB> <TAB> iova > mem -> iova + mem -> length - length ) <NEW_LINE><TAB> <TAB> <TAB> return - EFAULT ; <NEW_LINE><TAB> <TAB> return 0 ; <NEW_LINE>
<TAB> <TAB> s -> packet_length > DTLS1_RT_HEADER_LENGTH && <NEW_LINE><TAB> <TAB> s -> packet [ DTLS1_RT_HEADER_LENGTH ] == SSL3_MT_CLIENT_HELLO ) && <NEW_LINE>
char query [ NAME_LEN + 100 ] ; <NEW_LINE>int len ; <NEW_LINE>
<NEW_LINE>
p_oggpacket -> packet , p_oggpacket -> bytes ) ; <NEW_LINE>
<TAB> { <NEW_LINE><TAB> <TAB> if ( psf -> header . indx + 16 >= psf -> header . len && psf_bump_header_allocation ( psf , 16 ) ) <NEW_LINE><TAB> <TAB> <TAB> return count ; <NEW_LINE><NEW_LINE><TAB> <TAB> switch ( c ) <NEW_LINE>
MODULE_ALIAS_CRYPTO ( "crct10dif" ) ; <NEW_LINE>MODULE_ALIAS_CRYPTO ( "crct10dif - pclmul" ) ;
<TAB> size_t cwd_skip = 0 ; <NEW_LINE>
<TAB> ret = xt_compat_check_entry_offsets ( e , e -> elems , <NEW_LINE>
<TAB> <TAB> <TAB> zend_throw_exception_ex ( phar_ce_PharException , 0 TSRMLS_CC , " % s" , error ) ; <NEW_LINE>
<TAB> <TAB> int types_list_size = r_read_le32 ( p ) ; <NEW_LINE>
<TAB> <TAB> if ( sbinfo -> spool ) { <NEW_LINE><TAB> <TAB> <TAB> long free_pages ; <NEW_LINE><NEW_LINE><TAB> <TAB> <TAB> spin_lock ( & sbinfo -> spool -> lock ) ; <NEW_LINE><TAB> <TAB> <TAB> buf -> f_blocks = sbinfo -> spool -> max_hpages ; <NEW_LINE><TAB> <TAB> <TAB> free_pages = sbinfo -> spool -> max_hpages <NEW_LINE><TAB> <TAB> <TAB> <TAB> - sbinfo -> spool -> used_hpages ; <NEW_LINE><TAB> <TAB> <TAB> buf -> f_bavail = buf -> f_bfree = free_pages ; <NEW_LINE><TAB> <TAB> <TAB> spin_unlock ( & sbinfo -> spool -> lock ) ; <NEW_LINE>
<TAB> if ( inet_opt == NULL || ! inet_opt -> opt . srr ) <NEW_LINE>
<TAB> <TAB> if ( ! PS ( use_only_cookies ) && ! PS ( id ) && <NEW_LINE>
printf ( " % 10lld bytes per FAT ( = % llu sectors ) \n" , ( long long ) fs -> fat_size , <NEW_LINE><TAB> ( long long ) fs -> fat_size / lss ) ; <NEW_LINE>
bytes_per_line = sun_info . width * sun_info . depth ; <NEW_LINE>sun_data = ( unsigned char * ) AcquireQuantumMemory ( ( size_t ) MagickMax ( <NEW_LINE>sun_info . length , bytes_per_line * sun_info . width ) , sizeof ( * sun_data ) ) ; <NEW_LINE>
OM_uint32 KRB5_CALLCONV <NEW_LINE>
<TAB> if ( isDH ) { <NEW_LINE><TAB> master_params . pVersion = NULL ; <NEW_LINE><TAB> } else { <NEW_LINE><TAB> master_params . pVersion = & pms_version ; <NEW_LINE><TAB> } <NEW_LINE>
